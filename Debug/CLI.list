
CLI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08006cc0  08006cc0  00016cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e10  08006e10  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006e10  08006e10  00016e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e18  08006e18  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e18  08006e18  00016e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e1c  08006e1c  00016e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006e20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ad8  20000074  08006e94  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b4c  08006e94  00021b4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d804  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000392b  00000000  00000000  0003d8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001788  00000000  00000000  000411d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001630  00000000  00000000  00042960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029125  00000000  00000000  00043f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a837  00000000  00000000  0006d0b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff267  00000000  00000000  000878ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00186b53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065fc  00000000  00000000  00186ba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ca8 	.word	0x08006ca8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006ca8 	.word	0x08006ca8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0

}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr

080004e2 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0
return 0;
 80004e6:	2300      	movs	r3, #0
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
	...

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fa67 	bl	80009ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f826 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f8a6 	bl	8000650 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000504:	f000 f874 	bl	80005f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000508:	f003 fd36 	bl	8003f78 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800050c:	4a09      	ldr	r2, [pc, #36]	; (8000534 <main+0x40>)
 800050e:	2100      	movs	r1, #0
 8000510:	4809      	ldr	r0, [pc, #36]	; (8000538 <main+0x44>)
 8000512:	f003 fd7b 	bl	800400c <osThreadNew>
 8000516:	4603      	mov	r3, r0
 8000518:	4a08      	ldr	r2, [pc, #32]	; (800053c <main+0x48>)
 800051a:	6013      	str	r3, [r2, #0]

  /* creation of CLI_Task */
  CLI_TaskHandle = osThreadNew(StartCLI_Task, NULL, &CLI_Task_attributes);
 800051c:	4a08      	ldr	r2, [pc, #32]	; (8000540 <main+0x4c>)
 800051e:	2100      	movs	r1, #0
 8000520:	4808      	ldr	r0, [pc, #32]	; (8000544 <main+0x50>)
 8000522:	f003 fd73 	bl	800400c <osThreadNew>
 8000526:	4603      	mov	r3, r0
 8000528:	4a07      	ldr	r2, [pc, #28]	; (8000548 <main+0x54>)
 800052a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800052c:	f003 fd48 	bl	8003fc0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000530:	e7fe      	b.n	8000530 <main+0x3c>
 8000532:	bf00      	nop
 8000534:	08006d20 	.word	0x08006d20
 8000538:	080006b5 	.word	0x080006b5
 800053c:	20000114 	.word	0x20000114
 8000540:	08006d44 	.word	0x08006d44
 8000544:	080006f9 	.word	0x080006f9
 8000548:	20000118 	.word	0x20000118

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b096      	sub	sp, #88	; 0x58
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	2244      	movs	r2, #68	; 0x44
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f006 fada 	bl	8006b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	463b      	mov	r3, r7
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800056e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000572:	f000 fdaf 	bl	80010d4 <HAL_PWREx_ControlVoltageScaling>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800057c:	f000 f8d6 	bl	800072c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000580:	2310      	movs	r3, #16
 8000582:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000584:	2301      	movs	r3, #1
 8000586:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800058c:	2360      	movs	r3, #96	; 0x60
 800058e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000590:	2302      	movs	r3, #2
 8000592:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000594:	2301      	movs	r3, #1
 8000596:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000598:	2301      	movs	r3, #1
 800059a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800059c:	2328      	movs	r3, #40	; 0x28
 800059e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005a0:	2307      	movs	r3, #7
 80005a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 fde5 	bl	8001180 <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005bc:	f000 f8b6 	bl	800072c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c4:	2303      	movs	r3, #3
 80005c6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d4:	463b      	mov	r3, r7
 80005d6:	2104      	movs	r1, #4
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 f9ad 	bl	8001938 <HAL_RCC_ClockConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005e4:	f000 f8a2 	bl	800072c <Error_Handler>
  }
}
 80005e8:	bf00      	nop
 80005ea:	3758      	adds	r7, #88	; 0x58
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005f4:	4b14      	ldr	r3, [pc, #80]	; (8000648 <MX_USART1_UART_Init+0x58>)
 80005f6:	4a15      	ldr	r2, [pc, #84]	; (800064c <MX_USART1_UART_Init+0x5c>)
 80005f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005fa:	4b13      	ldr	r3, [pc, #76]	; (8000648 <MX_USART1_UART_Init+0x58>)
 80005fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000600:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_USART1_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_USART1_UART_Init+0x58>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_USART1_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_USART1_UART_Init+0x58>)
 8000616:	220c      	movs	r2, #12
 8000618:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MX_USART1_UART_Init+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_USART1_UART_Init+0x58>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <MX_USART1_UART_Init+0x58>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_USART1_UART_Init+0x58>)
 800062e:	2200      	movs	r2, #0
 8000630:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_USART1_UART_Init+0x58>)
 8000634:	f002 fb64 	bl	8002d00 <HAL_UART_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800063e:	f000 f875 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000090 	.word	0x20000090
 800064c:	40013800 	.word	0x40013800

08000650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_GPIO_Init+0x60>)
 8000666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000668:	4a11      	ldr	r2, [pc, #68]	; (80006b0 <MX_GPIO_Init+0x60>)
 800066a:	f043 0301 	orr.w	r3, r3, #1
 800066e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_GPIO_Init+0x60>)
 8000672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000674:	f003 0301 	and.w	r3, r3, #1
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000682:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000686:	f000 fce5 	bl	8001054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800068a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800068e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	2301      	movs	r3, #1
 8000692:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	4619      	mov	r1, r3
 80006a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a4:	f000 fb2c 	bl	8000d00 <HAL_GPIO_Init>

}
 80006a8:	bf00      	nop
 80006aa:	3718      	adds	r7, #24
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000

080006b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, LED_Pin);
 80006bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c4:	f000 fcde 	bl	8001084 <HAL_GPIO_TogglePin>
	  char test_str[] = "Test \n\r";
 80006c8:	4a09      	ldr	r2, [pc, #36]	; (80006f0 <StartDefaultTask+0x3c>)
 80006ca:	f107 0308 	add.w	r3, r7, #8
 80006ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006d2:	e883 0003 	stmia.w	r3, {r0, r1}
	  HAL_UART_Transmit(&huart1, test_str, sizeof(test_str), 100);
 80006d6:	f107 0108 	add.w	r1, r7, #8
 80006da:	2364      	movs	r3, #100	; 0x64
 80006dc:	2208      	movs	r2, #8
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <StartDefaultTask+0x40>)
 80006e0:	f002 fb5c 	bl	8002d9c <HAL_UART_Transmit>

	 // HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size);
	  osDelay(500);
 80006e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006e8:	f003 fd22 	bl	8004130 <osDelay>
  {
 80006ec:	e7e6      	b.n	80006bc <StartDefaultTask+0x8>
 80006ee:	bf00      	nop
 80006f0:	08006cd8 	.word	0x08006cd8
 80006f4:	20000090 	.word	0x20000090

080006f8 <StartCLI_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCLI_Task */
void StartCLI_Task(void *argument)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCLI_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000700:	2001      	movs	r0, #1
 8000702:	f003 fd15 	bl	8004130 <osDelay>
 8000706:	e7fb      	b.n	8000700 <StartCLI_Task+0x8>

08000708 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a04      	ldr	r2, [pc, #16]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d101      	bne.n	800071e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800071a:	f000 f96f 	bl	80009fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40000800 	.word	0x40000800

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	e7fe      	b.n	8000734 <Error_Handler+0x8>
	...

08000738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <HAL_MspInit+0x4c>)
 8000740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000742:	4a10      	ldr	r2, [pc, #64]	; (8000784 <HAL_MspInit+0x4c>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6613      	str	r3, [r2, #96]	; 0x60
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <HAL_MspInit+0x4c>)
 800074c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <HAL_MspInit+0x4c>)
 8000758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800075a:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <HAL_MspInit+0x4c>)
 800075c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000760:	6593      	str	r3, [r2, #88]	; 0x58
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <HAL_MspInit+0x4c>)
 8000764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	210f      	movs	r1, #15
 8000772:	f06f 0001 	mvn.w	r0, #1
 8000776:	f000 fa19 	bl	8000bac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000

08000788 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b0ac      	sub	sp, #176	; 0xb0
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	2288      	movs	r2, #136	; 0x88
 80007a6:	2100      	movs	r1, #0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f006 f9b3 	bl	8006b14 <memset>
  if(huart->Instance==USART1)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a26      	ldr	r2, [pc, #152]	; (800084c <HAL_UART_MspInit+0xc4>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d144      	bne.n	8000842 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007bc:	2300      	movs	r3, #0
 80007be:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4618      	mov	r0, r3
 80007c6:	f001 fb0d 	bl	8001de4 <HAL_RCCEx_PeriphCLKConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80007d0:	f7ff ffac 	bl	800072c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007d4:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <HAL_UART_MspInit+0xc8>)
 80007d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007d8:	4a1d      	ldr	r2, [pc, #116]	; (8000850 <HAL_UART_MspInit+0xc8>)
 80007da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007de:	6613      	str	r3, [r2, #96]	; 0x60
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <HAL_UART_MspInit+0xc8>)
 80007e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <HAL_UART_MspInit+0xc8>)
 80007ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f0:	4a17      	ldr	r2, [pc, #92]	; (8000850 <HAL_UART_MspInit+0xc8>)
 80007f2:	f043 0301 	orr.w	r3, r3, #1
 80007f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <HAL_UART_MspInit+0xc8>)
 80007fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fc:	f003 0301 	and.w	r3, r3, #1
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000804:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000808:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	2302      	movs	r3, #2
 800080e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800081e:	2307      	movs	r3, #7
 8000820:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000828:	4619      	mov	r1, r3
 800082a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082e:	f000 fa67 	bl	8000d00 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	2105      	movs	r1, #5
 8000836:	2025      	movs	r0, #37	; 0x25
 8000838:	f000 f9b8 	bl	8000bac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800083c:	2025      	movs	r0, #37	; 0x25
 800083e:	f000 f9d1 	bl	8000be4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000842:	bf00      	nop
 8000844:	37b0      	adds	r7, #176	; 0xb0
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40013800 	.word	0x40013800
 8000850:	40021000 	.word	0x40021000

08000854 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08c      	sub	sp, #48	; 0x30
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000864:	2200      	movs	r2, #0
 8000866:	6879      	ldr	r1, [r7, #4]
 8000868:	201e      	movs	r0, #30
 800086a:	f000 f99f 	bl	8000bac <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800086e:	201e      	movs	r0, #30
 8000870:	f000 f9b8 	bl	8000be4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <HAL_InitTick+0x9c>)
 8000876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000878:	4a1d      	ldr	r2, [pc, #116]	; (80008f0 <HAL_InitTick+0x9c>)
 800087a:	f043 0304 	orr.w	r3, r3, #4
 800087e:	6593      	str	r3, [r2, #88]	; 0x58
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <HAL_InitTick+0x9c>)
 8000882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000884:	f003 0304 	and.w	r3, r3, #4
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800088c:	f107 0210 	add.w	r2, r7, #16
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4611      	mov	r1, r2
 8000896:	4618      	mov	r0, r3
 8000898:	f001 fa12 	bl	8001cc0 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800089c:	f001 f9e4 	bl	8001c68 <HAL_RCC_GetPCLK1Freq>
 80008a0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a4:	4a13      	ldr	r2, [pc, #76]	; (80008f4 <HAL_InitTick+0xa0>)
 80008a6:	fba2 2303 	umull	r2, r3, r2, r3
 80008aa:	0c9b      	lsrs	r3, r3, #18
 80008ac:	3b01      	subs	r3, #1
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <HAL_InitTick+0xa4>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	; (80008fc <HAL_InitTick+0xa8>)
 80008b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <HAL_InitTick+0xa4>)
 80008b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008bc:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80008be:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <HAL_InitTick+0xa4>)
 80008c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <HAL_InitTick+0xa4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <HAL_InitTick+0xa4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80008d0:	4809      	ldr	r0, [pc, #36]	; (80008f8 <HAL_InitTick+0xa4>)
 80008d2:	f001 ff43 	bl	800275c <HAL_TIM_Base_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d104      	bne.n	80008e6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80008dc:	4806      	ldr	r0, [pc, #24]	; (80008f8 <HAL_InitTick+0xa4>)
 80008de:	f001 ff9f 	bl	8002820 <HAL_TIM_Base_Start_IT>
 80008e2:	4603      	mov	r3, r0
 80008e4:	e000      	b.n	80008e8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3730      	adds	r7, #48	; 0x30
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40021000 	.word	0x40021000
 80008f4:	431bde83 	.word	0x431bde83
 80008f8:	2000011c 	.word	0x2000011c
 80008fc:	40000800 	.word	0x40000800

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <NMI_Handler+0x4>

08000906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <HardFault_Handler+0x4>

0800090c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <MemManage_Handler+0x4>

08000912 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <UsageFault_Handler+0x4>

0800091e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <TIM4_IRQHandler+0x10>)
 8000932:	f001 ffe5 	bl	8002900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	2000011c 	.word	0x2000011c

08000940 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <USART1_IRQHandler+0x10>)
 8000946:	f002 fabd 	bl	8002ec4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000090 	.word	0x20000090

08000954 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <SystemInit+0x20>)
 800095a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800095e:	4a05      	ldr	r2, [pc, #20]	; (8000974 <SystemInit+0x20>)
 8000960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000978:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800097c:	f7ff ffea 	bl	8000954 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000980:	480c      	ldr	r0, [pc, #48]	; (80009b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000982:	490d      	ldr	r1, [pc, #52]	; (80009b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000984:	4a0d      	ldr	r2, [pc, #52]	; (80009bc <LoopForever+0xe>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000988:	e002      	b.n	8000990 <LoopCopyDataInit>

0800098a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800098c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098e:	3304      	adds	r3, #4

08000990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000994:	d3f9      	bcc.n	800098a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000996:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000998:	4c0a      	ldr	r4, [pc, #40]	; (80009c4 <LoopForever+0x16>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800099c:	e001      	b.n	80009a2 <LoopFillZerobss>

0800099e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a0:	3204      	adds	r2, #4

080009a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a4:	d3fb      	bcc.n	800099e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009a6:	f006 f881 	bl	8006aac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009aa:	f7ff fda3 	bl	80004f4 <main>

080009ae <LoopForever>:

LoopForever:
    b LoopForever
 80009ae:	e7fe      	b.n	80009ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80009bc:	08006e20 	.word	0x08006e20
  ldr r2, =_sbss
 80009c0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80009c4:	20001b4c 	.word	0x20001b4c

080009c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009c8:	e7fe      	b.n	80009c8 <ADC1_2_IRQHandler>

080009ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009d0:	2300      	movs	r3, #0
 80009d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d4:	2003      	movs	r0, #3
 80009d6:	f000 f8de 	bl	8000b96 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009da:	200f      	movs	r0, #15
 80009dc:	f7ff ff3a 	bl	8000854 <HAL_InitTick>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d002      	beq.n	80009ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	71fb      	strb	r3, [r7, #7]
 80009ea:	e001      	b.n	80009f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009ec:	f7ff fea4 	bl	8000738 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009f0:	79fb      	ldrb	r3, [r7, #7]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_IncTick+0x20>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_IncTick+0x24>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <HAL_IncTick+0x24>)
 8000a0e:	6013      	str	r3, [r2, #0]
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	20000168 	.word	0x20000168

08000a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return uwTick;
 8000a28:	4b03      	ldr	r3, [pc, #12]	; (8000a38 <HAL_GetTick+0x14>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20000168 	.word	0x20000168

08000a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a58:	4013      	ands	r3, r2
 8000a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a6e:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	60d3      	str	r3, [r2, #12]
}
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <__NVIC_GetPriorityGrouping+0x18>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	0a1b      	lsrs	r3, r3, #8
 8000a8e:	f003 0307 	and.w	r3, r3, #7
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	db0b      	blt.n	8000aca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	f003 021f 	and.w	r2, r3, #31
 8000ab8:	4907      	ldr	r1, [pc, #28]	; (8000ad8 <__NVIC_EnableIRQ+0x38>)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	095b      	lsrs	r3, r3, #5
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000e100 	.word	0xe000e100

08000adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	db0a      	blt.n	8000b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	490c      	ldr	r1, [pc, #48]	; (8000b28 <__NVIC_SetPriority+0x4c>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	0112      	lsls	r2, r2, #4
 8000afc:	b2d2      	uxtb	r2, r2
 8000afe:	440b      	add	r3, r1
 8000b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b04:	e00a      	b.n	8000b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4908      	ldr	r1, [pc, #32]	; (8000b2c <__NVIC_SetPriority+0x50>)
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	f003 030f 	and.w	r3, r3, #15
 8000b12:	3b04      	subs	r3, #4
 8000b14:	0112      	lsls	r2, r2, #4
 8000b16:	b2d2      	uxtb	r2, r2
 8000b18:	440b      	add	r3, r1
 8000b1a:	761a      	strb	r2, [r3, #24]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000e100 	.word	0xe000e100
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b089      	sub	sp, #36	; 0x24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	f1c3 0307 	rsb	r3, r3, #7
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	bf28      	it	cs
 8000b4e:	2304      	movcs	r3, #4
 8000b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3304      	adds	r3, #4
 8000b56:	2b06      	cmp	r3, #6
 8000b58:	d902      	bls.n	8000b60 <NVIC_EncodePriority+0x30>
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3b03      	subs	r3, #3
 8000b5e:	e000      	b.n	8000b62 <NVIC_EncodePriority+0x32>
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43da      	mvns	r2, r3
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	401a      	ands	r2, r3
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b82:	43d9      	mvns	r1, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	4313      	orrs	r3, r2
         );
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3724      	adds	r7, #36	; 0x24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff ff4c 	bl	8000a3c <__NVIC_SetPriorityGrouping>
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
 8000bb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bbe:	f7ff ff61 	bl	8000a84 <__NVIC_GetPriorityGrouping>
 8000bc2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	68b9      	ldr	r1, [r7, #8]
 8000bc8:	6978      	ldr	r0, [r7, #20]
 8000bca:	f7ff ffb1 	bl	8000b30 <NVIC_EncodePriority>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ff80 	bl	8000adc <__NVIC_SetPriority>
}
 8000bdc:	bf00      	nop
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff ff54 	bl	8000aa0 <__NVIC_EnableIRQ>
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d008      	beq.n	8000c2a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2200      	movs	r2, #0
 8000c22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e022      	b.n	8000c70 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f022 020e 	bic.w	r2, r2, #14
 8000c38:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f022 0201 	bic.w	r2, r2, #1
 8000c48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	f003 021c 	and.w	r2, r3, #28
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	2101      	movs	r1, #1
 8000c58:	fa01 f202 	lsl.w	r2, r1, r2
 8000c5c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2201      	movs	r2, #1
 8000c62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c84:	2300      	movs	r3, #0
 8000c86:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d005      	beq.n	8000ca0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2204      	movs	r2, #4
 8000c98:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	73fb      	strb	r3, [r7, #15]
 8000c9e:	e029      	b.n	8000cf4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f022 020e 	bic.w	r2, r2, #14
 8000cae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f022 0201 	bic.w	r2, r2, #1
 8000cbe:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc4:	f003 021c 	and.w	r2, r3, #28
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	2101      	movs	r1, #1
 8000cce:	fa01 f202 	lsl.w	r2, r1, r2
 8000cd2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d003      	beq.n	8000cf4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	4798      	blx	r3
    }
  }
  return status;
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b087      	sub	sp, #28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d0e:	e17f      	b.n	8001010 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	2101      	movs	r1, #1
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f000 8171 	beq.w	800100a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 0303 	and.w	r3, r3, #3
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d005      	beq.n	8000d40 <HAL_GPIO_Init+0x40>
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f003 0303 	and.w	r3, r3, #3
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d130      	bne.n	8000da2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	68da      	ldr	r2, [r3, #12]
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d76:	2201      	movs	r2, #1
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	091b      	lsrs	r3, r3, #4
 8000d8c:	f003 0201 	and.w	r2, r3, #1
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f003 0303 	and.w	r3, r3, #3
 8000daa:	2b03      	cmp	r3, #3
 8000dac:	d118      	bne.n	8000de0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000db4:	2201      	movs	r2, #1
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	08db      	lsrs	r3, r3, #3
 8000dca:	f003 0201 	and.w	r2, r3, #1
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	2b03      	cmp	r3, #3
 8000dea:	d017      	beq.n	8000e1c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	2203      	movs	r2, #3
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	689a      	ldr	r2, [r3, #8]
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0303 	and.w	r3, r3, #3
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d123      	bne.n	8000e70 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	08da      	lsrs	r2, r3, #3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3208      	adds	r2, #8
 8000e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e34:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	f003 0307 	and.w	r3, r3, #7
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	220f      	movs	r2, #15
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	691a      	ldr	r2, [r3, #16]
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	08da      	lsrs	r2, r3, #3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3208      	adds	r2, #8
 8000e6a:	6939      	ldr	r1, [r7, #16]
 8000e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0203 	and.w	r2, r3, #3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f000 80ac 	beq.w	800100a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	4b5f      	ldr	r3, [pc, #380]	; (8001030 <HAL_GPIO_Init+0x330>)
 8000eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb6:	4a5e      	ldr	r2, [pc, #376]	; (8001030 <HAL_GPIO_Init+0x330>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ebe:	4b5c      	ldr	r3, [pc, #368]	; (8001030 <HAL_GPIO_Init+0x330>)
 8000ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000eca:	4a5a      	ldr	r2, [pc, #360]	; (8001034 <HAL_GPIO_Init+0x334>)
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	089b      	lsrs	r3, r3, #2
 8000ed0:	3302      	adds	r3, #2
 8000ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	220f      	movs	r2, #15
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ef4:	d025      	beq.n	8000f42 <HAL_GPIO_Init+0x242>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a4f      	ldr	r2, [pc, #316]	; (8001038 <HAL_GPIO_Init+0x338>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d01f      	beq.n	8000f3e <HAL_GPIO_Init+0x23e>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a4e      	ldr	r2, [pc, #312]	; (800103c <HAL_GPIO_Init+0x33c>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d019      	beq.n	8000f3a <HAL_GPIO_Init+0x23a>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a4d      	ldr	r2, [pc, #308]	; (8001040 <HAL_GPIO_Init+0x340>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d013      	beq.n	8000f36 <HAL_GPIO_Init+0x236>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4c      	ldr	r2, [pc, #304]	; (8001044 <HAL_GPIO_Init+0x344>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d00d      	beq.n	8000f32 <HAL_GPIO_Init+0x232>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4b      	ldr	r2, [pc, #300]	; (8001048 <HAL_GPIO_Init+0x348>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d007      	beq.n	8000f2e <HAL_GPIO_Init+0x22e>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4a      	ldr	r2, [pc, #296]	; (800104c <HAL_GPIO_Init+0x34c>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d101      	bne.n	8000f2a <HAL_GPIO_Init+0x22a>
 8000f26:	2306      	movs	r3, #6
 8000f28:	e00c      	b.n	8000f44 <HAL_GPIO_Init+0x244>
 8000f2a:	2307      	movs	r3, #7
 8000f2c:	e00a      	b.n	8000f44 <HAL_GPIO_Init+0x244>
 8000f2e:	2305      	movs	r3, #5
 8000f30:	e008      	b.n	8000f44 <HAL_GPIO_Init+0x244>
 8000f32:	2304      	movs	r3, #4
 8000f34:	e006      	b.n	8000f44 <HAL_GPIO_Init+0x244>
 8000f36:	2303      	movs	r3, #3
 8000f38:	e004      	b.n	8000f44 <HAL_GPIO_Init+0x244>
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	e002      	b.n	8000f44 <HAL_GPIO_Init+0x244>
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e000      	b.n	8000f44 <HAL_GPIO_Init+0x244>
 8000f42:	2300      	movs	r3, #0
 8000f44:	697a      	ldr	r2, [r7, #20]
 8000f46:	f002 0203 	and.w	r2, r2, #3
 8000f4a:	0092      	lsls	r2, r2, #2
 8000f4c:	4093      	lsls	r3, r2
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f54:	4937      	ldr	r1, [pc, #220]	; (8001034 <HAL_GPIO_Init+0x334>)
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	089b      	lsrs	r3, r3, #2
 8000f5a:	3302      	adds	r3, #2
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f62:	4b3b      	ldr	r3, [pc, #236]	; (8001050 <HAL_GPIO_Init+0x350>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f86:	4a32      	ldr	r2, [pc, #200]	; (8001050 <HAL_GPIO_Init+0x350>)
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f8c:	4b30      	ldr	r3, [pc, #192]	; (8001050 <HAL_GPIO_Init+0x350>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	43db      	mvns	r3, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d003      	beq.n	8000fb0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fb0:	4a27      	ldr	r2, [pc, #156]	; (8001050 <HAL_GPIO_Init+0x350>)
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fb6:	4b26      	ldr	r3, [pc, #152]	; (8001050 <HAL_GPIO_Init+0x350>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fda:	4a1d      	ldr	r2, [pc, #116]	; (8001050 <HAL_GPIO_Init+0x350>)
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <HAL_GPIO_Init+0x350>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001004:	4a12      	ldr	r2, [pc, #72]	; (8001050 <HAL_GPIO_Init+0x350>)
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	3301      	adds	r3, #1
 800100e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa22 f303 	lsr.w	r3, r2, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	f47f ae78 	bne.w	8000d10 <HAL_GPIO_Init+0x10>
  }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	371c      	adds	r7, #28
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40021000 	.word	0x40021000
 8001034:	40010000 	.word	0x40010000
 8001038:	48000400 	.word	0x48000400
 800103c:	48000800 	.word	0x48000800
 8001040:	48000c00 	.word	0x48000c00
 8001044:	48001000 	.word	0x48001000
 8001048:	48001400 	.word	0x48001400
 800104c:	48001800 	.word	0x48001800
 8001050:	40010400 	.word	0x40010400

08001054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	807b      	strh	r3, [r7, #2]
 8001060:	4613      	mov	r3, r2
 8001062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001064:	787b      	ldrb	r3, [r7, #1]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800106a:	887a      	ldrh	r2, [r7, #2]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001070:	e002      	b.n	8001078 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001072:	887a      	ldrh	r2, [r7, #2]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4013      	ands	r3, r2
 800109c:	041a      	lsls	r2, r3, #16
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	43d9      	mvns	r1, r3
 80010a2:	887b      	ldrh	r3, [r7, #2]
 80010a4:	400b      	ands	r3, r1
 80010a6:	431a      	orrs	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	619a      	str	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40007000 	.word	0x40007000

080010d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010e2:	d130      	bne.n	8001146 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010e4:	4b23      	ldr	r3, [pc, #140]	; (8001174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010f0:	d038      	beq.n	8001164 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f2:	4b20      	ldr	r3, [pc, #128]	; (8001174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010fa:	4a1e      	ldr	r2, [pc, #120]	; (8001174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001100:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2232      	movs	r2, #50	; 0x32
 8001108:	fb02 f303 	mul.w	r3, r2, r3
 800110c:	4a1b      	ldr	r2, [pc, #108]	; (800117c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800110e:	fba2 2303 	umull	r2, r3, r2, r3
 8001112:	0c9b      	lsrs	r3, r3, #18
 8001114:	3301      	adds	r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001118:	e002      	b.n	8001120 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3b01      	subs	r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800112c:	d102      	bne.n	8001134 <HAL_PWREx_ControlVoltageScaling+0x60>
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1f2      	bne.n	800111a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800113c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001140:	d110      	bne.n	8001164 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e00f      	b.n	8001166 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800114e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001152:	d007      	beq.n	8001164 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001154:	4b07      	ldr	r3, [pc, #28]	; (8001174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800115c:	4a05      	ldr	r2, [pc, #20]	; (8001174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800115e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001162:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40007000 	.word	0x40007000
 8001178:	20000000 	.word	0x20000000
 800117c:	431bde83 	.word	0x431bde83

08001180 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e3ca      	b.n	8001928 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001192:	4b97      	ldr	r3, [pc, #604]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 030c 	and.w	r3, r3, #12
 800119a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800119c:	4b94      	ldr	r3, [pc, #592]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0310 	and.w	r3, r3, #16
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 80e4 	beq.w	800137c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d007      	beq.n	80011ca <HAL_RCC_OscConfig+0x4a>
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	2b0c      	cmp	r3, #12
 80011be:	f040 808b 	bne.w	80012d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	f040 8087 	bne.w	80012d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011ca:	4b89      	ldr	r3, [pc, #548]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d005      	beq.n	80011e2 <HAL_RCC_OscConfig+0x62>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e3a2      	b.n	8001928 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a1a      	ldr	r2, [r3, #32]
 80011e6:	4b82      	ldr	r3, [pc, #520]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d004      	beq.n	80011fc <HAL_RCC_OscConfig+0x7c>
 80011f2:	4b7f      	ldr	r3, [pc, #508]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011fa:	e005      	b.n	8001208 <HAL_RCC_OscConfig+0x88>
 80011fc:	4b7c      	ldr	r3, [pc, #496]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80011fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001202:	091b      	lsrs	r3, r3, #4
 8001204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001208:	4293      	cmp	r3, r2
 800120a:	d223      	bcs.n	8001254 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a1b      	ldr	r3, [r3, #32]
 8001210:	4618      	mov	r0, r3
 8001212:	f000 fd87 	bl	8001d24 <RCC_SetFlashLatencyFromMSIRange>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e383      	b.n	8001928 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001220:	4b73      	ldr	r3, [pc, #460]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a72      	ldr	r2, [pc, #456]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001226:	f043 0308 	orr.w	r3, r3, #8
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	4b70      	ldr	r3, [pc, #448]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	496d      	ldr	r1, [pc, #436]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 800123a:	4313      	orrs	r3, r2
 800123c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800123e:	4b6c      	ldr	r3, [pc, #432]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	021b      	lsls	r3, r3, #8
 800124c:	4968      	ldr	r1, [pc, #416]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 800124e:	4313      	orrs	r3, r2
 8001250:	604b      	str	r3, [r1, #4]
 8001252:	e025      	b.n	80012a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001254:	4b66      	ldr	r3, [pc, #408]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a65      	ldr	r2, [pc, #404]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 800125a:	f043 0308 	orr.w	r3, r3, #8
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	4b63      	ldr	r3, [pc, #396]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	4960      	ldr	r1, [pc, #384]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 800126e:	4313      	orrs	r3, r2
 8001270:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001272:	4b5f      	ldr	r3, [pc, #380]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	021b      	lsls	r3, r3, #8
 8001280:	495b      	ldr	r1, [pc, #364]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001282:	4313      	orrs	r3, r2
 8001284:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d109      	bne.n	80012a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	4618      	mov	r0, r3
 8001292:	f000 fd47 	bl	8001d24 <RCC_SetFlashLatencyFromMSIRange>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e343      	b.n	8001928 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012a0:	f000 fc4a 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 80012a4:	4602      	mov	r2, r0
 80012a6:	4b52      	ldr	r3, [pc, #328]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	091b      	lsrs	r3, r3, #4
 80012ac:	f003 030f 	and.w	r3, r3, #15
 80012b0:	4950      	ldr	r1, [pc, #320]	; (80013f4 <HAL_RCC_OscConfig+0x274>)
 80012b2:	5ccb      	ldrb	r3, [r1, r3]
 80012b4:	f003 031f 	and.w	r3, r3, #31
 80012b8:	fa22 f303 	lsr.w	r3, r2, r3
 80012bc:	4a4e      	ldr	r2, [pc, #312]	; (80013f8 <HAL_RCC_OscConfig+0x278>)
 80012be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012c0:	4b4e      	ldr	r3, [pc, #312]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fac5 	bl	8000854 <HAL_InitTick>
 80012ca:	4603      	mov	r3, r0
 80012cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d052      	beq.n	800137a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	e327      	b.n	8001928 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d032      	beq.n	8001346 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012e0:	4b43      	ldr	r3, [pc, #268]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a42      	ldr	r2, [pc, #264]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012ec:	f7ff fb9a 	bl	8000a24 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012f4:	f7ff fb96 	bl	8000a24 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e310      	b.n	8001928 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001306:	4b3a      	ldr	r3, [pc, #232]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001312:	4b37      	ldr	r3, [pc, #220]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a36      	ldr	r2, [pc, #216]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001318:	f043 0308 	orr.w	r3, r3, #8
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	4b34      	ldr	r3, [pc, #208]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	4931      	ldr	r1, [pc, #196]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 800132c:	4313      	orrs	r3, r2
 800132e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001330:	4b2f      	ldr	r3, [pc, #188]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	492c      	ldr	r1, [pc, #176]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001340:	4313      	orrs	r3, r2
 8001342:	604b      	str	r3, [r1, #4]
 8001344:	e01a      	b.n	800137c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001346:	4b2a      	ldr	r3, [pc, #168]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a29      	ldr	r2, [pc, #164]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 800134c:	f023 0301 	bic.w	r3, r3, #1
 8001350:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001352:	f7ff fb67 	bl	8000a24 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800135a:	f7ff fb63 	bl	8000a24 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e2dd      	b.n	8001928 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800136c:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1f0      	bne.n	800135a <HAL_RCC_OscConfig+0x1da>
 8001378:	e000      	b.n	800137c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800137a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	2b00      	cmp	r3, #0
 8001386:	d074      	beq.n	8001472 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	2b08      	cmp	r3, #8
 800138c:	d005      	beq.n	800139a <HAL_RCC_OscConfig+0x21a>
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	2b0c      	cmp	r3, #12
 8001392:	d10e      	bne.n	80013b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	2b03      	cmp	r3, #3
 8001398:	d10b      	bne.n	80013b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d064      	beq.n	8001470 <HAL_RCC_OscConfig+0x2f0>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d160      	bne.n	8001470 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e2ba      	b.n	8001928 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ba:	d106      	bne.n	80013ca <HAL_RCC_OscConfig+0x24a>
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0b      	ldr	r2, [pc, #44]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80013c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	e026      	b.n	8001418 <HAL_RCC_OscConfig+0x298>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013d2:	d115      	bne.n	8001400 <HAL_RCC_OscConfig+0x280>
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80013da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a02      	ldr	r2, [pc, #8]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80013e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	e014      	b.n	8001418 <HAL_RCC_OscConfig+0x298>
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000
 80013f4:	08006d68 	.word	0x08006d68
 80013f8:	20000000 	.word	0x20000000
 80013fc:	20000004 	.word	0x20000004
 8001400:	4ba0      	ldr	r3, [pc, #640]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a9f      	ldr	r2, [pc, #636]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	4b9d      	ldr	r3, [pc, #628]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a9c      	ldr	r2, [pc, #624]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d013      	beq.n	8001448 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001420:	f7ff fb00 	bl	8000a24 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001428:	f7ff fafc 	bl	8000a24 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b64      	cmp	r3, #100	; 0x64
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e276      	b.n	8001928 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800143a:	4b92      	ldr	r3, [pc, #584]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f0      	beq.n	8001428 <HAL_RCC_OscConfig+0x2a8>
 8001446:	e014      	b.n	8001472 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001448:	f7ff faec 	bl	8000a24 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001450:	f7ff fae8 	bl	8000a24 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b64      	cmp	r3, #100	; 0x64
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e262      	b.n	8001928 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001462:	4b88      	ldr	r3, [pc, #544]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0x2d0>
 800146e:	e000      	b.n	8001472 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d060      	beq.n	8001540 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	2b04      	cmp	r3, #4
 8001482:	d005      	beq.n	8001490 <HAL_RCC_OscConfig+0x310>
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	2b0c      	cmp	r3, #12
 8001488:	d119      	bne.n	80014be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	2b02      	cmp	r3, #2
 800148e:	d116      	bne.n	80014be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001490:	4b7c      	ldr	r3, [pc, #496]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001498:	2b00      	cmp	r3, #0
 800149a:	d005      	beq.n	80014a8 <HAL_RCC_OscConfig+0x328>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d101      	bne.n	80014a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e23f      	b.n	8001928 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a8:	4b76      	ldr	r3, [pc, #472]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	061b      	lsls	r3, r3, #24
 80014b6:	4973      	ldr	r1, [pc, #460]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014bc:	e040      	b.n	8001540 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d023      	beq.n	800150e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014c6:	4b6f      	ldr	r3, [pc, #444]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a6e      	ldr	r2, [pc, #440]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 80014cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d2:	f7ff faa7 	bl	8000a24 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014da:	f7ff faa3 	bl	8000a24 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e21d      	b.n	8001928 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014ec:	4b65      	ldr	r3, [pc, #404]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0f0      	beq.n	80014da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f8:	4b62      	ldr	r3, [pc, #392]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	061b      	lsls	r3, r3, #24
 8001506:	495f      	ldr	r1, [pc, #380]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]
 800150c:	e018      	b.n	8001540 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800150e:	4b5d      	ldr	r3, [pc, #372]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a5c      	ldr	r2, [pc, #368]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001514:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001518:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151a:	f7ff fa83 	bl	8000a24 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001522:	f7ff fa7f 	bl	8000a24 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e1f9      	b.n	8001928 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001534:	4b53      	ldr	r3, [pc, #332]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1f0      	bne.n	8001522 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0308 	and.w	r3, r3, #8
 8001548:	2b00      	cmp	r3, #0
 800154a:	d03c      	beq.n	80015c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d01c      	beq.n	800158e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001554:	4b4b      	ldr	r3, [pc, #300]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800155a:	4a4a      	ldr	r2, [pc, #296]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001564:	f7ff fa5e 	bl	8000a24 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800156c:	f7ff fa5a 	bl	8000a24 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e1d4      	b.n	8001928 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800157e:	4b41      	ldr	r3, [pc, #260]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001580:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0ef      	beq.n	800156c <HAL_RCC_OscConfig+0x3ec>
 800158c:	e01b      	b.n	80015c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800158e:	4b3d      	ldr	r3, [pc, #244]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001590:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001594:	4a3b      	ldr	r2, [pc, #236]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001596:	f023 0301 	bic.w	r3, r3, #1
 800159a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159e:	f7ff fa41 	bl	8000a24 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a6:	f7ff fa3d 	bl	8000a24 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e1b7      	b.n	8001928 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015b8:	4b32      	ldr	r3, [pc, #200]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 80015ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1ef      	bne.n	80015a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 80a6 	beq.w	8001720 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015d4:	2300      	movs	r3, #0
 80015d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015d8:	4b2a      	ldr	r3, [pc, #168]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 80015da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d10d      	bne.n	8001600 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e4:	4b27      	ldr	r3, [pc, #156]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 80015e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e8:	4a26      	ldr	r2, [pc, #152]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 80015ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ee:	6593      	str	r3, [r2, #88]	; 0x58
 80015f0:	4b24      	ldr	r3, [pc, #144]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 80015f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015fc:	2301      	movs	r3, #1
 80015fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001600:	4b21      	ldr	r3, [pc, #132]	; (8001688 <HAL_RCC_OscConfig+0x508>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001608:	2b00      	cmp	r3, #0
 800160a:	d118      	bne.n	800163e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800160c:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <HAL_RCC_OscConfig+0x508>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a1d      	ldr	r2, [pc, #116]	; (8001688 <HAL_RCC_OscConfig+0x508>)
 8001612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001616:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001618:	f7ff fa04 	bl	8000a24 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001620:	f7ff fa00 	bl	8000a24 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e17a      	b.n	8001928 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_RCC_OscConfig+0x508>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d108      	bne.n	8001658 <HAL_RCC_OscConfig+0x4d8>
 8001646:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800164c:	4a0d      	ldr	r2, [pc, #52]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001656:	e029      	b.n	80016ac <HAL_RCC_OscConfig+0x52c>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2b05      	cmp	r3, #5
 800165e:	d115      	bne.n	800168c <HAL_RCC_OscConfig+0x50c>
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001666:	4a07      	ldr	r2, [pc, #28]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001668:	f043 0304 	orr.w	r3, r3, #4
 800166c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001670:	4b04      	ldr	r3, [pc, #16]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001676:	4a03      	ldr	r2, [pc, #12]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001680:	e014      	b.n	80016ac <HAL_RCC_OscConfig+0x52c>
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000
 8001688:	40007000 	.word	0x40007000
 800168c:	4b9c      	ldr	r3, [pc, #624]	; (8001900 <HAL_RCC_OscConfig+0x780>)
 800168e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001692:	4a9b      	ldr	r2, [pc, #620]	; (8001900 <HAL_RCC_OscConfig+0x780>)
 8001694:	f023 0301 	bic.w	r3, r3, #1
 8001698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800169c:	4b98      	ldr	r3, [pc, #608]	; (8001900 <HAL_RCC_OscConfig+0x780>)
 800169e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a2:	4a97      	ldr	r2, [pc, #604]	; (8001900 <HAL_RCC_OscConfig+0x780>)
 80016a4:	f023 0304 	bic.w	r3, r3, #4
 80016a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d016      	beq.n	80016e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b4:	f7ff f9b6 	bl	8000a24 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ba:	e00a      	b.n	80016d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016bc:	f7ff f9b2 	bl	8000a24 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e12a      	b.n	8001928 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016d2:	4b8b      	ldr	r3, [pc, #556]	; (8001900 <HAL_RCC_OscConfig+0x780>)
 80016d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0ed      	beq.n	80016bc <HAL_RCC_OscConfig+0x53c>
 80016e0:	e015      	b.n	800170e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e2:	f7ff f99f 	bl	8000a24 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016e8:	e00a      	b.n	8001700 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ea:	f7ff f99b 	bl	8000a24 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e113      	b.n	8001928 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001700:	4b7f      	ldr	r3, [pc, #508]	; (8001900 <HAL_RCC_OscConfig+0x780>)
 8001702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1ed      	bne.n	80016ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800170e:	7ffb      	ldrb	r3, [r7, #31]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d105      	bne.n	8001720 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001714:	4b7a      	ldr	r3, [pc, #488]	; (8001900 <HAL_RCC_OscConfig+0x780>)
 8001716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001718:	4a79      	ldr	r2, [pc, #484]	; (8001900 <HAL_RCC_OscConfig+0x780>)
 800171a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800171e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 80fe 	beq.w	8001926 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172e:	2b02      	cmp	r3, #2
 8001730:	f040 80d0 	bne.w	80018d4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001734:	4b72      	ldr	r3, [pc, #456]	; (8001900 <HAL_RCC_OscConfig+0x780>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	f003 0203 	and.w	r2, r3, #3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001744:	429a      	cmp	r2, r3
 8001746:	d130      	bne.n	80017aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	3b01      	subs	r3, #1
 8001754:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001756:	429a      	cmp	r2, r3
 8001758:	d127      	bne.n	80017aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001764:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001766:	429a      	cmp	r2, r3
 8001768:	d11f      	bne.n	80017aa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001774:	2a07      	cmp	r2, #7
 8001776:	bf14      	ite	ne
 8001778:	2201      	movne	r2, #1
 800177a:	2200      	moveq	r2, #0
 800177c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800177e:	4293      	cmp	r3, r2
 8001780:	d113      	bne.n	80017aa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178c:	085b      	lsrs	r3, r3, #1
 800178e:	3b01      	subs	r3, #1
 8001790:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001792:	429a      	cmp	r2, r3
 8001794:	d109      	bne.n	80017aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	085b      	lsrs	r3, r3, #1
 80017a2:	3b01      	subs	r3, #1
 80017a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d06e      	beq.n	8001888 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	2b0c      	cmp	r3, #12
 80017ae:	d069      	beq.n	8001884 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017b0:	4b53      	ldr	r3, [pc, #332]	; (8001900 <HAL_RCC_OscConfig+0x780>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d105      	bne.n	80017c8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017bc:	4b50      	ldr	r3, [pc, #320]	; (8001900 <HAL_RCC_OscConfig+0x780>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e0ad      	b.n	8001928 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017cc:	4b4c      	ldr	r3, [pc, #304]	; (8001900 <HAL_RCC_OscConfig+0x780>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a4b      	ldr	r2, [pc, #300]	; (8001900 <HAL_RCC_OscConfig+0x780>)
 80017d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017d6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017d8:	f7ff f924 	bl	8000a24 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e0:	f7ff f920 	bl	8000a24 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e09a      	b.n	8001928 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017f2:	4b43      	ldr	r3, [pc, #268]	; (8001900 <HAL_RCC_OscConfig+0x780>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017fe:	4b40      	ldr	r3, [pc, #256]	; (8001900 <HAL_RCC_OscConfig+0x780>)
 8001800:	68da      	ldr	r2, [r3, #12]
 8001802:	4b40      	ldr	r3, [pc, #256]	; (8001904 <HAL_RCC_OscConfig+0x784>)
 8001804:	4013      	ands	r3, r2
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800180e:	3a01      	subs	r2, #1
 8001810:	0112      	lsls	r2, r2, #4
 8001812:	4311      	orrs	r1, r2
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001818:	0212      	lsls	r2, r2, #8
 800181a:	4311      	orrs	r1, r2
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001820:	0852      	lsrs	r2, r2, #1
 8001822:	3a01      	subs	r2, #1
 8001824:	0552      	lsls	r2, r2, #21
 8001826:	4311      	orrs	r1, r2
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800182c:	0852      	lsrs	r2, r2, #1
 800182e:	3a01      	subs	r2, #1
 8001830:	0652      	lsls	r2, r2, #25
 8001832:	4311      	orrs	r1, r2
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001838:	0912      	lsrs	r2, r2, #4
 800183a:	0452      	lsls	r2, r2, #17
 800183c:	430a      	orrs	r2, r1
 800183e:	4930      	ldr	r1, [pc, #192]	; (8001900 <HAL_RCC_OscConfig+0x780>)
 8001840:	4313      	orrs	r3, r2
 8001842:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001844:	4b2e      	ldr	r3, [pc, #184]	; (8001900 <HAL_RCC_OscConfig+0x780>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a2d      	ldr	r2, [pc, #180]	; (8001900 <HAL_RCC_OscConfig+0x780>)
 800184a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800184e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001850:	4b2b      	ldr	r3, [pc, #172]	; (8001900 <HAL_RCC_OscConfig+0x780>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	4a2a      	ldr	r2, [pc, #168]	; (8001900 <HAL_RCC_OscConfig+0x780>)
 8001856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800185a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800185c:	f7ff f8e2 	bl	8000a24 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001864:	f7ff f8de 	bl	8000a24 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e058      	b.n	8001928 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001876:	4b22      	ldr	r3, [pc, #136]	; (8001900 <HAL_RCC_OscConfig+0x780>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001882:	e050      	b.n	8001926 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e04f      	b.n	8001928 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001888:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <HAL_RCC_OscConfig+0x780>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d148      	bne.n	8001926 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001894:	4b1a      	ldr	r3, [pc, #104]	; (8001900 <HAL_RCC_OscConfig+0x780>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a19      	ldr	r2, [pc, #100]	; (8001900 <HAL_RCC_OscConfig+0x780>)
 800189a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800189e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018a0:	4b17      	ldr	r3, [pc, #92]	; (8001900 <HAL_RCC_OscConfig+0x780>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	4a16      	ldr	r2, [pc, #88]	; (8001900 <HAL_RCC_OscConfig+0x780>)
 80018a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018ac:	f7ff f8ba 	bl	8000a24 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b4:	f7ff f8b6 	bl	8000a24 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e030      	b.n	8001928 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <HAL_RCC_OscConfig+0x780>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0f0      	beq.n	80018b4 <HAL_RCC_OscConfig+0x734>
 80018d2:	e028      	b.n	8001926 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	2b0c      	cmp	r3, #12
 80018d8:	d023      	beq.n	8001922 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <HAL_RCC_OscConfig+0x780>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a08      	ldr	r2, [pc, #32]	; (8001900 <HAL_RCC_OscConfig+0x780>)
 80018e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e6:	f7ff f89d 	bl	8000a24 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ec:	e00c      	b.n	8001908 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ee:	f7ff f899 	bl	8000a24 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d905      	bls.n	8001908 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e013      	b.n	8001928 <HAL_RCC_OscConfig+0x7a8>
 8001900:	40021000 	.word	0x40021000
 8001904:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <HAL_RCC_OscConfig+0x7b0>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1ec      	bne.n	80018ee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_RCC_OscConfig+0x7b0>)
 8001916:	68da      	ldr	r2, [r3, #12]
 8001918:	4905      	ldr	r1, [pc, #20]	; (8001930 <HAL_RCC_OscConfig+0x7b0>)
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_RCC_OscConfig+0x7b4>)
 800191c:	4013      	ands	r3, r2
 800191e:	60cb      	str	r3, [r1, #12]
 8001920:	e001      	b.n	8001926 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3720      	adds	r7, #32
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40021000 	.word	0x40021000
 8001934:	feeefffc 	.word	0xfeeefffc

08001938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e0e7      	b.n	8001b1c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800194c:	4b75      	ldr	r3, [pc, #468]	; (8001b24 <HAL_RCC_ClockConfig+0x1ec>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d910      	bls.n	800197c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195a:	4b72      	ldr	r3, [pc, #456]	; (8001b24 <HAL_RCC_ClockConfig+0x1ec>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f023 0207 	bic.w	r2, r3, #7
 8001962:	4970      	ldr	r1, [pc, #448]	; (8001b24 <HAL_RCC_ClockConfig+0x1ec>)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	4313      	orrs	r3, r2
 8001968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800196a:	4b6e      	ldr	r3, [pc, #440]	; (8001b24 <HAL_RCC_ClockConfig+0x1ec>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	429a      	cmp	r2, r3
 8001976:	d001      	beq.n	800197c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e0cf      	b.n	8001b1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d010      	beq.n	80019aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	4b66      	ldr	r3, [pc, #408]	; (8001b28 <HAL_RCC_ClockConfig+0x1f0>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001994:	429a      	cmp	r2, r3
 8001996:	d908      	bls.n	80019aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001998:	4b63      	ldr	r3, [pc, #396]	; (8001b28 <HAL_RCC_ClockConfig+0x1f0>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4960      	ldr	r1, [pc, #384]	; (8001b28 <HAL_RCC_ClockConfig+0x1f0>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d04c      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b03      	cmp	r3, #3
 80019bc:	d107      	bne.n	80019ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019be:	4b5a      	ldr	r3, [pc, #360]	; (8001b28 <HAL_RCC_ClockConfig+0x1f0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d121      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e0a6      	b.n	8001b1c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d107      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019d6:	4b54      	ldr	r3, [pc, #336]	; (8001b28 <HAL_RCC_ClockConfig+0x1f0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d115      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e09a      	b.n	8001b1c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d107      	bne.n	80019fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019ee:	4b4e      	ldr	r3, [pc, #312]	; (8001b28 <HAL_RCC_ClockConfig+0x1f0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d109      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e08e      	b.n	8001b1c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019fe:	4b4a      	ldr	r3, [pc, #296]	; (8001b28 <HAL_RCC_ClockConfig+0x1f0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e086      	b.n	8001b1c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a0e:	4b46      	ldr	r3, [pc, #280]	; (8001b28 <HAL_RCC_ClockConfig+0x1f0>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f023 0203 	bic.w	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	4943      	ldr	r1, [pc, #268]	; (8001b28 <HAL_RCC_ClockConfig+0x1f0>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a20:	f7ff f800 	bl	8000a24 <HAL_GetTick>
 8001a24:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a26:	e00a      	b.n	8001a3e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a28:	f7fe fffc 	bl	8000a24 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e06e      	b.n	8001b1c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3e:	4b3a      	ldr	r3, [pc, #232]	; (8001b28 <HAL_RCC_ClockConfig+0x1f0>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 020c 	and.w	r2, r3, #12
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d1eb      	bne.n	8001a28 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d010      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	4b31      	ldr	r3, [pc, #196]	; (8001b28 <HAL_RCC_ClockConfig+0x1f0>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d208      	bcs.n	8001a7e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a6c:	4b2e      	ldr	r3, [pc, #184]	; (8001b28 <HAL_RCC_ClockConfig+0x1f0>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	492b      	ldr	r1, [pc, #172]	; (8001b28 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a7e:	4b29      	ldr	r3, [pc, #164]	; (8001b24 <HAL_RCC_ClockConfig+0x1ec>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d210      	bcs.n	8001aae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8c:	4b25      	ldr	r3, [pc, #148]	; (8001b24 <HAL_RCC_ClockConfig+0x1ec>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f023 0207 	bic.w	r2, r3, #7
 8001a94:	4923      	ldr	r1, [pc, #140]	; (8001b24 <HAL_RCC_ClockConfig+0x1ec>)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9c:	4b21      	ldr	r3, [pc, #132]	; (8001b24 <HAL_RCC_ClockConfig+0x1ec>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d001      	beq.n	8001aae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e036      	b.n	8001b1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d008      	beq.n	8001acc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aba:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <HAL_RCC_ClockConfig+0x1f0>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	4918      	ldr	r1, [pc, #96]	; (8001b28 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d009      	beq.n	8001aec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ad8:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <HAL_RCC_ClockConfig+0x1f0>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	4910      	ldr	r1, [pc, #64]	; (8001b28 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001aec:	f000 f824 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 8001af0:	4602      	mov	r2, r0
 8001af2:	4b0d      	ldr	r3, [pc, #52]	; (8001b28 <HAL_RCC_ClockConfig+0x1f0>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	091b      	lsrs	r3, r3, #4
 8001af8:	f003 030f 	and.w	r3, r3, #15
 8001afc:	490b      	ldr	r1, [pc, #44]	; (8001b2c <HAL_RCC_ClockConfig+0x1f4>)
 8001afe:	5ccb      	ldrb	r3, [r1, r3]
 8001b00:	f003 031f 	and.w	r3, r3, #31
 8001b04:	fa22 f303 	lsr.w	r3, r2, r3
 8001b08:	4a09      	ldr	r2, [pc, #36]	; (8001b30 <HAL_RCC_ClockConfig+0x1f8>)
 8001b0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <HAL_RCC_ClockConfig+0x1fc>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7fe fe9f 	bl	8000854 <HAL_InitTick>
 8001b16:	4603      	mov	r3, r0
 8001b18:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b1a:	7afb      	ldrb	r3, [r7, #11]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40022000 	.word	0x40022000
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	08006d68 	.word	0x08006d68
 8001b30:	20000000 	.word	0x20000000
 8001b34:	20000004 	.word	0x20000004

08001b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b089      	sub	sp, #36	; 0x24
 8001b3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
 8001b42:	2300      	movs	r3, #0
 8001b44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b46:	4b3e      	ldr	r3, [pc, #248]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
 8001b4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b50:	4b3b      	ldr	r3, [pc, #236]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <HAL_RCC_GetSysClockFreq+0x34>
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	2b0c      	cmp	r3, #12
 8001b64:	d121      	bne.n	8001baa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d11e      	bne.n	8001baa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b6c:	4b34      	ldr	r3, [pc, #208]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0308 	and.w	r3, r3, #8
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d107      	bne.n	8001b88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b78:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b7e:	0a1b      	lsrs	r3, r3, #8
 8001b80:	f003 030f 	and.w	r3, r3, #15
 8001b84:	61fb      	str	r3, [r7, #28]
 8001b86:	e005      	b.n	8001b94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b88:	4b2d      	ldr	r3, [pc, #180]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b94:	4a2b      	ldr	r2, [pc, #172]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10d      	bne.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ba8:	e00a      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d102      	bne.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bb0:	4b25      	ldr	r3, [pc, #148]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bb2:	61bb      	str	r3, [r7, #24]
 8001bb4:	e004      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d101      	bne.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bbc:	4b23      	ldr	r3, [pc, #140]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x114>)
 8001bbe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	2b0c      	cmp	r3, #12
 8001bc4:	d134      	bne.n	8001c30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d003      	beq.n	8001bde <HAL_RCC_GetSysClockFreq+0xa6>
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b03      	cmp	r3, #3
 8001bda:	d003      	beq.n	8001be4 <HAL_RCC_GetSysClockFreq+0xac>
 8001bdc:	e005      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bde:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x110>)
 8001be0:	617b      	str	r3, [r7, #20]
      break;
 8001be2:	e005      	b.n	8001bf0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001be4:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x114>)
 8001be6:	617b      	str	r3, [r7, #20]
      break;
 8001be8:	e002      	b.n	8001bf0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	617b      	str	r3, [r7, #20]
      break;
 8001bee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bf0:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	091b      	lsrs	r3, r3, #4
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	0a1b      	lsrs	r3, r3, #8
 8001c04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	fb03 f202 	mul.w	r2, r3, r2
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	0e5b      	lsrs	r3, r3, #25
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	3301      	adds	r3, #1
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c30:	69bb      	ldr	r3, [r7, #24]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3724      	adds	r7, #36	; 0x24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000
 8001c44:	08006d80 	.word	0x08006d80
 8001c48:	00f42400 	.word	0x00f42400
 8001c4c:	007a1200 	.word	0x007a1200

08001c50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	20000000 	.word	0x20000000

08001c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c6c:	f7ff fff0 	bl	8001c50 <HAL_RCC_GetHCLKFreq>
 8001c70:	4602      	mov	r2, r0
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	0a1b      	lsrs	r3, r3, #8
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	4904      	ldr	r1, [pc, #16]	; (8001c90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c7e:	5ccb      	ldrb	r3, [r1, r3]
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	08006d78 	.word	0x08006d78

08001c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c98:	f7ff ffda 	bl	8001c50 <HAL_RCC_GetHCLKFreq>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	0adb      	lsrs	r3, r3, #11
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	4904      	ldr	r1, [pc, #16]	; (8001cbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001caa:	5ccb      	ldrb	r3, [r1, r3]
 8001cac:	f003 031f 	and.w	r3, r3, #31
 8001cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	08006d78 	.word	0x08006d78

08001cc0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	220f      	movs	r2, #15
 8001cce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <HAL_RCC_GetClockConfig+0x5c>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 0203 	and.w	r2, r3, #3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001cdc:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <HAL_RCC_GetClockConfig+0x5c>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <HAL_RCC_GetClockConfig+0x5c>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_RCC_GetClockConfig+0x5c>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	08db      	lsrs	r3, r3, #3
 8001cfa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001d02:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <HAL_RCC_GetClockConfig+0x60>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0207 	and.w	r2, r3, #7
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	601a      	str	r2, [r3, #0]
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40022000 	.word	0x40022000

08001d24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d30:	4b2a      	ldr	r3, [pc, #168]	; (8001ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d3c:	f7ff f9bc 	bl	80010b8 <HAL_PWREx_GetVoltageRange>
 8001d40:	6178      	str	r0, [r7, #20]
 8001d42:	e014      	b.n	8001d6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d44:	4b25      	ldr	r3, [pc, #148]	; (8001ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d48:	4a24      	ldr	r2, [pc, #144]	; (8001ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d50:	4b22      	ldr	r3, [pc, #136]	; (8001ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d5c:	f7ff f9ac 	bl	80010b8 <HAL_PWREx_GetVoltageRange>
 8001d60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d62:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d66:	4a1d      	ldr	r2, [pc, #116]	; (8001ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d74:	d10b      	bne.n	8001d8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b80      	cmp	r3, #128	; 0x80
 8001d7a:	d919      	bls.n	8001db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2ba0      	cmp	r3, #160	; 0xa0
 8001d80:	d902      	bls.n	8001d88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d82:	2302      	movs	r3, #2
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	e013      	b.n	8001db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d88:	2301      	movs	r3, #1
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	e010      	b.n	8001db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b80      	cmp	r3, #128	; 0x80
 8001d92:	d902      	bls.n	8001d9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d94:	2303      	movs	r3, #3
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	e00a      	b.n	8001db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b80      	cmp	r3, #128	; 0x80
 8001d9e:	d102      	bne.n	8001da6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001da0:	2302      	movs	r3, #2
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	e004      	b.n	8001db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b70      	cmp	r3, #112	; 0x70
 8001daa:	d101      	bne.n	8001db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dac:	2301      	movs	r3, #1
 8001dae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001db0:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f023 0207 	bic.w	r2, r3, #7
 8001db8:	4909      	ldr	r1, [pc, #36]	; (8001de0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001dc0:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d001      	beq.n	8001dd2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40022000 	.word	0x40022000

08001de4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001dec:	2300      	movs	r3, #0
 8001dee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001df0:	2300      	movs	r3, #0
 8001df2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d041      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e04:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e08:	d02a      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e0e:	d824      	bhi.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e14:	d008      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e1a:	d81e      	bhi.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00a      	beq.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e24:	d010      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e26:	e018      	b.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e28:	4b86      	ldr	r3, [pc, #536]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	4a85      	ldr	r2, [pc, #532]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e32:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e34:	e015      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3304      	adds	r3, #4
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f000 fabb 	bl	80023b8 <RCCEx_PLLSAI1_Config>
 8001e42:	4603      	mov	r3, r0
 8001e44:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e46:	e00c      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3320      	adds	r3, #32
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 fba6 	bl	80025a0 <RCCEx_PLLSAI2_Config>
 8001e54:	4603      	mov	r3, r0
 8001e56:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e58:	e003      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	74fb      	strb	r3, [r7, #19]
      break;
 8001e5e:	e000      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e62:	7cfb      	ldrb	r3, [r7, #19]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10b      	bne.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e68:	4b76      	ldr	r3, [pc, #472]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e76:	4973      	ldr	r1, [pc, #460]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e7e:	e001      	b.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e80:	7cfb      	ldrb	r3, [r7, #19]
 8001e82:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d041      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e94:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e98:	d02a      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e9a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e9e:	d824      	bhi.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ea0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ea4:	d008      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ea6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001eaa:	d81e      	bhi.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00a      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb4:	d010      	beq.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001eb6:	e018      	b.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001eb8:	4b62      	ldr	r3, [pc, #392]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4a61      	ldr	r2, [pc, #388]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ec4:	e015      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3304      	adds	r3, #4
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 fa73 	bl	80023b8 <RCCEx_PLLSAI1_Config>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ed6:	e00c      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3320      	adds	r3, #32
 8001edc:	2100      	movs	r1, #0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 fb5e 	bl	80025a0 <RCCEx_PLLSAI2_Config>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ee8:	e003      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	74fb      	strb	r3, [r7, #19]
      break;
 8001eee:	e000      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001ef0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ef2:	7cfb      	ldrb	r3, [r7, #19]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10b      	bne.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ef8:	4b52      	ldr	r3, [pc, #328]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001efe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f06:	494f      	ldr	r1, [pc, #316]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f0e:	e001      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f10:	7cfb      	ldrb	r3, [r7, #19]
 8001f12:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 80a0 	beq.w	8002062 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f22:	2300      	movs	r3, #0
 8001f24:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f26:	4b47      	ldr	r3, [pc, #284]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f36:	2300      	movs	r3, #0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00d      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f3c:	4b41      	ldr	r3, [pc, #260]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f40:	4a40      	ldr	r2, [pc, #256]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f46:	6593      	str	r3, [r2, #88]	; 0x58
 8001f48:	4b3e      	ldr	r3, [pc, #248]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f54:	2301      	movs	r3, #1
 8001f56:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f58:	4b3b      	ldr	r3, [pc, #236]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a3a      	ldr	r2, [pc, #232]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f64:	f7fe fd5e 	bl	8000a24 <HAL_GetTick>
 8001f68:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f6a:	e009      	b.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f6c:	f7fe fd5a 	bl	8000a24 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d902      	bls.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	74fb      	strb	r3, [r7, #19]
        break;
 8001f7e:	e005      	b.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f80:	4b31      	ldr	r3, [pc, #196]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0ef      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f8c:	7cfb      	ldrb	r3, [r7, #19]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d15c      	bne.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f92:	4b2c      	ldr	r3, [pc, #176]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f9c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d01f      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d019      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fb0:	4b24      	ldr	r3, [pc, #144]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fbc:	4b21      	ldr	r3, [pc, #132]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc2:	4a20      	ldr	r2, [pc, #128]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fcc:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd2:	4a1c      	ldr	r2, [pc, #112]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fdc:	4a19      	ldr	r2, [pc, #100]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d016      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fee:	f7fe fd19 	bl	8000a24 <HAL_GetTick>
 8001ff2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff4:	e00b      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff6:	f7fe fd15 	bl	8000a24 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	f241 3288 	movw	r2, #5000	; 0x1388
 8002004:	4293      	cmp	r3, r2
 8002006:	d902      	bls.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	74fb      	strb	r3, [r7, #19]
            break;
 800200c:	e006      	b.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800200e:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0ec      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800201c:	7cfb      	ldrb	r3, [r7, #19]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10c      	bne.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002022:	4b08      	ldr	r3, [pc, #32]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002028:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002032:	4904      	ldr	r1, [pc, #16]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800203a:	e009      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800203c:	7cfb      	ldrb	r3, [r7, #19]
 800203e:	74bb      	strb	r3, [r7, #18]
 8002040:	e006      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002042:	bf00      	nop
 8002044:	40021000 	.word	0x40021000
 8002048:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800204c:	7cfb      	ldrb	r3, [r7, #19]
 800204e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002050:	7c7b      	ldrb	r3, [r7, #17]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d105      	bne.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002056:	4b9e      	ldr	r3, [pc, #632]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205a:	4a9d      	ldr	r2, [pc, #628]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800205c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002060:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00a      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800206e:	4b98      	ldr	r3, [pc, #608]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002074:	f023 0203 	bic.w	r2, r3, #3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207c:	4994      	ldr	r1, [pc, #592]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800207e:	4313      	orrs	r3, r2
 8002080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00a      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002090:	4b8f      	ldr	r3, [pc, #572]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002096:	f023 020c 	bic.w	r2, r3, #12
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800209e:	498c      	ldr	r1, [pc, #560]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00a      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020b2:	4b87      	ldr	r3, [pc, #540]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	4983      	ldr	r1, [pc, #524]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00a      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020d4:	4b7e      	ldr	r3, [pc, #504]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	497b      	ldr	r1, [pc, #492]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00a      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020f6:	4b76      	ldr	r3, [pc, #472]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002104:	4972      	ldr	r1, [pc, #456]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002106:	4313      	orrs	r3, r2
 8002108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00a      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002118:	4b6d      	ldr	r3, [pc, #436]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002126:	496a      	ldr	r1, [pc, #424]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002128:	4313      	orrs	r3, r2
 800212a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00a      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800213a:	4b65      	ldr	r3, [pc, #404]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002140:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002148:	4961      	ldr	r1, [pc, #388]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214a:	4313      	orrs	r3, r2
 800214c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00a      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800215c:	4b5c      	ldr	r3, [pc, #368]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002162:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800216a:	4959      	ldr	r1, [pc, #356]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800217e:	4b54      	ldr	r3, [pc, #336]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002184:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800218c:	4950      	ldr	r1, [pc, #320]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218e:	4313      	orrs	r3, r2
 8002190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00a      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021a0:	4b4b      	ldr	r3, [pc, #300]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ae:	4948      	ldr	r1, [pc, #288]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00a      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021c2:	4b43      	ldr	r3, [pc, #268]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d0:	493f      	ldr	r1, [pc, #252]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d028      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021e4:	4b3a      	ldr	r3, [pc, #232]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021f2:	4937      	ldr	r1, [pc, #220]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002202:	d106      	bne.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002204:	4b32      	ldr	r3, [pc, #200]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4a31      	ldr	r2, [pc, #196]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800220e:	60d3      	str	r3, [r2, #12]
 8002210:	e011      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002216:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800221a:	d10c      	bne.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3304      	adds	r3, #4
 8002220:	2101      	movs	r1, #1
 8002222:	4618      	mov	r0, r3
 8002224:	f000 f8c8 	bl	80023b8 <RCCEx_PLLSAI1_Config>
 8002228:	4603      	mov	r3, r0
 800222a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800222c:	7cfb      	ldrb	r3, [r7, #19]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002232:	7cfb      	ldrb	r3, [r7, #19]
 8002234:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d028      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002242:	4b23      	ldr	r3, [pc, #140]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002248:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002250:	491f      	ldr	r1, [pc, #124]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002260:	d106      	bne.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002262:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	4a1a      	ldr	r2, [pc, #104]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002268:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800226c:	60d3      	str	r3, [r2, #12]
 800226e:	e011      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002274:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002278:	d10c      	bne.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3304      	adds	r3, #4
 800227e:	2101      	movs	r1, #1
 8002280:	4618      	mov	r0, r3
 8002282:	f000 f899 	bl	80023b8 <RCCEx_PLLSAI1_Config>
 8002286:	4603      	mov	r3, r0
 8002288:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800228a:	7cfb      	ldrb	r3, [r7, #19]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002290:	7cfb      	ldrb	r3, [r7, #19]
 8002292:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d02b      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ae:	4908      	ldr	r1, [pc, #32]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022be:	d109      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022c0:	4b03      	ldr	r3, [pc, #12]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	4a02      	ldr	r2, [pc, #8]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022ca:	60d3      	str	r3, [r2, #12]
 80022cc:	e014      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022dc:	d10c      	bne.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	3304      	adds	r3, #4
 80022e2:	2101      	movs	r1, #1
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 f867 	bl	80023b8 <RCCEx_PLLSAI1_Config>
 80022ea:	4603      	mov	r3, r0
 80022ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022ee:	7cfb      	ldrb	r3, [r7, #19]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80022f4:	7cfb      	ldrb	r3, [r7, #19]
 80022f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d02f      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002304:	4b2b      	ldr	r3, [pc, #172]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002312:	4928      	ldr	r1, [pc, #160]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800231e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002322:	d10d      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3304      	adds	r3, #4
 8002328:	2102      	movs	r1, #2
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f844 	bl	80023b8 <RCCEx_PLLSAI1_Config>
 8002330:	4603      	mov	r3, r0
 8002332:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002334:	7cfb      	ldrb	r3, [r7, #19]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d014      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800233a:	7cfb      	ldrb	r3, [r7, #19]
 800233c:	74bb      	strb	r3, [r7, #18]
 800233e:	e011      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002348:	d10c      	bne.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3320      	adds	r3, #32
 800234e:	2102      	movs	r1, #2
 8002350:	4618      	mov	r0, r3
 8002352:	f000 f925 	bl	80025a0 <RCCEx_PLLSAI2_Config>
 8002356:	4603      	mov	r3, r0
 8002358:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800235a:	7cfb      	ldrb	r3, [r7, #19]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002360:	7cfb      	ldrb	r3, [r7, #19]
 8002362:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00a      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002370:	4b10      	ldr	r3, [pc, #64]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002376:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800237e:	490d      	ldr	r1, [pc, #52]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002380:	4313      	orrs	r3, r2
 8002382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00b      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002392:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002398:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023a2:	4904      	ldr	r1, [pc, #16]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40021000 	.word	0x40021000

080023b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023c2:	2300      	movs	r3, #0
 80023c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023c6:	4b75      	ldr	r3, [pc, #468]	; (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d018      	beq.n	8002404 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80023d2:	4b72      	ldr	r3, [pc, #456]	; (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f003 0203 	and.w	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d10d      	bne.n	80023fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
       ||
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d009      	beq.n	80023fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023ea:	4b6c      	ldr	r3, [pc, #432]	; (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	091b      	lsrs	r3, r3, #4
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
       ||
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d047      	beq.n	800248e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
 8002402:	e044      	b.n	800248e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b03      	cmp	r3, #3
 800240a:	d018      	beq.n	800243e <RCCEx_PLLSAI1_Config+0x86>
 800240c:	2b03      	cmp	r3, #3
 800240e:	d825      	bhi.n	800245c <RCCEx_PLLSAI1_Config+0xa4>
 8002410:	2b01      	cmp	r3, #1
 8002412:	d002      	beq.n	800241a <RCCEx_PLLSAI1_Config+0x62>
 8002414:	2b02      	cmp	r3, #2
 8002416:	d009      	beq.n	800242c <RCCEx_PLLSAI1_Config+0x74>
 8002418:	e020      	b.n	800245c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800241a:	4b60      	ldr	r3, [pc, #384]	; (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d11d      	bne.n	8002462 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800242a:	e01a      	b.n	8002462 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800242c:	4b5b      	ldr	r3, [pc, #364]	; (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002434:	2b00      	cmp	r3, #0
 8002436:	d116      	bne.n	8002466 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800243c:	e013      	b.n	8002466 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800243e:	4b57      	ldr	r3, [pc, #348]	; (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10f      	bne.n	800246a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800244a:	4b54      	ldr	r3, [pc, #336]	; (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d109      	bne.n	800246a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800245a:	e006      	b.n	800246a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
      break;
 8002460:	e004      	b.n	800246c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002462:	bf00      	nop
 8002464:	e002      	b.n	800246c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002466:	bf00      	nop
 8002468:	e000      	b.n	800246c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800246a:	bf00      	nop
    }

    if(status == HAL_OK)
 800246c:	7bfb      	ldrb	r3, [r7, #15]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10d      	bne.n	800248e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002472:	4b4a      	ldr	r3, [pc, #296]	; (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6819      	ldr	r1, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	3b01      	subs	r3, #1
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	430b      	orrs	r3, r1
 8002488:	4944      	ldr	r1, [pc, #272]	; (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 800248a:	4313      	orrs	r3, r2
 800248c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d17d      	bne.n	8002590 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002494:	4b41      	ldr	r3, [pc, #260]	; (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a40      	ldr	r2, [pc, #256]	; (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 800249a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800249e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024a0:	f7fe fac0 	bl	8000a24 <HAL_GetTick>
 80024a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024a6:	e009      	b.n	80024bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024a8:	f7fe fabc 	bl	8000a24 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d902      	bls.n	80024bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	73fb      	strb	r3, [r7, #15]
        break;
 80024ba:	e005      	b.n	80024c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024bc:	4b37      	ldr	r3, [pc, #220]	; (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1ef      	bne.n	80024a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d160      	bne.n	8002590 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d111      	bne.n	80024f8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024d4:	4b31      	ldr	r3, [pc, #196]	; (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80024dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6892      	ldr	r2, [r2, #8]
 80024e4:	0211      	lsls	r1, r2, #8
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68d2      	ldr	r2, [r2, #12]
 80024ea:	0912      	lsrs	r2, r2, #4
 80024ec:	0452      	lsls	r2, r2, #17
 80024ee:	430a      	orrs	r2, r1
 80024f0:	492a      	ldr	r1, [pc, #168]	; (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	610b      	str	r3, [r1, #16]
 80024f6:	e027      	b.n	8002548 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d112      	bne.n	8002524 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024fe:	4b27      	ldr	r3, [pc, #156]	; (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002506:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6892      	ldr	r2, [r2, #8]
 800250e:	0211      	lsls	r1, r2, #8
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6912      	ldr	r2, [r2, #16]
 8002514:	0852      	lsrs	r2, r2, #1
 8002516:	3a01      	subs	r2, #1
 8002518:	0552      	lsls	r2, r2, #21
 800251a:	430a      	orrs	r2, r1
 800251c:	491f      	ldr	r1, [pc, #124]	; (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 800251e:	4313      	orrs	r3, r2
 8002520:	610b      	str	r3, [r1, #16]
 8002522:	e011      	b.n	8002548 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002524:	4b1d      	ldr	r3, [pc, #116]	; (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800252c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6892      	ldr	r2, [r2, #8]
 8002534:	0211      	lsls	r1, r2, #8
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6952      	ldr	r2, [r2, #20]
 800253a:	0852      	lsrs	r2, r2, #1
 800253c:	3a01      	subs	r2, #1
 800253e:	0652      	lsls	r2, r2, #25
 8002540:	430a      	orrs	r2, r1
 8002542:	4916      	ldr	r1, [pc, #88]	; (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002544:	4313      	orrs	r3, r2
 8002546:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002548:	4b14      	ldr	r3, [pc, #80]	; (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a13      	ldr	r2, [pc, #76]	; (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 800254e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002552:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002554:	f7fe fa66 	bl	8000a24 <HAL_GetTick>
 8002558:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800255a:	e009      	b.n	8002570 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800255c:	f7fe fa62 	bl	8000a24 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d902      	bls.n	8002570 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	73fb      	strb	r3, [r7, #15]
          break;
 800256e:	e005      	b.n	800257c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002570:	4b0a      	ldr	r3, [pc, #40]	; (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0ef      	beq.n	800255c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800257c:	7bfb      	ldrb	r3, [r7, #15]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002582:	4b06      	ldr	r3, [pc, #24]	; (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	4904      	ldr	r1, [pc, #16]	; (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 800258c:	4313      	orrs	r3, r2
 800258e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002590:	7bfb      	ldrb	r3, [r7, #15]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000

080025a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025ae:	4b6a      	ldr	r3, [pc, #424]	; (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d018      	beq.n	80025ec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80025ba:	4b67      	ldr	r3, [pc, #412]	; (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	f003 0203 	and.w	r2, r3, #3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d10d      	bne.n	80025e6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
       ||
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d009      	beq.n	80025e6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80025d2:	4b61      	ldr	r3, [pc, #388]	; (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	091b      	lsrs	r3, r3, #4
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	1c5a      	adds	r2, r3, #1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
       ||
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d047      	beq.n	8002676 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
 80025ea:	e044      	b.n	8002676 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d018      	beq.n	8002626 <RCCEx_PLLSAI2_Config+0x86>
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d825      	bhi.n	8002644 <RCCEx_PLLSAI2_Config+0xa4>
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d002      	beq.n	8002602 <RCCEx_PLLSAI2_Config+0x62>
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d009      	beq.n	8002614 <RCCEx_PLLSAI2_Config+0x74>
 8002600:	e020      	b.n	8002644 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002602:	4b55      	ldr	r3, [pc, #340]	; (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d11d      	bne.n	800264a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002612:	e01a      	b.n	800264a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002614:	4b50      	ldr	r3, [pc, #320]	; (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800261c:	2b00      	cmp	r3, #0
 800261e:	d116      	bne.n	800264e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002624:	e013      	b.n	800264e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002626:	4b4c      	ldr	r3, [pc, #304]	; (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10f      	bne.n	8002652 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002632:	4b49      	ldr	r3, [pc, #292]	; (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d109      	bne.n	8002652 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002642:	e006      	b.n	8002652 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	73fb      	strb	r3, [r7, #15]
      break;
 8002648:	e004      	b.n	8002654 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800264a:	bf00      	nop
 800264c:	e002      	b.n	8002654 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800264e:	bf00      	nop
 8002650:	e000      	b.n	8002654 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002652:	bf00      	nop
    }

    if(status == HAL_OK)
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10d      	bne.n	8002676 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800265a:	4b3f      	ldr	r3, [pc, #252]	; (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6819      	ldr	r1, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	3b01      	subs	r3, #1
 800266c:	011b      	lsls	r3, r3, #4
 800266e:	430b      	orrs	r3, r1
 8002670:	4939      	ldr	r1, [pc, #228]	; (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002672:	4313      	orrs	r3, r2
 8002674:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d167      	bne.n	800274c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800267c:	4b36      	ldr	r3, [pc, #216]	; (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a35      	ldr	r2, [pc, #212]	; (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002686:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002688:	f7fe f9cc 	bl	8000a24 <HAL_GetTick>
 800268c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800268e:	e009      	b.n	80026a4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002690:	f7fe f9c8 	bl	8000a24 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d902      	bls.n	80026a4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	73fb      	strb	r3, [r7, #15]
        break;
 80026a2:	e005      	b.n	80026b0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026a4:	4b2c      	ldr	r3, [pc, #176]	; (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1ef      	bne.n	8002690 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d14a      	bne.n	800274c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d111      	bne.n	80026e0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026bc:	4b26      	ldr	r3, [pc, #152]	; (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80026c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6892      	ldr	r2, [r2, #8]
 80026cc:	0211      	lsls	r1, r2, #8
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	68d2      	ldr	r2, [r2, #12]
 80026d2:	0912      	lsrs	r2, r2, #4
 80026d4:	0452      	lsls	r2, r2, #17
 80026d6:	430a      	orrs	r2, r1
 80026d8:	491f      	ldr	r1, [pc, #124]	; (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	614b      	str	r3, [r1, #20]
 80026de:	e011      	b.n	8002704 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026e0:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6892      	ldr	r2, [r2, #8]
 80026f0:	0211      	lsls	r1, r2, #8
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6912      	ldr	r2, [r2, #16]
 80026f6:	0852      	lsrs	r2, r2, #1
 80026f8:	3a01      	subs	r2, #1
 80026fa:	0652      	lsls	r2, r2, #25
 80026fc:	430a      	orrs	r2, r1
 80026fe:	4916      	ldr	r1, [pc, #88]	; (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002700:	4313      	orrs	r3, r2
 8002702:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002704:	4b14      	ldr	r3, [pc, #80]	; (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a13      	ldr	r2, [pc, #76]	; (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 800270a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800270e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002710:	f7fe f988 	bl	8000a24 <HAL_GetTick>
 8002714:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002716:	e009      	b.n	800272c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002718:	f7fe f984 	bl	8000a24 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d902      	bls.n	800272c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	73fb      	strb	r3, [r7, #15]
          break;
 800272a:	e005      	b.n	8002738 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800272c:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0ef      	beq.n	8002718 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002740:	695a      	ldr	r2, [r3, #20]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	4904      	ldr	r1, [pc, #16]	; (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002748:	4313      	orrs	r3, r2
 800274a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800274c:	7bfb      	ldrb	r3, [r7, #15]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000

0800275c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e049      	b.n	8002802 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d106      	bne.n	8002788 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f841 	bl	800280a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3304      	adds	r3, #4
 8002798:	4619      	mov	r1, r3
 800279a:	4610      	mov	r0, r2
 800279c:	f000 f9f8 	bl	8002b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
	...

08002820 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d001      	beq.n	8002838 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e04f      	b.n	80028d8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68da      	ldr	r2, [r3, #12]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0201 	orr.w	r2, r2, #1
 800284e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a23      	ldr	r2, [pc, #140]	; (80028e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d01d      	beq.n	8002896 <HAL_TIM_Base_Start_IT+0x76>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002862:	d018      	beq.n	8002896 <HAL_TIM_Base_Start_IT+0x76>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a1f      	ldr	r2, [pc, #124]	; (80028e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d013      	beq.n	8002896 <HAL_TIM_Base_Start_IT+0x76>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a1e      	ldr	r2, [pc, #120]	; (80028ec <HAL_TIM_Base_Start_IT+0xcc>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d00e      	beq.n	8002896 <HAL_TIM_Base_Start_IT+0x76>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a1c      	ldr	r2, [pc, #112]	; (80028f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d009      	beq.n	8002896 <HAL_TIM_Base_Start_IT+0x76>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a1b      	ldr	r2, [pc, #108]	; (80028f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d004      	beq.n	8002896 <HAL_TIM_Base_Start_IT+0x76>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a19      	ldr	r2, [pc, #100]	; (80028f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d115      	bne.n	80028c2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	4b17      	ldr	r3, [pc, #92]	; (80028fc <HAL_TIM_Base_Start_IT+0xdc>)
 800289e:	4013      	ands	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2b06      	cmp	r3, #6
 80028a6:	d015      	beq.n	80028d4 <HAL_TIM_Base_Start_IT+0xb4>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ae:	d011      	beq.n	80028d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0201 	orr.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028c0:	e008      	b.n	80028d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f042 0201 	orr.w	r2, r2, #1
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	e000      	b.n	80028d6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	40012c00 	.word	0x40012c00
 80028e8:	40000400 	.word	0x40000400
 80028ec:	40000800 	.word	0x40000800
 80028f0:	40000c00 	.word	0x40000c00
 80028f4:	40013400 	.word	0x40013400
 80028f8:	40014000 	.word	0x40014000
 80028fc:	00010007 	.word	0x00010007

08002900 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b02      	cmp	r3, #2
 8002914:	d122      	bne.n	800295c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b02      	cmp	r3, #2
 8002922:	d11b      	bne.n	800295c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0202 	mvn.w	r2, #2
 800292c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f905 	bl	8002b52 <HAL_TIM_IC_CaptureCallback>
 8002948:	e005      	b.n	8002956 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f8f7 	bl	8002b3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f908 	bl	8002b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	2b04      	cmp	r3, #4
 8002968:	d122      	bne.n	80029b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b04      	cmp	r3, #4
 8002976:	d11b      	bne.n	80029b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f06f 0204 	mvn.w	r2, #4
 8002980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2202      	movs	r2, #2
 8002986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f8db 	bl	8002b52 <HAL_TIM_IC_CaptureCallback>
 800299c:	e005      	b.n	80029aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f8cd 	bl	8002b3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f8de 	bl	8002b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b08      	cmp	r3, #8
 80029bc:	d122      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d11b      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f06f 0208 	mvn.w	r2, #8
 80029d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2204      	movs	r2, #4
 80029da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f8b1 	bl	8002b52 <HAL_TIM_IC_CaptureCallback>
 80029f0:	e005      	b.n	80029fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f8a3 	bl	8002b3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f8b4 	bl	8002b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b10      	cmp	r3, #16
 8002a10:	d122      	bne.n	8002a58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f003 0310 	and.w	r3, r3, #16
 8002a1c:	2b10      	cmp	r3, #16
 8002a1e:	d11b      	bne.n	8002a58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0210 	mvn.w	r2, #16
 8002a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2208      	movs	r2, #8
 8002a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f887 	bl	8002b52 <HAL_TIM_IC_CaptureCallback>
 8002a44:	e005      	b.n	8002a52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f879 	bl	8002b3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f88a 	bl	8002b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d10e      	bne.n	8002a84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d107      	bne.n	8002a84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f06f 0201 	mvn.w	r2, #1
 8002a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7fd fe42 	bl	8000708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8e:	2b80      	cmp	r3, #128	; 0x80
 8002a90:	d10e      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9c:	2b80      	cmp	r3, #128	; 0x80
 8002a9e:	d107      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f914 	bl	8002cd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002abe:	d10e      	bne.n	8002ade <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aca:	2b80      	cmp	r3, #128	; 0x80
 8002acc:	d107      	bne.n	8002ade <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f907 	bl	8002cec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae8:	2b40      	cmp	r3, #64	; 0x40
 8002aea:	d10e      	bne.n	8002b0a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af6:	2b40      	cmp	r3, #64	; 0x40
 8002af8:	d107      	bne.n	8002b0a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f838 	bl	8002b7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	f003 0320 	and.w	r3, r3, #32
 8002b14:	2b20      	cmp	r3, #32
 8002b16:	d10e      	bne.n	8002b36 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f003 0320 	and.w	r3, r3, #32
 8002b22:	2b20      	cmp	r3, #32
 8002b24:	d107      	bne.n	8002b36 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f06f 0220 	mvn.w	r2, #32
 8002b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f8c7 	bl	8002cc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b36:	bf00      	nop
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
	...

08002b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a40      	ldr	r2, [pc, #256]	; (8002ca4 <TIM_Base_SetConfig+0x114>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d013      	beq.n	8002bd0 <TIM_Base_SetConfig+0x40>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bae:	d00f      	beq.n	8002bd0 <TIM_Base_SetConfig+0x40>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a3d      	ldr	r2, [pc, #244]	; (8002ca8 <TIM_Base_SetConfig+0x118>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d00b      	beq.n	8002bd0 <TIM_Base_SetConfig+0x40>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a3c      	ldr	r2, [pc, #240]	; (8002cac <TIM_Base_SetConfig+0x11c>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d007      	beq.n	8002bd0 <TIM_Base_SetConfig+0x40>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a3b      	ldr	r2, [pc, #236]	; (8002cb0 <TIM_Base_SetConfig+0x120>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d003      	beq.n	8002bd0 <TIM_Base_SetConfig+0x40>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a3a      	ldr	r2, [pc, #232]	; (8002cb4 <TIM_Base_SetConfig+0x124>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d108      	bne.n	8002be2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a2f      	ldr	r2, [pc, #188]	; (8002ca4 <TIM_Base_SetConfig+0x114>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d01f      	beq.n	8002c2a <TIM_Base_SetConfig+0x9a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf0:	d01b      	beq.n	8002c2a <TIM_Base_SetConfig+0x9a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a2c      	ldr	r2, [pc, #176]	; (8002ca8 <TIM_Base_SetConfig+0x118>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d017      	beq.n	8002c2a <TIM_Base_SetConfig+0x9a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a2b      	ldr	r2, [pc, #172]	; (8002cac <TIM_Base_SetConfig+0x11c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d013      	beq.n	8002c2a <TIM_Base_SetConfig+0x9a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a2a      	ldr	r2, [pc, #168]	; (8002cb0 <TIM_Base_SetConfig+0x120>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d00f      	beq.n	8002c2a <TIM_Base_SetConfig+0x9a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a29      	ldr	r2, [pc, #164]	; (8002cb4 <TIM_Base_SetConfig+0x124>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d00b      	beq.n	8002c2a <TIM_Base_SetConfig+0x9a>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a28      	ldr	r2, [pc, #160]	; (8002cb8 <TIM_Base_SetConfig+0x128>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d007      	beq.n	8002c2a <TIM_Base_SetConfig+0x9a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a27      	ldr	r2, [pc, #156]	; (8002cbc <TIM_Base_SetConfig+0x12c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d003      	beq.n	8002c2a <TIM_Base_SetConfig+0x9a>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a26      	ldr	r2, [pc, #152]	; (8002cc0 <TIM_Base_SetConfig+0x130>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d108      	bne.n	8002c3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a10      	ldr	r2, [pc, #64]	; (8002ca4 <TIM_Base_SetConfig+0x114>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d00f      	beq.n	8002c88 <TIM_Base_SetConfig+0xf8>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a12      	ldr	r2, [pc, #72]	; (8002cb4 <TIM_Base_SetConfig+0x124>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d00b      	beq.n	8002c88 <TIM_Base_SetConfig+0xf8>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a11      	ldr	r2, [pc, #68]	; (8002cb8 <TIM_Base_SetConfig+0x128>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d007      	beq.n	8002c88 <TIM_Base_SetConfig+0xf8>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a10      	ldr	r2, [pc, #64]	; (8002cbc <TIM_Base_SetConfig+0x12c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d003      	beq.n	8002c88 <TIM_Base_SetConfig+0xf8>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a0f      	ldr	r2, [pc, #60]	; (8002cc0 <TIM_Base_SetConfig+0x130>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d103      	bne.n	8002c90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	615a      	str	r2, [r3, #20]
}
 8002c96:	bf00      	nop
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40012c00 	.word	0x40012c00
 8002ca8:	40000400 	.word	0x40000400
 8002cac:	40000800 	.word	0x40000800
 8002cb0:	40000c00 	.word	0x40000c00
 8002cb4:	40013400 	.word	0x40013400
 8002cb8:	40014000 	.word	0x40014000
 8002cbc:	40014400 	.word	0x40014400
 8002cc0:	40014800 	.word	0x40014800

08002cc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e040      	b.n	8002d94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fd fd30 	bl	8000788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2224      	movs	r2, #36	; 0x24
 8002d2c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0201 	bic.w	r2, r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fbc2 	bl	80034c8 <UART_SetConfig>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e022      	b.n	8002d94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 fe6e 	bl	8003a38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0201 	orr.w	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 fef5 	bl	8003b7c <UART_CheckIdleState>
 8002d92:	4603      	mov	r3, r0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b08a      	sub	sp, #40	; 0x28
 8002da0:	af02      	add	r7, sp, #8
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	4613      	mov	r3, r2
 8002daa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002db0:	2b20      	cmp	r3, #32
 8002db2:	f040 8082 	bne.w	8002eba <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d002      	beq.n	8002dc2 <HAL_UART_Transmit+0x26>
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e07a      	b.n	8002ebc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <HAL_UART_Transmit+0x38>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e073      	b.n	8002ebc <HAL_UART_Transmit+0x120>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2221      	movs	r2, #33	; 0x21
 8002de8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dea:	f7fd fe1b 	bl	8000a24 <HAL_GetTick>
 8002dee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	88fa      	ldrh	r2, [r7, #6]
 8002df4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	88fa      	ldrh	r2, [r7, #6]
 8002dfc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e08:	d108      	bne.n	8002e1c <HAL_UART_Transmit+0x80>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d104      	bne.n	8002e1c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	61bb      	str	r3, [r7, #24]
 8002e1a:	e003      	b.n	8002e24 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002e2c:	e02d      	b.n	8002e8a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2200      	movs	r2, #0
 8002e36:	2180      	movs	r1, #128	; 0x80
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 fee8 	bl	8003c0e <UART_WaitOnFlagUntilTimeout>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e039      	b.n	8002ebc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10b      	bne.n	8002e66 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	881a      	ldrh	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e5a:	b292      	uxth	r2, r2
 8002e5c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	3302      	adds	r3, #2
 8002e62:	61bb      	str	r3, [r7, #24]
 8002e64:	e008      	b.n	8002e78 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	781a      	ldrb	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	b292      	uxth	r2, r2
 8002e70:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	3301      	adds	r3, #1
 8002e76:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1cb      	bne.n	8002e2e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2140      	movs	r1, #64	; 0x40
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 feb4 	bl	8003c0e <UART_WaitOnFlagUntilTimeout>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e005      	b.n	8002ebc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	e000      	b.n	8002ebc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002eba:	2302      	movs	r3, #2
  }
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3720      	adds	r7, #32
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b0ba      	sub	sp, #232	; 0xe8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002eea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002eee:	f640 030f 	movw	r3, #2063	; 0x80f
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002ef8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d115      	bne.n	8002f2c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f04:	f003 0320 	and.w	r3, r3, #32
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00f      	beq.n	8002f2c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f10:	f003 0320 	and.w	r3, r3, #32
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d009      	beq.n	8002f2c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 82a6 	beq.w	800346e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	4798      	blx	r3
      }
      return;
 8002f2a:	e2a0      	b.n	800346e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002f2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 8117 	beq.w	8003164 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002f36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d106      	bne.n	8002f50 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002f42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002f46:	4b85      	ldr	r3, [pc, #532]	; (800315c <HAL_UART_IRQHandler+0x298>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 810a 	beq.w	8003164 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d011      	beq.n	8002f80 <HAL_UART_IRQHandler+0xbc>
 8002f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00b      	beq.n	8002f80 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f76:	f043 0201 	orr.w	r2, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d011      	beq.n	8002fb0 <HAL_UART_IRQHandler+0xec>
 8002f8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00b      	beq.n	8002fb0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fa6:	f043 0204 	orr.w	r2, r3, #4
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d011      	beq.n	8002fe0 <HAL_UART_IRQHandler+0x11c>
 8002fbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00b      	beq.n	8002fe0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2204      	movs	r2, #4
 8002fce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fd6:	f043 0202 	orr.w	r2, r3, #2
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d017      	beq.n	800301c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ff0:	f003 0320 	and.w	r3, r3, #32
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d105      	bne.n	8003004 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002ff8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ffc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00b      	beq.n	800301c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2208      	movs	r2, #8
 800300a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003012:	f043 0208 	orr.w	r2, r3, #8
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800301c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003024:	2b00      	cmp	r3, #0
 8003026:	d012      	beq.n	800304e <HAL_UART_IRQHandler+0x18a>
 8003028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800302c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00c      	beq.n	800304e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800303c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003044:	f043 0220 	orr.w	r2, r3, #32
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 820c 	beq.w	8003472 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800305a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800305e:	f003 0320 	and.w	r3, r3, #32
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00d      	beq.n	8003082 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	2b00      	cmp	r3, #0
 8003070:	d007      	beq.n	8003082 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003088:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003096:	2b40      	cmp	r3, #64	; 0x40
 8003098:	d005      	beq.n	80030a6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800309a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800309e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d04f      	beq.n	8003146 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fe75 	bl	8003d96 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b6:	2b40      	cmp	r3, #64	; 0x40
 80030b8:	d141      	bne.n	800313e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3308      	adds	r3, #8
 80030c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030c8:	e853 3f00 	ldrex	r3, [r3]
 80030cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80030d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	3308      	adds	r3, #8
 80030e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80030e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80030ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80030f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80030f6:	e841 2300 	strex	r3, r2, [r1]
 80030fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80030fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1d9      	bne.n	80030ba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310a:	2b00      	cmp	r3, #0
 800310c:	d013      	beq.n	8003136 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003112:	4a13      	ldr	r2, [pc, #76]	; (8003160 <HAL_UART_IRQHandler+0x29c>)
 8003114:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311a:	4618      	mov	r0, r3
 800311c:	f7fd fdae 	bl	8000c7c <HAL_DMA_Abort_IT>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d017      	beq.n	8003156 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003130:	4610      	mov	r0, r2
 8003132:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003134:	e00f      	b.n	8003156 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f9b0 	bl	800349c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800313c:	e00b      	b.n	8003156 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f9ac 	bl	800349c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003144:	e007      	b.n	8003156 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f9a8 	bl	800349c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003154:	e18d      	b.n	8003472 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003156:	bf00      	nop
    return;
 8003158:	e18b      	b.n	8003472 <HAL_UART_IRQHandler+0x5ae>
 800315a:	bf00      	nop
 800315c:	04000120 	.word	0x04000120
 8003160:	08003e5d 	.word	0x08003e5d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003168:	2b01      	cmp	r3, #1
 800316a:	f040 8146 	bne.w	80033fa <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800316e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 813f 	beq.w	80033fa <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800317c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 8138 	beq.w	80033fa <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2210      	movs	r2, #16
 8003190:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319c:	2b40      	cmp	r3, #64	; 0x40
 800319e:	f040 80b4 	bne.w	800330a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 815f 	beq.w	8003476 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80031be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031c2:	429a      	cmp	r2, r3
 80031c4:	f080 8157 	bcs.w	8003476 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f040 8085 	bne.w	80032ee <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031f0:	e853 3f00 	ldrex	r3, [r3]
 80031f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80031f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003200:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	461a      	mov	r2, r3
 800320a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800320e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003212:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003216:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800321a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800321e:	e841 2300 	strex	r3, r2, [r1]
 8003222:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003226:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1da      	bne.n	80031e4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	3308      	adds	r3, #8
 8003234:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003236:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003238:	e853 3f00 	ldrex	r3, [r3]
 800323c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800323e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003240:	f023 0301 	bic.w	r3, r3, #1
 8003244:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	3308      	adds	r3, #8
 800324e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003252:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003256:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003258:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800325a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800325e:	e841 2300 	strex	r3, r2, [r1]
 8003262:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003264:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1e1      	bne.n	800322e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	3308      	adds	r3, #8
 8003270:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003272:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003274:	e853 3f00 	ldrex	r3, [r3]
 8003278:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800327a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800327c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003280:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	3308      	adds	r3, #8
 800328a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800328e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003290:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003292:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003294:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003296:	e841 2300 	strex	r3, r2, [r1]
 800329a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800329c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1e3      	bne.n	800326a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2220      	movs	r2, #32
 80032a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032b6:	e853 3f00 	ldrex	r3, [r3]
 80032ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80032bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032be:	f023 0310 	bic.w	r3, r3, #16
 80032c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	461a      	mov	r2, r3
 80032cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80032d2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032d8:	e841 2300 	strex	r3, r2, [r1]
 80032dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80032de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1e4      	bne.n	80032ae <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fd fc89 	bl	8000c00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	b29b      	uxth	r3, r3
 8003300:	4619      	mov	r1, r3
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f8d4 	bl	80034b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003308:	e0b5      	b.n	8003476 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003316:	b29b      	uxth	r3, r3
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003324:	b29b      	uxth	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 80a7 	beq.w	800347a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800332c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80a2 	beq.w	800347a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333e:	e853 3f00 	ldrex	r3, [r3]
 8003342:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003346:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800334a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	461a      	mov	r2, r3
 8003354:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003358:	647b      	str	r3, [r7, #68]	; 0x44
 800335a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800335e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003360:	e841 2300 	strex	r3, r2, [r1]
 8003364:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1e4      	bne.n	8003336 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3308      	adds	r3, #8
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	e853 3f00 	ldrex	r3, [r3]
 800337a:	623b      	str	r3, [r7, #32]
   return(result);
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	f023 0301 	bic.w	r3, r3, #1
 8003382:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	3308      	adds	r3, #8
 800338c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003390:	633a      	str	r2, [r7, #48]	; 0x30
 8003392:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003394:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003396:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003398:	e841 2300 	strex	r3, r2, [r1]
 800339c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800339e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1e3      	bne.n	800336c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2220      	movs	r2, #32
 80033a8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	e853 3f00 	ldrex	r3, [r3]
 80033c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f023 0310 	bic.w	r3, r3, #16
 80033ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	461a      	mov	r2, r3
 80033d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033dc:	69b9      	ldr	r1, [r7, #24]
 80033de:	69fa      	ldr	r2, [r7, #28]
 80033e0:	e841 2300 	strex	r3, r2, [r1]
 80033e4:	617b      	str	r3, [r7, #20]
   return(result);
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1e4      	bne.n	80033b6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033f0:	4619      	mov	r1, r3
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f85c 	bl	80034b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033f8:	e03f      	b.n	800347a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80033fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00e      	beq.n	8003424 <HAL_UART_IRQHandler+0x560>
 8003406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800340a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d008      	beq.n	8003424 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800341a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 fd5d 	bl	8003edc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003422:	e02d      	b.n	8003480 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00e      	beq.n	800344e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003438:	2b00      	cmp	r3, #0
 800343a:	d008      	beq.n	800344e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003440:	2b00      	cmp	r3, #0
 8003442:	d01c      	beq.n	800347e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	4798      	blx	r3
    }
    return;
 800344c:	e017      	b.n	800347e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800344e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d012      	beq.n	8003480 <HAL_UART_IRQHandler+0x5bc>
 800345a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800345e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00c      	beq.n	8003480 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fd0e 	bl	8003e88 <UART_EndTransmit_IT>
    return;
 800346c:	e008      	b.n	8003480 <HAL_UART_IRQHandler+0x5bc>
      return;
 800346e:	bf00      	nop
 8003470:	e006      	b.n	8003480 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003472:	bf00      	nop
 8003474:	e004      	b.n	8003480 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003476:	bf00      	nop
 8003478:	e002      	b.n	8003480 <HAL_UART_IRQHandler+0x5bc>
      return;
 800347a:	bf00      	nop
 800347c:	e000      	b.n	8003480 <HAL_UART_IRQHandler+0x5bc>
    return;
 800347e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003480:	37e8      	adds	r7, #232	; 0xe8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop

08003488 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034cc:	b08a      	sub	sp, #40	; 0x28
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	431a      	orrs	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	431a      	orrs	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	4ba4      	ldr	r3, [pc, #656]	; (8003788 <UART_SetConfig+0x2c0>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	6812      	ldr	r2, [r2, #0]
 80034fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003500:	430b      	orrs	r3, r1
 8003502:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a99      	ldr	r2, [pc, #612]	; (800378c <UART_SetConfig+0x2c4>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d004      	beq.n	8003534 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003530:	4313      	orrs	r3, r2
 8003532:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003544:	430a      	orrs	r2, r1
 8003546:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a90      	ldr	r2, [pc, #576]	; (8003790 <UART_SetConfig+0x2c8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d126      	bne.n	80035a0 <UART_SetConfig+0xd8>
 8003552:	4b90      	ldr	r3, [pc, #576]	; (8003794 <UART_SetConfig+0x2cc>)
 8003554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003558:	f003 0303 	and.w	r3, r3, #3
 800355c:	2b03      	cmp	r3, #3
 800355e:	d81b      	bhi.n	8003598 <UART_SetConfig+0xd0>
 8003560:	a201      	add	r2, pc, #4	; (adr r2, 8003568 <UART_SetConfig+0xa0>)
 8003562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003566:	bf00      	nop
 8003568:	08003579 	.word	0x08003579
 800356c:	08003589 	.word	0x08003589
 8003570:	08003581 	.word	0x08003581
 8003574:	08003591 	.word	0x08003591
 8003578:	2301      	movs	r3, #1
 800357a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800357e:	e116      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003580:	2302      	movs	r3, #2
 8003582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003586:	e112      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003588:	2304      	movs	r3, #4
 800358a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800358e:	e10e      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003590:	2308      	movs	r3, #8
 8003592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003596:	e10a      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003598:	2310      	movs	r3, #16
 800359a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800359e:	e106      	b.n	80037ae <UART_SetConfig+0x2e6>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a7c      	ldr	r2, [pc, #496]	; (8003798 <UART_SetConfig+0x2d0>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d138      	bne.n	800361c <UART_SetConfig+0x154>
 80035aa:	4b7a      	ldr	r3, [pc, #488]	; (8003794 <UART_SetConfig+0x2cc>)
 80035ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b0:	f003 030c 	and.w	r3, r3, #12
 80035b4:	2b0c      	cmp	r3, #12
 80035b6:	d82d      	bhi.n	8003614 <UART_SetConfig+0x14c>
 80035b8:	a201      	add	r2, pc, #4	; (adr r2, 80035c0 <UART_SetConfig+0xf8>)
 80035ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035be:	bf00      	nop
 80035c0:	080035f5 	.word	0x080035f5
 80035c4:	08003615 	.word	0x08003615
 80035c8:	08003615 	.word	0x08003615
 80035cc:	08003615 	.word	0x08003615
 80035d0:	08003605 	.word	0x08003605
 80035d4:	08003615 	.word	0x08003615
 80035d8:	08003615 	.word	0x08003615
 80035dc:	08003615 	.word	0x08003615
 80035e0:	080035fd 	.word	0x080035fd
 80035e4:	08003615 	.word	0x08003615
 80035e8:	08003615 	.word	0x08003615
 80035ec:	08003615 	.word	0x08003615
 80035f0:	0800360d 	.word	0x0800360d
 80035f4:	2300      	movs	r3, #0
 80035f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035fa:	e0d8      	b.n	80037ae <UART_SetConfig+0x2e6>
 80035fc:	2302      	movs	r3, #2
 80035fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003602:	e0d4      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003604:	2304      	movs	r3, #4
 8003606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800360a:	e0d0      	b.n	80037ae <UART_SetConfig+0x2e6>
 800360c:	2308      	movs	r3, #8
 800360e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003612:	e0cc      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003614:	2310      	movs	r3, #16
 8003616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800361a:	e0c8      	b.n	80037ae <UART_SetConfig+0x2e6>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a5e      	ldr	r2, [pc, #376]	; (800379c <UART_SetConfig+0x2d4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d125      	bne.n	8003672 <UART_SetConfig+0x1aa>
 8003626:	4b5b      	ldr	r3, [pc, #364]	; (8003794 <UART_SetConfig+0x2cc>)
 8003628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003630:	2b30      	cmp	r3, #48	; 0x30
 8003632:	d016      	beq.n	8003662 <UART_SetConfig+0x19a>
 8003634:	2b30      	cmp	r3, #48	; 0x30
 8003636:	d818      	bhi.n	800366a <UART_SetConfig+0x1a2>
 8003638:	2b20      	cmp	r3, #32
 800363a:	d00a      	beq.n	8003652 <UART_SetConfig+0x18a>
 800363c:	2b20      	cmp	r3, #32
 800363e:	d814      	bhi.n	800366a <UART_SetConfig+0x1a2>
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <UART_SetConfig+0x182>
 8003644:	2b10      	cmp	r3, #16
 8003646:	d008      	beq.n	800365a <UART_SetConfig+0x192>
 8003648:	e00f      	b.n	800366a <UART_SetConfig+0x1a2>
 800364a:	2300      	movs	r3, #0
 800364c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003650:	e0ad      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003652:	2302      	movs	r3, #2
 8003654:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003658:	e0a9      	b.n	80037ae <UART_SetConfig+0x2e6>
 800365a:	2304      	movs	r3, #4
 800365c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003660:	e0a5      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003662:	2308      	movs	r3, #8
 8003664:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003668:	e0a1      	b.n	80037ae <UART_SetConfig+0x2e6>
 800366a:	2310      	movs	r3, #16
 800366c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003670:	e09d      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a4a      	ldr	r2, [pc, #296]	; (80037a0 <UART_SetConfig+0x2d8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d125      	bne.n	80036c8 <UART_SetConfig+0x200>
 800367c:	4b45      	ldr	r3, [pc, #276]	; (8003794 <UART_SetConfig+0x2cc>)
 800367e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003682:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003686:	2bc0      	cmp	r3, #192	; 0xc0
 8003688:	d016      	beq.n	80036b8 <UART_SetConfig+0x1f0>
 800368a:	2bc0      	cmp	r3, #192	; 0xc0
 800368c:	d818      	bhi.n	80036c0 <UART_SetConfig+0x1f8>
 800368e:	2b80      	cmp	r3, #128	; 0x80
 8003690:	d00a      	beq.n	80036a8 <UART_SetConfig+0x1e0>
 8003692:	2b80      	cmp	r3, #128	; 0x80
 8003694:	d814      	bhi.n	80036c0 <UART_SetConfig+0x1f8>
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <UART_SetConfig+0x1d8>
 800369a:	2b40      	cmp	r3, #64	; 0x40
 800369c:	d008      	beq.n	80036b0 <UART_SetConfig+0x1e8>
 800369e:	e00f      	b.n	80036c0 <UART_SetConfig+0x1f8>
 80036a0:	2300      	movs	r3, #0
 80036a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036a6:	e082      	b.n	80037ae <UART_SetConfig+0x2e6>
 80036a8:	2302      	movs	r3, #2
 80036aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ae:	e07e      	b.n	80037ae <UART_SetConfig+0x2e6>
 80036b0:	2304      	movs	r3, #4
 80036b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036b6:	e07a      	b.n	80037ae <UART_SetConfig+0x2e6>
 80036b8:	2308      	movs	r3, #8
 80036ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036be:	e076      	b.n	80037ae <UART_SetConfig+0x2e6>
 80036c0:	2310      	movs	r3, #16
 80036c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036c6:	e072      	b.n	80037ae <UART_SetConfig+0x2e6>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a35      	ldr	r2, [pc, #212]	; (80037a4 <UART_SetConfig+0x2dc>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d12a      	bne.n	8003728 <UART_SetConfig+0x260>
 80036d2:	4b30      	ldr	r3, [pc, #192]	; (8003794 <UART_SetConfig+0x2cc>)
 80036d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036e0:	d01a      	beq.n	8003718 <UART_SetConfig+0x250>
 80036e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036e6:	d81b      	bhi.n	8003720 <UART_SetConfig+0x258>
 80036e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ec:	d00c      	beq.n	8003708 <UART_SetConfig+0x240>
 80036ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f2:	d815      	bhi.n	8003720 <UART_SetConfig+0x258>
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <UART_SetConfig+0x238>
 80036f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036fc:	d008      	beq.n	8003710 <UART_SetConfig+0x248>
 80036fe:	e00f      	b.n	8003720 <UART_SetConfig+0x258>
 8003700:	2300      	movs	r3, #0
 8003702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003706:	e052      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003708:	2302      	movs	r3, #2
 800370a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800370e:	e04e      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003710:	2304      	movs	r3, #4
 8003712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003716:	e04a      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003718:	2308      	movs	r3, #8
 800371a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800371e:	e046      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003720:	2310      	movs	r3, #16
 8003722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003726:	e042      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a17      	ldr	r2, [pc, #92]	; (800378c <UART_SetConfig+0x2c4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d13a      	bne.n	80037a8 <UART_SetConfig+0x2e0>
 8003732:	4b18      	ldr	r3, [pc, #96]	; (8003794 <UART_SetConfig+0x2cc>)
 8003734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003738:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800373c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003740:	d01a      	beq.n	8003778 <UART_SetConfig+0x2b0>
 8003742:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003746:	d81b      	bhi.n	8003780 <UART_SetConfig+0x2b8>
 8003748:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800374c:	d00c      	beq.n	8003768 <UART_SetConfig+0x2a0>
 800374e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003752:	d815      	bhi.n	8003780 <UART_SetConfig+0x2b8>
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <UART_SetConfig+0x298>
 8003758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800375c:	d008      	beq.n	8003770 <UART_SetConfig+0x2a8>
 800375e:	e00f      	b.n	8003780 <UART_SetConfig+0x2b8>
 8003760:	2300      	movs	r3, #0
 8003762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003766:	e022      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003768:	2302      	movs	r3, #2
 800376a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800376e:	e01e      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003770:	2304      	movs	r3, #4
 8003772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003776:	e01a      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003778:	2308      	movs	r3, #8
 800377a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800377e:	e016      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003780:	2310      	movs	r3, #16
 8003782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003786:	e012      	b.n	80037ae <UART_SetConfig+0x2e6>
 8003788:	efff69f3 	.word	0xefff69f3
 800378c:	40008000 	.word	0x40008000
 8003790:	40013800 	.word	0x40013800
 8003794:	40021000 	.word	0x40021000
 8003798:	40004400 	.word	0x40004400
 800379c:	40004800 	.word	0x40004800
 80037a0:	40004c00 	.word	0x40004c00
 80037a4:	40005000 	.word	0x40005000
 80037a8:	2310      	movs	r3, #16
 80037aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a9f      	ldr	r2, [pc, #636]	; (8003a30 <UART_SetConfig+0x568>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d17a      	bne.n	80038ae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d824      	bhi.n	800380a <UART_SetConfig+0x342>
 80037c0:	a201      	add	r2, pc, #4	; (adr r2, 80037c8 <UART_SetConfig+0x300>)
 80037c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c6:	bf00      	nop
 80037c8:	080037ed 	.word	0x080037ed
 80037cc:	0800380b 	.word	0x0800380b
 80037d0:	080037f5 	.word	0x080037f5
 80037d4:	0800380b 	.word	0x0800380b
 80037d8:	080037fb 	.word	0x080037fb
 80037dc:	0800380b 	.word	0x0800380b
 80037e0:	0800380b 	.word	0x0800380b
 80037e4:	0800380b 	.word	0x0800380b
 80037e8:	08003803 	.word	0x08003803
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037ec:	f7fe fa3c 	bl	8001c68 <HAL_RCC_GetPCLK1Freq>
 80037f0:	61f8      	str	r0, [r7, #28]
        break;
 80037f2:	e010      	b.n	8003816 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037f4:	4b8f      	ldr	r3, [pc, #572]	; (8003a34 <UART_SetConfig+0x56c>)
 80037f6:	61fb      	str	r3, [r7, #28]
        break;
 80037f8:	e00d      	b.n	8003816 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037fa:	f7fe f99d 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 80037fe:	61f8      	str	r0, [r7, #28]
        break;
 8003800:	e009      	b.n	8003816 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003806:	61fb      	str	r3, [r7, #28]
        break;
 8003808:	e005      	b.n	8003816 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003814:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 80fb 	beq.w	8003a14 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	4613      	mov	r3, r2
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	4413      	add	r3, r2
 8003828:	69fa      	ldr	r2, [r7, #28]
 800382a:	429a      	cmp	r2, r3
 800382c:	d305      	bcc.n	800383a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003834:	69fa      	ldr	r2, [r7, #28]
 8003836:	429a      	cmp	r2, r3
 8003838:	d903      	bls.n	8003842 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003840:	e0e8      	b.n	8003a14 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	2200      	movs	r2, #0
 8003846:	461c      	mov	r4, r3
 8003848:	4615      	mov	r5, r2
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	f04f 0300 	mov.w	r3, #0
 8003852:	022b      	lsls	r3, r5, #8
 8003854:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003858:	0222      	lsls	r2, r4, #8
 800385a:	68f9      	ldr	r1, [r7, #12]
 800385c:	6849      	ldr	r1, [r1, #4]
 800385e:	0849      	lsrs	r1, r1, #1
 8003860:	2000      	movs	r0, #0
 8003862:	4688      	mov	r8, r1
 8003864:	4681      	mov	r9, r0
 8003866:	eb12 0a08 	adds.w	sl, r2, r8
 800386a:	eb43 0b09 	adc.w	fp, r3, r9
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	603b      	str	r3, [r7, #0]
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800387c:	4650      	mov	r0, sl
 800387e:	4659      	mov	r1, fp
 8003880:	f7fc fca6 	bl	80001d0 <__aeabi_uldivmod>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4613      	mov	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003892:	d308      	bcc.n	80038a6 <UART_SetConfig+0x3de>
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800389a:	d204      	bcs.n	80038a6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	60da      	str	r2, [r3, #12]
 80038a4:	e0b6      	b.n	8003a14 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80038ac:	e0b2      	b.n	8003a14 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038b6:	d15e      	bne.n	8003976 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80038b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d828      	bhi.n	8003912 <UART_SetConfig+0x44a>
 80038c0:	a201      	add	r2, pc, #4	; (adr r2, 80038c8 <UART_SetConfig+0x400>)
 80038c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c6:	bf00      	nop
 80038c8:	080038ed 	.word	0x080038ed
 80038cc:	080038f5 	.word	0x080038f5
 80038d0:	080038fd 	.word	0x080038fd
 80038d4:	08003913 	.word	0x08003913
 80038d8:	08003903 	.word	0x08003903
 80038dc:	08003913 	.word	0x08003913
 80038e0:	08003913 	.word	0x08003913
 80038e4:	08003913 	.word	0x08003913
 80038e8:	0800390b 	.word	0x0800390b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038ec:	f7fe f9bc 	bl	8001c68 <HAL_RCC_GetPCLK1Freq>
 80038f0:	61f8      	str	r0, [r7, #28]
        break;
 80038f2:	e014      	b.n	800391e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038f4:	f7fe f9ce 	bl	8001c94 <HAL_RCC_GetPCLK2Freq>
 80038f8:	61f8      	str	r0, [r7, #28]
        break;
 80038fa:	e010      	b.n	800391e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038fc:	4b4d      	ldr	r3, [pc, #308]	; (8003a34 <UART_SetConfig+0x56c>)
 80038fe:	61fb      	str	r3, [r7, #28]
        break;
 8003900:	e00d      	b.n	800391e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003902:	f7fe f919 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 8003906:	61f8      	str	r0, [r7, #28]
        break;
 8003908:	e009      	b.n	800391e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800390a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800390e:	61fb      	str	r3, [r7, #28]
        break;
 8003910:	e005      	b.n	800391e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003912:	2300      	movs	r3, #0
 8003914:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800391c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d077      	beq.n	8003a14 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	005a      	lsls	r2, r3, #1
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	085b      	lsrs	r3, r3, #1
 800392e:	441a      	add	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	fbb2 f3f3 	udiv	r3, r2, r3
 8003938:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	2b0f      	cmp	r3, #15
 800393e:	d916      	bls.n	800396e <UART_SetConfig+0x4a6>
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003946:	d212      	bcs.n	800396e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	b29b      	uxth	r3, r3
 800394c:	f023 030f 	bic.w	r3, r3, #15
 8003950:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	085b      	lsrs	r3, r3, #1
 8003956:	b29b      	uxth	r3, r3
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	b29a      	uxth	r2, r3
 800395e:	8afb      	ldrh	r3, [r7, #22]
 8003960:	4313      	orrs	r3, r2
 8003962:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	8afa      	ldrh	r2, [r7, #22]
 800396a:	60da      	str	r2, [r3, #12]
 800396c:	e052      	b.n	8003a14 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003974:	e04e      	b.n	8003a14 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003976:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800397a:	2b08      	cmp	r3, #8
 800397c:	d827      	bhi.n	80039ce <UART_SetConfig+0x506>
 800397e:	a201      	add	r2, pc, #4	; (adr r2, 8003984 <UART_SetConfig+0x4bc>)
 8003980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003984:	080039a9 	.word	0x080039a9
 8003988:	080039b1 	.word	0x080039b1
 800398c:	080039b9 	.word	0x080039b9
 8003990:	080039cf 	.word	0x080039cf
 8003994:	080039bf 	.word	0x080039bf
 8003998:	080039cf 	.word	0x080039cf
 800399c:	080039cf 	.word	0x080039cf
 80039a0:	080039cf 	.word	0x080039cf
 80039a4:	080039c7 	.word	0x080039c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039a8:	f7fe f95e 	bl	8001c68 <HAL_RCC_GetPCLK1Freq>
 80039ac:	61f8      	str	r0, [r7, #28]
        break;
 80039ae:	e014      	b.n	80039da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039b0:	f7fe f970 	bl	8001c94 <HAL_RCC_GetPCLK2Freq>
 80039b4:	61f8      	str	r0, [r7, #28]
        break;
 80039b6:	e010      	b.n	80039da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039b8:	4b1e      	ldr	r3, [pc, #120]	; (8003a34 <UART_SetConfig+0x56c>)
 80039ba:	61fb      	str	r3, [r7, #28]
        break;
 80039bc:	e00d      	b.n	80039da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039be:	f7fe f8bb 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 80039c2:	61f8      	str	r0, [r7, #28]
        break;
 80039c4:	e009      	b.n	80039da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039ca:	61fb      	str	r3, [r7, #28]
        break;
 80039cc:	e005      	b.n	80039da <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80039d8:	bf00      	nop
    }

    if (pclk != 0U)
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d019      	beq.n	8003a14 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	085a      	lsrs	r2, r3, #1
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	441a      	add	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	2b0f      	cmp	r3, #15
 80039f8:	d909      	bls.n	8003a0e <UART_SetConfig+0x546>
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a00:	d205      	bcs.n	8003a0e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	60da      	str	r2, [r3, #12]
 8003a0c:	e002      	b.n	8003a14 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a20:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3728      	adds	r7, #40	; 0x28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a2e:	bf00      	nop
 8003a30:	40008000 	.word	0x40008000
 8003a34:	00f42400 	.word	0x00f42400

08003a38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	f003 0308 	and.w	r3, r3, #8
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01a      	beq.n	8003b4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b36:	d10a      	bne.n	8003b4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	605a      	str	r2, [r3, #4]
  }
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af02      	add	r7, sp, #8
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b8c:	f7fc ff4a 	bl	8000a24 <HAL_GetTick>
 8003b90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d10e      	bne.n	8003bbe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ba0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f82d 	bl	8003c0e <UART_WaitOnFlagUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e023      	b.n	8003c06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d10e      	bne.n	8003bea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f817 	bl	8003c0e <UART_WaitOnFlagUntilTimeout>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e00d      	b.n	8003c06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2220      	movs	r2, #32
 8003bee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b09c      	sub	sp, #112	; 0x70
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	60f8      	str	r0, [r7, #12]
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	603b      	str	r3, [r7, #0]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c1e:	e0a5      	b.n	8003d6c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c26:	f000 80a1 	beq.w	8003d6c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c2a:	f7fc fefb 	bl	8000a24 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d302      	bcc.n	8003c40 <UART_WaitOnFlagUntilTimeout+0x32>
 8003c3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d13e      	bne.n	8003cbe <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c48:	e853 3f00 	ldrex	r3, [r3]
 8003c4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c54:	667b      	str	r3, [r7, #100]	; 0x64
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c60:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c66:	e841 2300 	strex	r3, r2, [r1]
 8003c6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1e6      	bne.n	8003c40 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	3308      	adds	r3, #8
 8003c78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c7c:	e853 3f00 	ldrex	r3, [r3]
 8003c80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c84:	f023 0301 	bic.w	r3, r3, #1
 8003c88:	663b      	str	r3, [r7, #96]	; 0x60
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	3308      	adds	r3, #8
 8003c90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c92:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c9a:	e841 2300 	strex	r3, r2, [r1]
 8003c9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1e5      	bne.n	8003c72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e067      	b.n	8003d8e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d04f      	beq.n	8003d6c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cda:	d147      	bne.n	8003d6c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ce4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cee:	e853 3f00 	ldrex	r3, [r3]
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	461a      	mov	r2, r3
 8003d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d04:	637b      	str	r3, [r7, #52]	; 0x34
 8003d06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d0c:	e841 2300 	strex	r3, r2, [r1]
 8003d10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1e6      	bne.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3308      	adds	r3, #8
 8003d1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	e853 3f00 	ldrex	r3, [r3]
 8003d26:	613b      	str	r3, [r7, #16]
   return(result);
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f023 0301 	bic.w	r3, r3, #1
 8003d2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3308      	adds	r3, #8
 8003d36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d38:	623a      	str	r2, [r7, #32]
 8003d3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3c:	69f9      	ldr	r1, [r7, #28]
 8003d3e:	6a3a      	ldr	r2, [r7, #32]
 8003d40:	e841 2300 	strex	r3, r2, [r1]
 8003d44:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1e5      	bne.n	8003d18 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2220      	movs	r2, #32
 8003d56:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e010      	b.n	8003d8e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	69da      	ldr	r2, [r3, #28]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	4013      	ands	r3, r2
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	bf0c      	ite	eq
 8003d7c:	2301      	moveq	r3, #1
 8003d7e:	2300      	movne	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	461a      	mov	r2, r3
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	f43f af4a 	beq.w	8003c20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3770      	adds	r7, #112	; 0x70
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b095      	sub	sp, #84	; 0x54
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da6:	e853 3f00 	ldrex	r3, [r3]
 8003daa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	461a      	mov	r2, r3
 8003dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dbc:	643b      	str	r3, [r7, #64]	; 0x40
 8003dbe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003dc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003dc4:	e841 2300 	strex	r3, r2, [r1]
 8003dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1e6      	bne.n	8003d9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3308      	adds	r3, #8
 8003dd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	e853 3f00 	ldrex	r3, [r3]
 8003dde:	61fb      	str	r3, [r7, #28]
   return(result);
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	f023 0301 	bic.w	r3, r3, #1
 8003de6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3308      	adds	r3, #8
 8003dee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003df0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003df2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003df6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003df8:	e841 2300 	strex	r3, r2, [r1]
 8003dfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1e5      	bne.n	8003dd0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d118      	bne.n	8003e3e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	e853 3f00 	ldrex	r3, [r3]
 8003e18:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	f023 0310 	bic.w	r3, r3, #16
 8003e20:	647b      	str	r3, [r7, #68]	; 0x44
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	461a      	mov	r2, r3
 8003e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e2a:	61bb      	str	r3, [r7, #24]
 8003e2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2e:	6979      	ldr	r1, [r7, #20]
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	e841 2300 	strex	r3, r2, [r1]
 8003e36:	613b      	str	r3, [r7, #16]
   return(result);
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1e6      	bne.n	8003e0c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2220      	movs	r2, #32
 8003e42:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003e50:	bf00      	nop
 8003e52:	3754      	adds	r7, #84	; 0x54
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f7ff fb0e 	bl	800349c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e80:	bf00      	nop
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	e853 3f00 	ldrex	r3, [r3]
 8003e9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ea4:	61fb      	str	r3, [r7, #28]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	61bb      	str	r3, [r7, #24]
 8003eb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb2:	6979      	ldr	r1, [r7, #20]
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	e841 2300 	strex	r3, r2, [r1]
 8003eba:	613b      	str	r3, [r7, #16]
   return(result);
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1e6      	bne.n	8003e90 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff fada 	bl	8003488 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ed4:	bf00      	nop
 8003ed6:	3720      	adds	r7, #32
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <__NVIC_SetPriority>:
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	6039      	str	r1, [r7, #0]
 8003efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	db0a      	blt.n	8003f1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	490c      	ldr	r1, [pc, #48]	; (8003f3c <__NVIC_SetPriority+0x4c>)
 8003f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0e:	0112      	lsls	r2, r2, #4
 8003f10:	b2d2      	uxtb	r2, r2
 8003f12:	440b      	add	r3, r1
 8003f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003f18:	e00a      	b.n	8003f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	4908      	ldr	r1, [pc, #32]	; (8003f40 <__NVIC_SetPriority+0x50>)
 8003f20:	79fb      	ldrb	r3, [r7, #7]
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	3b04      	subs	r3, #4
 8003f28:	0112      	lsls	r2, r2, #4
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	761a      	strb	r2, [r3, #24]
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	e000e100 	.word	0xe000e100
 8003f40:	e000ed00 	.word	0xe000ed00

08003f44 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003f48:	4b05      	ldr	r3, [pc, #20]	; (8003f60 <SysTick_Handler+0x1c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003f4c:	f001 fd4a 	bl	80059e4 <xTaskGetSchedulerState>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d001      	beq.n	8003f5a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003f56:	f002 fb2f 	bl	80065b8 <xPortSysTickHandler>
  }
}
 8003f5a:	bf00      	nop
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	e000e010 	.word	0xe000e010

08003f64 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003f68:	2100      	movs	r1, #0
 8003f6a:	f06f 0004 	mvn.w	r0, #4
 8003f6e:	f7ff ffbf 	bl	8003ef0 <__NVIC_SetPriority>
#endif
}
 8003f72:	bf00      	nop
 8003f74:	bd80      	pop	{r7, pc}
	...

08003f78 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f7e:	f3ef 8305 	mrs	r3, IPSR
 8003f82:	603b      	str	r3, [r7, #0]
  return(result);
 8003f84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003f8a:	f06f 0305 	mvn.w	r3, #5
 8003f8e:	607b      	str	r3, [r7, #4]
 8003f90:	e00c      	b.n	8003fac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003f92:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <osKernelInitialize+0x44>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d105      	bne.n	8003fa6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003f9a:	4b08      	ldr	r3, [pc, #32]	; (8003fbc <osKernelInitialize+0x44>)
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	607b      	str	r3, [r7, #4]
 8003fa4:	e002      	b.n	8003fac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003fa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003faa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003fac:	687b      	ldr	r3, [r7, #4]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	2000016c 	.word	0x2000016c

08003fc0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fc6:	f3ef 8305 	mrs	r3, IPSR
 8003fca:	603b      	str	r3, [r7, #0]
  return(result);
 8003fcc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <osKernelStart+0x1a>
    stat = osErrorISR;
 8003fd2:	f06f 0305 	mvn.w	r3, #5
 8003fd6:	607b      	str	r3, [r7, #4]
 8003fd8:	e010      	b.n	8003ffc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003fda:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <osKernelStart+0x48>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d109      	bne.n	8003ff6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003fe2:	f7ff ffbf 	bl	8003f64 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003fe6:	4b08      	ldr	r3, [pc, #32]	; (8004008 <osKernelStart+0x48>)
 8003fe8:	2202      	movs	r2, #2
 8003fea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003fec:	f001 f880 	bl	80050f0 <vTaskStartScheduler>
      stat = osOK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	607b      	str	r3, [r7, #4]
 8003ff4:	e002      	b.n	8003ffc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003ff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ffa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ffc:	687b      	ldr	r3, [r7, #4]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	2000016c 	.word	0x2000016c

0800400c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800400c:	b580      	push	{r7, lr}
 800400e:	b08e      	sub	sp, #56	; 0x38
 8004010:	af04      	add	r7, sp, #16
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004018:	2300      	movs	r3, #0
 800401a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800401c:	f3ef 8305 	mrs	r3, IPSR
 8004020:	617b      	str	r3, [r7, #20]
  return(result);
 8004022:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004024:	2b00      	cmp	r3, #0
 8004026:	d17e      	bne.n	8004126 <osThreadNew+0x11a>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d07b      	beq.n	8004126 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800402e:	2380      	movs	r3, #128	; 0x80
 8004030:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004032:	2318      	movs	r3, #24
 8004034:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004036:	2300      	movs	r3, #0
 8004038:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800403a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800403e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d045      	beq.n	80040d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <osThreadNew+0x48>
        name = attr->name;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d008      	beq.n	800407a <osThreadNew+0x6e>
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	2b38      	cmp	r3, #56	; 0x38
 800406c:	d805      	bhi.n	800407a <osThreadNew+0x6e>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <osThreadNew+0x72>
        return (NULL);
 800407a:	2300      	movs	r3, #0
 800407c:	e054      	b.n	8004128 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	089b      	lsrs	r3, r3, #2
 800408c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00e      	beq.n	80040b4 <osThreadNew+0xa8>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	2bbf      	cmp	r3, #191	; 0xbf
 800409c:	d90a      	bls.n	80040b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d006      	beq.n	80040b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <osThreadNew+0xa8>
        mem = 1;
 80040ae:	2301      	movs	r3, #1
 80040b0:	61bb      	str	r3, [r7, #24]
 80040b2:	e010      	b.n	80040d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10c      	bne.n	80040d6 <osThreadNew+0xca>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d108      	bne.n	80040d6 <osThreadNew+0xca>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d104      	bne.n	80040d6 <osThreadNew+0xca>
          mem = 0;
 80040cc:	2300      	movs	r3, #0
 80040ce:	61bb      	str	r3, [r7, #24]
 80040d0:	e001      	b.n	80040d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80040d2:	2300      	movs	r3, #0
 80040d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d110      	bne.n	80040fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040e4:	9202      	str	r2, [sp, #8]
 80040e6:	9301      	str	r3, [sp, #4]
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	6a3a      	ldr	r2, [r7, #32]
 80040f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 fe0c 	bl	8004d10 <xTaskCreateStatic>
 80040f8:	4603      	mov	r3, r0
 80040fa:	613b      	str	r3, [r7, #16]
 80040fc:	e013      	b.n	8004126 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d110      	bne.n	8004126 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	b29a      	uxth	r2, r3
 8004108:	f107 0310 	add.w	r3, r7, #16
 800410c:	9301      	str	r3, [sp, #4]
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 fe57 	bl	8004dca <xTaskCreate>
 800411c:	4603      	mov	r3, r0
 800411e:	2b01      	cmp	r3, #1
 8004120:	d001      	beq.n	8004126 <osThreadNew+0x11a>
            hTask = NULL;
 8004122:	2300      	movs	r3, #0
 8004124:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004126:	693b      	ldr	r3, [r7, #16]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3728      	adds	r7, #40	; 0x28
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004138:	f3ef 8305 	mrs	r3, IPSR
 800413c:	60bb      	str	r3, [r7, #8]
  return(result);
 800413e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004140:	2b00      	cmp	r3, #0
 8004142:	d003      	beq.n	800414c <osDelay+0x1c>
    stat = osErrorISR;
 8004144:	f06f 0305 	mvn.w	r3, #5
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	e007      	b.n	800415c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800414c:	2300      	movs	r3, #0
 800414e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 ff96 	bl	8005088 <vTaskDelay>
    }
  }

  return (stat);
 800415c:	68fb      	ldr	r3, [r7, #12]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
	...

08004168 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4a07      	ldr	r2, [pc, #28]	; (8004194 <vApplicationGetIdleTaskMemory+0x2c>)
 8004178:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	4a06      	ldr	r2, [pc, #24]	; (8004198 <vApplicationGetIdleTaskMemory+0x30>)
 800417e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2280      	movs	r2, #128	; 0x80
 8004184:	601a      	str	r2, [r3, #0]
}
 8004186:	bf00      	nop
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	20000170 	.word	0x20000170
 8004198:	20000230 	.word	0x20000230

0800419c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4a07      	ldr	r2, [pc, #28]	; (80041c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80041ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	4a06      	ldr	r2, [pc, #24]	; (80041cc <vApplicationGetTimerTaskMemory+0x30>)
 80041b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041ba:	601a      	str	r2, [r3, #0]
}
 80041bc:	bf00      	nop
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	20000430 	.word	0x20000430
 80041cc:	200004f0 	.word	0x200004f0

080041d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f103 0208 	add.w	r2, r3, #8
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f103 0208 	add.w	r2, r3, #8
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f103 0208 	add.w	r2, r3, #8
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800422a:	b480      	push	{r7}
 800422c:	b085      	sub	sp, #20
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
 8004232:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	1c5a      	adds	r2, r3, #1
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	601a      	str	r2, [r3, #0]
}
 8004266:	bf00      	nop
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004272:	b480      	push	{r7}
 8004274:	b085      	sub	sp, #20
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
 800427a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004288:	d103      	bne.n	8004292 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	e00c      	b.n	80042ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3308      	adds	r3, #8
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	e002      	b.n	80042a0 <vListInsert+0x2e>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d2f6      	bcs.n	800429a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	601a      	str	r2, [r3, #0]
}
 80042d8:	bf00      	nop
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6892      	ldr	r2, [r2, #8]
 80042fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6852      	ldr	r2, [r2, #4]
 8004304:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	429a      	cmp	r2, r3
 800430e:	d103      	bne.n	8004318 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	1e5a      	subs	r2, r3, #1
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
}
 800432c:	4618      	mov	r0, r3
 800432e:	3714      	adds	r7, #20
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10a      	bne.n	8004362 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800434c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004350:	f383 8811 	msr	BASEPRI, r3
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800435e:	bf00      	nop
 8004360:	e7fe      	b.n	8004360 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004362:	f002 f897 	bl	8006494 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436e:	68f9      	ldr	r1, [r7, #12]
 8004370:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004372:	fb01 f303 	mul.w	r3, r1, r3
 8004376:	441a      	add	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004392:	3b01      	subs	r3, #1
 8004394:	68f9      	ldr	r1, [r7, #12]
 8004396:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004398:	fb01 f303 	mul.w	r3, r1, r3
 800439c:	441a      	add	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	22ff      	movs	r2, #255	; 0xff
 80043a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	22ff      	movs	r2, #255	; 0xff
 80043ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d114      	bne.n	80043e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01a      	beq.n	80043f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	3310      	adds	r3, #16
 80043c4:	4618      	mov	r0, r3
 80043c6:	f001 f94b 	bl	8005660 <xTaskRemoveFromEventList>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d012      	beq.n	80043f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80043d0:	4b0c      	ldr	r3, [pc, #48]	; (8004404 <xQueueGenericReset+0xcc>)
 80043d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	e009      	b.n	80043f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	3310      	adds	r3, #16
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff fef2 	bl	80041d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	3324      	adds	r3, #36	; 0x24
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff feed 	bl	80041d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80043f6:	f002 f87d 	bl	80064f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80043fa:	2301      	movs	r3, #1
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	e000ed04 	.word	0xe000ed04

08004408 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004408:	b580      	push	{r7, lr}
 800440a:	b08e      	sub	sp, #56	; 0x38
 800440c:	af02      	add	r7, sp, #8
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
 8004414:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10a      	bne.n	8004432 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800441c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004420:	f383 8811 	msr	BASEPRI, r3
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800442e:	bf00      	nop
 8004430:	e7fe      	b.n	8004430 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10a      	bne.n	800444e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443c:	f383 8811 	msr	BASEPRI, r3
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	627b      	str	r3, [r7, #36]	; 0x24
}
 800444a:	bf00      	nop
 800444c:	e7fe      	b.n	800444c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <xQueueGenericCreateStatic+0x52>
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <xQueueGenericCreateStatic+0x56>
 800445a:	2301      	movs	r3, #1
 800445c:	e000      	b.n	8004460 <xQueueGenericCreateStatic+0x58>
 800445e:	2300      	movs	r3, #0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10a      	bne.n	800447a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004468:	f383 8811 	msr	BASEPRI, r3
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	623b      	str	r3, [r7, #32]
}
 8004476:	bf00      	nop
 8004478:	e7fe      	b.n	8004478 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d102      	bne.n	8004486 <xQueueGenericCreateStatic+0x7e>
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <xQueueGenericCreateStatic+0x82>
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <xQueueGenericCreateStatic+0x84>
 800448a:	2300      	movs	r3, #0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10a      	bne.n	80044a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004494:	f383 8811 	msr	BASEPRI, r3
 8004498:	f3bf 8f6f 	isb	sy
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	61fb      	str	r3, [r7, #28]
}
 80044a2:	bf00      	nop
 80044a4:	e7fe      	b.n	80044a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80044a6:	2350      	movs	r3, #80	; 0x50
 80044a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2b50      	cmp	r3, #80	; 0x50
 80044ae:	d00a      	beq.n	80044c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80044b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	61bb      	str	r3, [r7, #24]
}
 80044c2:	bf00      	nop
 80044c4:	e7fe      	b.n	80044c4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80044c6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80044cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00d      	beq.n	80044ee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80044d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80044da:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80044de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	4613      	mov	r3, r2
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	68b9      	ldr	r1, [r7, #8]
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 f805 	bl	80044f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80044ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3730      	adds	r7, #48	; 0x30
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d103      	bne.n	8004514 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	e002      	b.n	800451a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004526:	2101      	movs	r1, #1
 8004528:	69b8      	ldr	r0, [r7, #24]
 800452a:	f7ff ff05 	bl	8004338 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	78fa      	ldrb	r2, [r7, #3]
 8004532:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004536:	bf00      	nop
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b08e      	sub	sp, #56	; 0x38
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
 800454c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800454e:	2300      	movs	r3, #0
 8004550:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10a      	bne.n	8004572 <xQueueGenericSend+0x32>
	__asm volatile
 800455c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004560:	f383 8811 	msr	BASEPRI, r3
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800456e:	bf00      	nop
 8004570:	e7fe      	b.n	8004570 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d103      	bne.n	8004580 <xQueueGenericSend+0x40>
 8004578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <xQueueGenericSend+0x44>
 8004580:	2301      	movs	r3, #1
 8004582:	e000      	b.n	8004586 <xQueueGenericSend+0x46>
 8004584:	2300      	movs	r3, #0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10a      	bne.n	80045a0 <xQueueGenericSend+0x60>
	__asm volatile
 800458a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458e:	f383 8811 	msr	BASEPRI, r3
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800459c:	bf00      	nop
 800459e:	e7fe      	b.n	800459e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d103      	bne.n	80045ae <xQueueGenericSend+0x6e>
 80045a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d101      	bne.n	80045b2 <xQueueGenericSend+0x72>
 80045ae:	2301      	movs	r3, #1
 80045b0:	e000      	b.n	80045b4 <xQueueGenericSend+0x74>
 80045b2:	2300      	movs	r3, #0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10a      	bne.n	80045ce <xQueueGenericSend+0x8e>
	__asm volatile
 80045b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045bc:	f383 8811 	msr	BASEPRI, r3
 80045c0:	f3bf 8f6f 	isb	sy
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	623b      	str	r3, [r7, #32]
}
 80045ca:	bf00      	nop
 80045cc:	e7fe      	b.n	80045cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045ce:	f001 fa09 	bl	80059e4 <xTaskGetSchedulerState>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d102      	bne.n	80045de <xQueueGenericSend+0x9e>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <xQueueGenericSend+0xa2>
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <xQueueGenericSend+0xa4>
 80045e2:	2300      	movs	r3, #0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10a      	bne.n	80045fe <xQueueGenericSend+0xbe>
	__asm volatile
 80045e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ec:	f383 8811 	msr	BASEPRI, r3
 80045f0:	f3bf 8f6f 	isb	sy
 80045f4:	f3bf 8f4f 	dsb	sy
 80045f8:	61fb      	str	r3, [r7, #28]
}
 80045fa:	bf00      	nop
 80045fc:	e7fe      	b.n	80045fc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045fe:	f001 ff49 	bl	8006494 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460a:	429a      	cmp	r2, r3
 800460c:	d302      	bcc.n	8004614 <xQueueGenericSend+0xd4>
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b02      	cmp	r3, #2
 8004612:	d129      	bne.n	8004668 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	68b9      	ldr	r1, [r7, #8]
 8004618:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800461a:	f000 fa0b 	bl	8004a34 <prvCopyDataToQueue>
 800461e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	2b00      	cmp	r3, #0
 8004626:	d010      	beq.n	800464a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462a:	3324      	adds	r3, #36	; 0x24
 800462c:	4618      	mov	r0, r3
 800462e:	f001 f817 	bl	8005660 <xTaskRemoveFromEventList>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d013      	beq.n	8004660 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004638:	4b3f      	ldr	r3, [pc, #252]	; (8004738 <xQueueGenericSend+0x1f8>)
 800463a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	e00a      	b.n	8004660 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800464a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464c:	2b00      	cmp	r3, #0
 800464e:	d007      	beq.n	8004660 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004650:	4b39      	ldr	r3, [pc, #228]	; (8004738 <xQueueGenericSend+0x1f8>)
 8004652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004660:	f001 ff48 	bl	80064f4 <vPortExitCritical>
				return pdPASS;
 8004664:	2301      	movs	r3, #1
 8004666:	e063      	b.n	8004730 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d103      	bne.n	8004676 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800466e:	f001 ff41 	bl	80064f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004672:	2300      	movs	r3, #0
 8004674:	e05c      	b.n	8004730 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004678:	2b00      	cmp	r3, #0
 800467a:	d106      	bne.n	800468a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800467c:	f107 0314 	add.w	r3, r7, #20
 8004680:	4618      	mov	r0, r3
 8004682:	f001 f851 	bl	8005728 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004686:	2301      	movs	r3, #1
 8004688:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800468a:	f001 ff33 	bl	80064f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800468e:	f000 fda1 	bl	80051d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004692:	f001 feff 	bl	8006494 <vPortEnterCritical>
 8004696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004698:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800469c:	b25b      	sxtb	r3, r3
 800469e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046a2:	d103      	bne.n	80046ac <xQueueGenericSend+0x16c>
 80046a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046b2:	b25b      	sxtb	r3, r3
 80046b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046b8:	d103      	bne.n	80046c2 <xQueueGenericSend+0x182>
 80046ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046c2:	f001 ff17 	bl	80064f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046c6:	1d3a      	adds	r2, r7, #4
 80046c8:	f107 0314 	add.w	r3, r7, #20
 80046cc:	4611      	mov	r1, r2
 80046ce:	4618      	mov	r0, r3
 80046d0:	f001 f840 	bl	8005754 <xTaskCheckForTimeOut>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d124      	bne.n	8004724 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80046da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046dc:	f000 faa2 	bl	8004c24 <prvIsQueueFull>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d018      	beq.n	8004718 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80046e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e8:	3310      	adds	r3, #16
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	4611      	mov	r1, r2
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 ff66 	bl	80055c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80046f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046f6:	f000 fa2d 	bl	8004b54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80046fa:	f000 fd79 	bl	80051f0 <xTaskResumeAll>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	f47f af7c 	bne.w	80045fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004706:	4b0c      	ldr	r3, [pc, #48]	; (8004738 <xQueueGenericSend+0x1f8>)
 8004708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	e772      	b.n	80045fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004718:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800471a:	f000 fa1b 	bl	8004b54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800471e:	f000 fd67 	bl	80051f0 <xTaskResumeAll>
 8004722:	e76c      	b.n	80045fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004726:	f000 fa15 	bl	8004b54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800472a:	f000 fd61 	bl	80051f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800472e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004730:	4618      	mov	r0, r3
 8004732:	3738      	adds	r7, #56	; 0x38
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	e000ed04 	.word	0xe000ed04

0800473c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b090      	sub	sp, #64	; 0x40
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
 8004748:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800474e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10a      	bne.n	800476a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004758:	f383 8811 	msr	BASEPRI, r3
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004766:	bf00      	nop
 8004768:	e7fe      	b.n	8004768 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d103      	bne.n	8004778 <xQueueGenericSendFromISR+0x3c>
 8004770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <xQueueGenericSendFromISR+0x40>
 8004778:	2301      	movs	r3, #1
 800477a:	e000      	b.n	800477e <xQueueGenericSendFromISR+0x42>
 800477c:	2300      	movs	r3, #0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10a      	bne.n	8004798 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004786:	f383 8811 	msr	BASEPRI, r3
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004794:	bf00      	nop
 8004796:	e7fe      	b.n	8004796 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	2b02      	cmp	r3, #2
 800479c:	d103      	bne.n	80047a6 <xQueueGenericSendFromISR+0x6a>
 800479e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d101      	bne.n	80047aa <xQueueGenericSendFromISR+0x6e>
 80047a6:	2301      	movs	r3, #1
 80047a8:	e000      	b.n	80047ac <xQueueGenericSendFromISR+0x70>
 80047aa:	2300      	movs	r3, #0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10a      	bne.n	80047c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80047b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	623b      	str	r3, [r7, #32]
}
 80047c2:	bf00      	nop
 80047c4:	e7fe      	b.n	80047c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047c6:	f001 ff47 	bl	8006658 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80047ca:	f3ef 8211 	mrs	r2, BASEPRI
 80047ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	61fa      	str	r2, [r7, #28]
 80047e0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80047e2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047e4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d302      	bcc.n	80047f8 <xQueueGenericSendFromISR+0xbc>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d12f      	bne.n	8004858 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80047f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	68b9      	ldr	r1, [r7, #8]
 800480c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800480e:	f000 f911 	bl	8004a34 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004812:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004816:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800481a:	d112      	bne.n	8004842 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800481c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	2b00      	cmp	r3, #0
 8004822:	d016      	beq.n	8004852 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004826:	3324      	adds	r3, #36	; 0x24
 8004828:	4618      	mov	r0, r3
 800482a:	f000 ff19 	bl	8005660 <xTaskRemoveFromEventList>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00e      	beq.n	8004852 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00b      	beq.n	8004852 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	e007      	b.n	8004852 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004842:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004846:	3301      	adds	r3, #1
 8004848:	b2db      	uxtb	r3, r3
 800484a:	b25a      	sxtb	r2, r3
 800484c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004852:	2301      	movs	r3, #1
 8004854:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004856:	e001      	b.n	800485c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004858:	2300      	movs	r3, #0
 800485a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800485c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004866:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800486a:	4618      	mov	r0, r3
 800486c:	3740      	adds	r7, #64	; 0x40
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
	...

08004874 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b08c      	sub	sp, #48	; 0x30
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004880:	2300      	movs	r3, #0
 8004882:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10a      	bne.n	80048a4 <xQueueReceive+0x30>
	__asm volatile
 800488e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004892:	f383 8811 	msr	BASEPRI, r3
 8004896:	f3bf 8f6f 	isb	sy
 800489a:	f3bf 8f4f 	dsb	sy
 800489e:	623b      	str	r3, [r7, #32]
}
 80048a0:	bf00      	nop
 80048a2:	e7fe      	b.n	80048a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d103      	bne.n	80048b2 <xQueueReceive+0x3e>
 80048aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <xQueueReceive+0x42>
 80048b2:	2301      	movs	r3, #1
 80048b4:	e000      	b.n	80048b8 <xQueueReceive+0x44>
 80048b6:	2300      	movs	r3, #0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10a      	bne.n	80048d2 <xQueueReceive+0x5e>
	__asm volatile
 80048bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c0:	f383 8811 	msr	BASEPRI, r3
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	61fb      	str	r3, [r7, #28]
}
 80048ce:	bf00      	nop
 80048d0:	e7fe      	b.n	80048d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048d2:	f001 f887 	bl	80059e4 <xTaskGetSchedulerState>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d102      	bne.n	80048e2 <xQueueReceive+0x6e>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <xQueueReceive+0x72>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <xQueueReceive+0x74>
 80048e6:	2300      	movs	r3, #0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10a      	bne.n	8004902 <xQueueReceive+0x8e>
	__asm volatile
 80048ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f0:	f383 8811 	msr	BASEPRI, r3
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	61bb      	str	r3, [r7, #24]
}
 80048fe:	bf00      	nop
 8004900:	e7fe      	b.n	8004900 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004902:	f001 fdc7 	bl	8006494 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	2b00      	cmp	r3, #0
 8004910:	d01f      	beq.n	8004952 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004912:	68b9      	ldr	r1, [r7, #8]
 8004914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004916:	f000 f8f7 	bl	8004b08 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	1e5a      	subs	r2, r3, #1
 800491e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004920:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00f      	beq.n	800494a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800492a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492c:	3310      	adds	r3, #16
 800492e:	4618      	mov	r0, r3
 8004930:	f000 fe96 	bl	8005660 <xTaskRemoveFromEventList>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d007      	beq.n	800494a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800493a:	4b3d      	ldr	r3, [pc, #244]	; (8004a30 <xQueueReceive+0x1bc>)
 800493c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800494a:	f001 fdd3 	bl	80064f4 <vPortExitCritical>
				return pdPASS;
 800494e:	2301      	movs	r3, #1
 8004950:	e069      	b.n	8004a26 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d103      	bne.n	8004960 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004958:	f001 fdcc 	bl	80064f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800495c:	2300      	movs	r3, #0
 800495e:	e062      	b.n	8004a26 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004962:	2b00      	cmp	r3, #0
 8004964:	d106      	bne.n	8004974 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004966:	f107 0310 	add.w	r3, r7, #16
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fedc 	bl	8005728 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004970:	2301      	movs	r3, #1
 8004972:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004974:	f001 fdbe 	bl	80064f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004978:	f000 fc2c 	bl	80051d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800497c:	f001 fd8a 	bl	8006494 <vPortEnterCritical>
 8004980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004982:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004986:	b25b      	sxtb	r3, r3
 8004988:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800498c:	d103      	bne.n	8004996 <xQueueReceive+0x122>
 800498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004998:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800499c:	b25b      	sxtb	r3, r3
 800499e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049a2:	d103      	bne.n	80049ac <xQueueReceive+0x138>
 80049a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049ac:	f001 fda2 	bl	80064f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049b0:	1d3a      	adds	r2, r7, #4
 80049b2:	f107 0310 	add.w	r3, r7, #16
 80049b6:	4611      	mov	r1, r2
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 fecb 	bl	8005754 <xTaskCheckForTimeOut>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d123      	bne.n	8004a0c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049c6:	f000 f917 	bl	8004bf8 <prvIsQueueEmpty>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d017      	beq.n	8004a00 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d2:	3324      	adds	r3, #36	; 0x24
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	4611      	mov	r1, r2
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 fdf1 	bl	80055c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80049de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049e0:	f000 f8b8 	bl	8004b54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80049e4:	f000 fc04 	bl	80051f0 <xTaskResumeAll>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d189      	bne.n	8004902 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80049ee:	4b10      	ldr	r3, [pc, #64]	; (8004a30 <xQueueReceive+0x1bc>)
 80049f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	e780      	b.n	8004902 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a02:	f000 f8a7 	bl	8004b54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a06:	f000 fbf3 	bl	80051f0 <xTaskResumeAll>
 8004a0a:	e77a      	b.n	8004902 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a0e:	f000 f8a1 	bl	8004b54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a12:	f000 fbed 	bl	80051f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a18:	f000 f8ee 	bl	8004bf8 <prvIsQueueEmpty>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f43f af6f 	beq.w	8004902 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3730      	adds	r7, #48	; 0x30
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	e000ed04 	.word	0xe000ed04

08004a34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a40:	2300      	movs	r3, #0
 8004a42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10d      	bne.n	8004a6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d14d      	bne.n	8004af6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 ffde 	bl	8005a20 <xTaskPriorityDisinherit>
 8004a64:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	609a      	str	r2, [r3, #8]
 8004a6c:	e043      	b.n	8004af6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d119      	bne.n	8004aa8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6858      	ldr	r0, [r3, #4]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	68b9      	ldr	r1, [r7, #8]
 8004a80:	f002 f83a 	bl	8006af8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	441a      	add	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d32b      	bcc.n	8004af6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	605a      	str	r2, [r3, #4]
 8004aa6:	e026      	b.n	8004af6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	68d8      	ldr	r0, [r3, #12]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	68b9      	ldr	r1, [r7, #8]
 8004ab4:	f002 f820 	bl	8006af8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac0:	425b      	negs	r3, r3
 8004ac2:	441a      	add	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	68da      	ldr	r2, [r3, #12]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d207      	bcs.n	8004ae4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004adc:	425b      	negs	r3, r3
 8004ade:	441a      	add	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d105      	bne.n	8004af6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d002      	beq.n	8004af6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	3b01      	subs	r3, #1
 8004af4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004afe:	697b      	ldr	r3, [r7, #20]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3718      	adds	r7, #24
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d018      	beq.n	8004b4c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	441a      	add	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d303      	bcc.n	8004b3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68d9      	ldr	r1, [r3, #12]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b44:	461a      	mov	r2, r3
 8004b46:	6838      	ldr	r0, [r7, #0]
 8004b48:	f001 ffd6 	bl	8006af8 <memcpy>
	}
}
 8004b4c:	bf00      	nop
 8004b4e:	3708      	adds	r7, #8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b5c:	f001 fc9a 	bl	8006494 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b68:	e011      	b.n	8004b8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d012      	beq.n	8004b98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	3324      	adds	r3, #36	; 0x24
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 fd72 	bl	8005660 <xTaskRemoveFromEventList>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b82:	f000 fe49 	bl	8005818 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b86:	7bfb      	ldrb	r3, [r7, #15]
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	dce9      	bgt.n	8004b6a <prvUnlockQueue+0x16>
 8004b96:	e000      	b.n	8004b9a <prvUnlockQueue+0x46>
					break;
 8004b98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	22ff      	movs	r2, #255	; 0xff
 8004b9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004ba2:	f001 fca7 	bl	80064f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004ba6:	f001 fc75 	bl	8006494 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bb0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bb2:	e011      	b.n	8004bd8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d012      	beq.n	8004be2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3310      	adds	r3, #16
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 fd4d 	bl	8005660 <xTaskRemoveFromEventList>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004bcc:	f000 fe24 	bl	8005818 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004bd0:	7bbb      	ldrb	r3, [r7, #14]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	dce9      	bgt.n	8004bb4 <prvUnlockQueue+0x60>
 8004be0:	e000      	b.n	8004be4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004be2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	22ff      	movs	r2, #255	; 0xff
 8004be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004bec:	f001 fc82 	bl	80064f4 <vPortExitCritical>
}
 8004bf0:	bf00      	nop
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c00:	f001 fc48 	bl	8006494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d102      	bne.n	8004c12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	60fb      	str	r3, [r7, #12]
 8004c10:	e001      	b.n	8004c16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c16:	f001 fc6d 	bl	80064f4 <vPortExitCritical>

	return xReturn;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c2c:	f001 fc32 	bl	8006494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d102      	bne.n	8004c42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	e001      	b.n	8004c46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c42:	2300      	movs	r3, #0
 8004c44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c46:	f001 fc55 	bl	80064f4 <vPortExitCritical>

	return xReturn;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60fb      	str	r3, [r7, #12]
 8004c62:	e014      	b.n	8004c8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c64:	4a0f      	ldr	r2, [pc, #60]	; (8004ca4 <vQueueAddToRegistry+0x50>)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10b      	bne.n	8004c88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c70:	490c      	ldr	r1, [pc, #48]	; (8004ca4 <vQueueAddToRegistry+0x50>)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004c7a:	4a0a      	ldr	r2, [pc, #40]	; (8004ca4 <vQueueAddToRegistry+0x50>)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	4413      	add	r3, r2
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004c86:	e006      	b.n	8004c96 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2b07      	cmp	r3, #7
 8004c92:	d9e7      	bls.n	8004c64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004c94:	bf00      	nop
 8004c96:	bf00      	nop
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	200008f0 	.word	0x200008f0

08004ca8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004cb8:	f001 fbec 	bl	8006494 <vPortEnterCritical>
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cc2:	b25b      	sxtb	r3, r3
 8004cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cc8:	d103      	bne.n	8004cd2 <vQueueWaitForMessageRestricted+0x2a>
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cd8:	b25b      	sxtb	r3, r3
 8004cda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cde:	d103      	bne.n	8004ce8 <vQueueWaitForMessageRestricted+0x40>
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ce8:	f001 fc04 	bl	80064f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d106      	bne.n	8004d02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	3324      	adds	r3, #36	; 0x24
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	68b9      	ldr	r1, [r7, #8]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f000 fc83 	bl	8005608 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004d02:	6978      	ldr	r0, [r7, #20]
 8004d04:	f7ff ff26 	bl	8004b54 <prvUnlockQueue>
	}
 8004d08:	bf00      	nop
 8004d0a:	3718      	adds	r7, #24
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b08e      	sub	sp, #56	; 0x38
 8004d14:	af04      	add	r7, sp, #16
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
 8004d1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10a      	bne.n	8004d3a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d28:	f383 8811 	msr	BASEPRI, r3
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	623b      	str	r3, [r7, #32]
}
 8004d36:	bf00      	nop
 8004d38:	e7fe      	b.n	8004d38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10a      	bne.n	8004d56 <xTaskCreateStatic+0x46>
	__asm volatile
 8004d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	61fb      	str	r3, [r7, #28]
}
 8004d52:	bf00      	nop
 8004d54:	e7fe      	b.n	8004d54 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d56:	23c0      	movs	r3, #192	; 0xc0
 8004d58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	2bc0      	cmp	r3, #192	; 0xc0
 8004d5e:	d00a      	beq.n	8004d76 <xTaskCreateStatic+0x66>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	61bb      	str	r3, [r7, #24]
}
 8004d72:	bf00      	nop
 8004d74:	e7fe      	b.n	8004d74 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004d76:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d01e      	beq.n	8004dbc <xTaskCreateStatic+0xac>
 8004d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d01b      	beq.n	8004dbc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d86:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d8c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	2202      	movs	r2, #2
 8004d92:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d96:	2300      	movs	r3, #0
 8004d98:	9303      	str	r3, [sp, #12]
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	9302      	str	r3, [sp, #8]
 8004d9e:	f107 0314 	add.w	r3, r7, #20
 8004da2:	9301      	str	r3, [sp, #4]
 8004da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	68b9      	ldr	r1, [r7, #8]
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f000 f850 	bl	8004e54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004db4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004db6:	f000 f8f7 	bl	8004fa8 <prvAddNewTaskToReadyList>
 8004dba:	e001      	b.n	8004dc0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004dc0:	697b      	ldr	r3, [r7, #20]
	}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3728      	adds	r7, #40	; 0x28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b08c      	sub	sp, #48	; 0x30
 8004dce:	af04      	add	r7, sp, #16
 8004dd0:	60f8      	str	r0, [r7, #12]
 8004dd2:	60b9      	str	r1, [r7, #8]
 8004dd4:	603b      	str	r3, [r7, #0]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004dda:	88fb      	ldrh	r3, [r7, #6]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4618      	mov	r0, r3
 8004de0:	f001 fc7a 	bl	80066d8 <pvPortMalloc>
 8004de4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00e      	beq.n	8004e0a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004dec:	20c0      	movs	r0, #192	; 0xc0
 8004dee:	f001 fc73 	bl	80066d8 <pvPortMalloc>
 8004df2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	631a      	str	r2, [r3, #48]	; 0x30
 8004e00:	e005      	b.n	8004e0e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e02:	6978      	ldr	r0, [r7, #20]
 8004e04:	f001 fd34 	bl	8006870 <vPortFree>
 8004e08:	e001      	b.n	8004e0e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d017      	beq.n	8004e44 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e1c:	88fa      	ldrh	r2, [r7, #6]
 8004e1e:	2300      	movs	r3, #0
 8004e20:	9303      	str	r3, [sp, #12]
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	9302      	str	r3, [sp, #8]
 8004e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e28:	9301      	str	r3, [sp, #4]
 8004e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68b9      	ldr	r1, [r7, #8]
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 f80e 	bl	8004e54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e38:	69f8      	ldr	r0, [r7, #28]
 8004e3a:	f000 f8b5 	bl	8004fa8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	61bb      	str	r3, [r7, #24]
 8004e42:	e002      	b.n	8004e4a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e48:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e4a:	69bb      	ldr	r3, [r7, #24]
	}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3720      	adds	r7, #32
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b088      	sub	sp, #32
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
 8004e60:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e64:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	21a5      	movs	r1, #165	; 0xa5
 8004e6e:	f001 fe51 	bl	8006b14 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	f023 0307 	bic.w	r3, r3, #7
 8004e8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00a      	beq.n	8004eac <prvInitialiseNewTask+0x58>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	617b      	str	r3, [r7, #20]
}
 8004ea8:	bf00      	nop
 8004eaa:	e7fe      	b.n	8004eaa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d01f      	beq.n	8004ef2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61fb      	str	r3, [r7, #28]
 8004eb6:	e012      	b.n	8004ede <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	7819      	ldrb	r1, [r3, #0]
 8004ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	3334      	adds	r3, #52	; 0x34
 8004ec8:	460a      	mov	r2, r1
 8004eca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d006      	beq.n	8004ee6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	3301      	adds	r3, #1
 8004edc:	61fb      	str	r3, [r7, #28]
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	2b0f      	cmp	r3, #15
 8004ee2:	d9e9      	bls.n	8004eb8 <prvInitialiseNewTask+0x64>
 8004ee4:	e000      	b.n	8004ee8 <prvInitialiseNewTask+0x94>
			{
				break;
 8004ee6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ef0:	e003      	b.n	8004efa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efc:	2b37      	cmp	r3, #55	; 0x37
 8004efe:	d901      	bls.n	8004f04 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f00:	2337      	movs	r3, #55	; 0x37
 8004f02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f0e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f12:	2200      	movs	r2, #0
 8004f14:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f18:	3304      	adds	r3, #4
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff f978 	bl	8004210 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f22:	3318      	adds	r3, #24
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7ff f973 	bl	8004210 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8004f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f42:	2200      	movs	r2, #0
 8004f44:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f58:	3358      	adds	r3, #88	; 0x58
 8004f5a:	2260      	movs	r2, #96	; 0x60
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f001 fdd8 	bl	8006b14 <memset>
 8004f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f66:	4a0d      	ldr	r2, [pc, #52]	; (8004f9c <prvInitialiseNewTask+0x148>)
 8004f68:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6c:	4a0c      	ldr	r2, [pc, #48]	; (8004fa0 <prvInitialiseNewTask+0x14c>)
 8004f6e:	661a      	str	r2, [r3, #96]	; 0x60
 8004f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f72:	4a0c      	ldr	r2, [pc, #48]	; (8004fa4 <prvInitialiseNewTask+0x150>)
 8004f74:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	68f9      	ldr	r1, [r7, #12]
 8004f7a:	69b8      	ldr	r0, [r7, #24]
 8004f7c:	f001 f960 	bl	8006240 <pxPortInitialiseStack>
 8004f80:	4602      	mov	r2, r0
 8004f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f84:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d002      	beq.n	8004f92 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f92:	bf00      	nop
 8004f94:	3720      	adds	r7, #32
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	08006dd0 	.word	0x08006dd0
 8004fa0:	08006df0 	.word	0x08006df0
 8004fa4:	08006db0 	.word	0x08006db0

08004fa8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004fb0:	f001 fa70 	bl	8006494 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004fb4:	4b2d      	ldr	r3, [pc, #180]	; (800506c <prvAddNewTaskToReadyList+0xc4>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	4a2c      	ldr	r2, [pc, #176]	; (800506c <prvAddNewTaskToReadyList+0xc4>)
 8004fbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004fbe:	4b2c      	ldr	r3, [pc, #176]	; (8005070 <prvAddNewTaskToReadyList+0xc8>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d109      	bne.n	8004fda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004fc6:	4a2a      	ldr	r2, [pc, #168]	; (8005070 <prvAddNewTaskToReadyList+0xc8>)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004fcc:	4b27      	ldr	r3, [pc, #156]	; (800506c <prvAddNewTaskToReadyList+0xc4>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d110      	bne.n	8004ff6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004fd4:	f000 fc44 	bl	8005860 <prvInitialiseTaskLists>
 8004fd8:	e00d      	b.n	8004ff6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004fda:	4b26      	ldr	r3, [pc, #152]	; (8005074 <prvAddNewTaskToReadyList+0xcc>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d109      	bne.n	8004ff6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004fe2:	4b23      	ldr	r3, [pc, #140]	; (8005070 <prvAddNewTaskToReadyList+0xc8>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d802      	bhi.n	8004ff6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ff0:	4a1f      	ldr	r2, [pc, #124]	; (8005070 <prvAddNewTaskToReadyList+0xc8>)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004ff6:	4b20      	ldr	r3, [pc, #128]	; (8005078 <prvAddNewTaskToReadyList+0xd0>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	4a1e      	ldr	r2, [pc, #120]	; (8005078 <prvAddNewTaskToReadyList+0xd0>)
 8004ffe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005000:	4b1d      	ldr	r3, [pc, #116]	; (8005078 <prvAddNewTaskToReadyList+0xd0>)
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500c:	4b1b      	ldr	r3, [pc, #108]	; (800507c <prvAddNewTaskToReadyList+0xd4>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	429a      	cmp	r2, r3
 8005012:	d903      	bls.n	800501c <prvAddNewTaskToReadyList+0x74>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005018:	4a18      	ldr	r2, [pc, #96]	; (800507c <prvAddNewTaskToReadyList+0xd4>)
 800501a:	6013      	str	r3, [r2, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005020:	4613      	mov	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4a15      	ldr	r2, [pc, #84]	; (8005080 <prvAddNewTaskToReadyList+0xd8>)
 800502a:	441a      	add	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3304      	adds	r3, #4
 8005030:	4619      	mov	r1, r3
 8005032:	4610      	mov	r0, r2
 8005034:	f7ff f8f9 	bl	800422a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005038:	f001 fa5c 	bl	80064f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800503c:	4b0d      	ldr	r3, [pc, #52]	; (8005074 <prvAddNewTaskToReadyList+0xcc>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00e      	beq.n	8005062 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005044:	4b0a      	ldr	r3, [pc, #40]	; (8005070 <prvAddNewTaskToReadyList+0xc8>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504e:	429a      	cmp	r2, r3
 8005050:	d207      	bcs.n	8005062 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005052:	4b0c      	ldr	r3, [pc, #48]	; (8005084 <prvAddNewTaskToReadyList+0xdc>)
 8005054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005062:	bf00      	nop
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	20000e04 	.word	0x20000e04
 8005070:	20000930 	.word	0x20000930
 8005074:	20000e10 	.word	0x20000e10
 8005078:	20000e20 	.word	0x20000e20
 800507c:	20000e0c 	.word	0x20000e0c
 8005080:	20000934 	.word	0x20000934
 8005084:	e000ed04 	.word	0xe000ed04

08005088 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005090:	2300      	movs	r3, #0
 8005092:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d017      	beq.n	80050ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800509a:	4b13      	ldr	r3, [pc, #76]	; (80050e8 <vTaskDelay+0x60>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00a      	beq.n	80050b8 <vTaskDelay+0x30>
	__asm volatile
 80050a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	60bb      	str	r3, [r7, #8]
}
 80050b4:	bf00      	nop
 80050b6:	e7fe      	b.n	80050b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80050b8:	f000 f88c 	bl	80051d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80050bc:	2100      	movs	r1, #0
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 fd1c 	bl	8005afc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80050c4:	f000 f894 	bl	80051f0 <xTaskResumeAll>
 80050c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d107      	bne.n	80050e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80050d0:	4b06      	ldr	r3, [pc, #24]	; (80050ec <vTaskDelay+0x64>)
 80050d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050e0:	bf00      	nop
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	20000e2c 	.word	0x20000e2c
 80050ec:	e000ed04 	.word	0xe000ed04

080050f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b08a      	sub	sp, #40	; 0x28
 80050f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80050f6:	2300      	movs	r3, #0
 80050f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80050fa:	2300      	movs	r3, #0
 80050fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80050fe:	463a      	mov	r2, r7
 8005100:	1d39      	adds	r1, r7, #4
 8005102:	f107 0308 	add.w	r3, r7, #8
 8005106:	4618      	mov	r0, r3
 8005108:	f7ff f82e 	bl	8004168 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800510c:	6839      	ldr	r1, [r7, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	9202      	str	r2, [sp, #8]
 8005114:	9301      	str	r3, [sp, #4]
 8005116:	2300      	movs	r3, #0
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	2300      	movs	r3, #0
 800511c:	460a      	mov	r2, r1
 800511e:	4925      	ldr	r1, [pc, #148]	; (80051b4 <vTaskStartScheduler+0xc4>)
 8005120:	4825      	ldr	r0, [pc, #148]	; (80051b8 <vTaskStartScheduler+0xc8>)
 8005122:	f7ff fdf5 	bl	8004d10 <xTaskCreateStatic>
 8005126:	4603      	mov	r3, r0
 8005128:	4a24      	ldr	r2, [pc, #144]	; (80051bc <vTaskStartScheduler+0xcc>)
 800512a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800512c:	4b23      	ldr	r3, [pc, #140]	; (80051bc <vTaskStartScheduler+0xcc>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005134:	2301      	movs	r3, #1
 8005136:	617b      	str	r3, [r7, #20]
 8005138:	e001      	b.n	800513e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800513a:	2300      	movs	r3, #0
 800513c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d102      	bne.n	800514a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005144:	f000 fd2e 	bl	8005ba4 <xTimerCreateTimerTask>
 8005148:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d11d      	bne.n	800518c <vTaskStartScheduler+0x9c>
	__asm volatile
 8005150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	613b      	str	r3, [r7, #16]
}
 8005162:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005164:	4b16      	ldr	r3, [pc, #88]	; (80051c0 <vTaskStartScheduler+0xd0>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3358      	adds	r3, #88	; 0x58
 800516a:	4a16      	ldr	r2, [pc, #88]	; (80051c4 <vTaskStartScheduler+0xd4>)
 800516c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800516e:	4b16      	ldr	r3, [pc, #88]	; (80051c8 <vTaskStartScheduler+0xd8>)
 8005170:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005174:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005176:	4b15      	ldr	r3, [pc, #84]	; (80051cc <vTaskStartScheduler+0xdc>)
 8005178:	2201      	movs	r2, #1
 800517a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800517c:	4b14      	ldr	r3, [pc, #80]	; (80051d0 <vTaskStartScheduler+0xe0>)
 800517e:	2200      	movs	r2, #0
 8005180:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8005182:	f7fb f9a7 	bl	80004d4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005186:	f001 f8e3 	bl	8006350 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800518a:	e00e      	b.n	80051aa <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005192:	d10a      	bne.n	80051aa <vTaskStartScheduler+0xba>
	__asm volatile
 8005194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	60fb      	str	r3, [r7, #12]
}
 80051a6:	bf00      	nop
 80051a8:	e7fe      	b.n	80051a8 <vTaskStartScheduler+0xb8>
}
 80051aa:	bf00      	nop
 80051ac:	3718      	adds	r7, #24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	08006ce0 	.word	0x08006ce0
 80051b8:	08005831 	.word	0x08005831
 80051bc:	20000e28 	.word	0x20000e28
 80051c0:	20000930 	.word	0x20000930
 80051c4:	20000010 	.word	0x20000010
 80051c8:	20000e24 	.word	0x20000e24
 80051cc:	20000e10 	.word	0x20000e10
 80051d0:	20000e08 	.word	0x20000e08

080051d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80051d8:	4b04      	ldr	r3, [pc, #16]	; (80051ec <vTaskSuspendAll+0x18>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3301      	adds	r3, #1
 80051de:	4a03      	ldr	r2, [pc, #12]	; (80051ec <vTaskSuspendAll+0x18>)
 80051e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80051e2:	bf00      	nop
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	20000e2c 	.word	0x20000e2c

080051f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80051f6:	2300      	movs	r3, #0
 80051f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80051fa:	2300      	movs	r3, #0
 80051fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80051fe:	4b42      	ldr	r3, [pc, #264]	; (8005308 <xTaskResumeAll+0x118>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10a      	bne.n	800521c <xTaskResumeAll+0x2c>
	__asm volatile
 8005206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520a:	f383 8811 	msr	BASEPRI, r3
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	603b      	str	r3, [r7, #0]
}
 8005218:	bf00      	nop
 800521a:	e7fe      	b.n	800521a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800521c:	f001 f93a 	bl	8006494 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005220:	4b39      	ldr	r3, [pc, #228]	; (8005308 <xTaskResumeAll+0x118>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3b01      	subs	r3, #1
 8005226:	4a38      	ldr	r2, [pc, #224]	; (8005308 <xTaskResumeAll+0x118>)
 8005228:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800522a:	4b37      	ldr	r3, [pc, #220]	; (8005308 <xTaskResumeAll+0x118>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d162      	bne.n	80052f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005232:	4b36      	ldr	r3, [pc, #216]	; (800530c <xTaskResumeAll+0x11c>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d05e      	beq.n	80052f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800523a:	e02f      	b.n	800529c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800523c:	4b34      	ldr	r3, [pc, #208]	; (8005310 <xTaskResumeAll+0x120>)
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	3318      	adds	r3, #24
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff f84b 	bl	80042e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	3304      	adds	r3, #4
 8005252:	4618      	mov	r0, r3
 8005254:	f7ff f846 	bl	80042e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800525c:	4b2d      	ldr	r3, [pc, #180]	; (8005314 <xTaskResumeAll+0x124>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	429a      	cmp	r2, r3
 8005262:	d903      	bls.n	800526c <xTaskResumeAll+0x7c>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	4a2a      	ldr	r2, [pc, #168]	; (8005314 <xTaskResumeAll+0x124>)
 800526a:	6013      	str	r3, [r2, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005270:	4613      	mov	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4a27      	ldr	r2, [pc, #156]	; (8005318 <xTaskResumeAll+0x128>)
 800527a:	441a      	add	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3304      	adds	r3, #4
 8005280:	4619      	mov	r1, r3
 8005282:	4610      	mov	r0, r2
 8005284:	f7fe ffd1 	bl	800422a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800528c:	4b23      	ldr	r3, [pc, #140]	; (800531c <xTaskResumeAll+0x12c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005292:	429a      	cmp	r2, r3
 8005294:	d302      	bcc.n	800529c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005296:	4b22      	ldr	r3, [pc, #136]	; (8005320 <xTaskResumeAll+0x130>)
 8005298:	2201      	movs	r2, #1
 800529a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800529c:	4b1c      	ldr	r3, [pc, #112]	; (8005310 <xTaskResumeAll+0x120>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1cb      	bne.n	800523c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80052aa:	f000 fb7b 	bl	80059a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80052ae:	4b1d      	ldr	r3, [pc, #116]	; (8005324 <xTaskResumeAll+0x134>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d010      	beq.n	80052dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80052ba:	f000 f847 	bl	800534c <xTaskIncrementTick>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d002      	beq.n	80052ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80052c4:	4b16      	ldr	r3, [pc, #88]	; (8005320 <xTaskResumeAll+0x130>)
 80052c6:	2201      	movs	r2, #1
 80052c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	3b01      	subs	r3, #1
 80052ce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1f1      	bne.n	80052ba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80052d6:	4b13      	ldr	r3, [pc, #76]	; (8005324 <xTaskResumeAll+0x134>)
 80052d8:	2200      	movs	r2, #0
 80052da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80052dc:	4b10      	ldr	r3, [pc, #64]	; (8005320 <xTaskResumeAll+0x130>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d009      	beq.n	80052f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80052e4:	2301      	movs	r3, #1
 80052e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80052e8:	4b0f      	ldr	r3, [pc, #60]	; (8005328 <xTaskResumeAll+0x138>)
 80052ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052f8:	f001 f8fc 	bl	80064f4 <vPortExitCritical>

	return xAlreadyYielded;
 80052fc:	68bb      	ldr	r3, [r7, #8]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20000e2c 	.word	0x20000e2c
 800530c:	20000e04 	.word	0x20000e04
 8005310:	20000dc4 	.word	0x20000dc4
 8005314:	20000e0c 	.word	0x20000e0c
 8005318:	20000934 	.word	0x20000934
 800531c:	20000930 	.word	0x20000930
 8005320:	20000e18 	.word	0x20000e18
 8005324:	20000e14 	.word	0x20000e14
 8005328:	e000ed04 	.word	0xe000ed04

0800532c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005332:	4b05      	ldr	r3, [pc, #20]	; (8005348 <xTaskGetTickCount+0x1c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005338:	687b      	ldr	r3, [r7, #4]
}
 800533a:	4618      	mov	r0, r3
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	20000e08 	.word	0x20000e08

0800534c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005352:	2300      	movs	r3, #0
 8005354:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005356:	4b4f      	ldr	r3, [pc, #316]	; (8005494 <xTaskIncrementTick+0x148>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	f040 808f 	bne.w	800547e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005360:	4b4d      	ldr	r3, [pc, #308]	; (8005498 <xTaskIncrementTick+0x14c>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3301      	adds	r3, #1
 8005366:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005368:	4a4b      	ldr	r2, [pc, #300]	; (8005498 <xTaskIncrementTick+0x14c>)
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d120      	bne.n	80053b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005374:	4b49      	ldr	r3, [pc, #292]	; (800549c <xTaskIncrementTick+0x150>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00a      	beq.n	8005394 <xTaskIncrementTick+0x48>
	__asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	603b      	str	r3, [r7, #0]
}
 8005390:	bf00      	nop
 8005392:	e7fe      	b.n	8005392 <xTaskIncrementTick+0x46>
 8005394:	4b41      	ldr	r3, [pc, #260]	; (800549c <xTaskIncrementTick+0x150>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	60fb      	str	r3, [r7, #12]
 800539a:	4b41      	ldr	r3, [pc, #260]	; (80054a0 <xTaskIncrementTick+0x154>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a3f      	ldr	r2, [pc, #252]	; (800549c <xTaskIncrementTick+0x150>)
 80053a0:	6013      	str	r3, [r2, #0]
 80053a2:	4a3f      	ldr	r2, [pc, #252]	; (80054a0 <xTaskIncrementTick+0x154>)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6013      	str	r3, [r2, #0]
 80053a8:	4b3e      	ldr	r3, [pc, #248]	; (80054a4 <xTaskIncrementTick+0x158>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3301      	adds	r3, #1
 80053ae:	4a3d      	ldr	r2, [pc, #244]	; (80054a4 <xTaskIncrementTick+0x158>)
 80053b0:	6013      	str	r3, [r2, #0]
 80053b2:	f000 faf7 	bl	80059a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80053b6:	4b3c      	ldr	r3, [pc, #240]	; (80054a8 <xTaskIncrementTick+0x15c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d349      	bcc.n	8005454 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053c0:	4b36      	ldr	r3, [pc, #216]	; (800549c <xTaskIncrementTick+0x150>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d104      	bne.n	80053d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053ca:	4b37      	ldr	r3, [pc, #220]	; (80054a8 <xTaskIncrementTick+0x15c>)
 80053cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053d0:	601a      	str	r2, [r3, #0]
					break;
 80053d2:	e03f      	b.n	8005454 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053d4:	4b31      	ldr	r3, [pc, #196]	; (800549c <xTaskIncrementTick+0x150>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d203      	bcs.n	80053f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80053ec:	4a2e      	ldr	r2, [pc, #184]	; (80054a8 <xTaskIncrementTick+0x15c>)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80053f2:	e02f      	b.n	8005454 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	3304      	adds	r3, #4
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7fe ff73 	bl	80042e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005402:	2b00      	cmp	r3, #0
 8005404:	d004      	beq.n	8005410 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	3318      	adds	r3, #24
 800540a:	4618      	mov	r0, r3
 800540c:	f7fe ff6a 	bl	80042e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005414:	4b25      	ldr	r3, [pc, #148]	; (80054ac <xTaskIncrementTick+0x160>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	429a      	cmp	r2, r3
 800541a:	d903      	bls.n	8005424 <xTaskIncrementTick+0xd8>
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005420:	4a22      	ldr	r2, [pc, #136]	; (80054ac <xTaskIncrementTick+0x160>)
 8005422:	6013      	str	r3, [r2, #0]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005428:	4613      	mov	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4a1f      	ldr	r2, [pc, #124]	; (80054b0 <xTaskIncrementTick+0x164>)
 8005432:	441a      	add	r2, r3
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	3304      	adds	r3, #4
 8005438:	4619      	mov	r1, r3
 800543a:	4610      	mov	r0, r2
 800543c:	f7fe fef5 	bl	800422a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005444:	4b1b      	ldr	r3, [pc, #108]	; (80054b4 <xTaskIncrementTick+0x168>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544a:	429a      	cmp	r2, r3
 800544c:	d3b8      	bcc.n	80053c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800544e:	2301      	movs	r3, #1
 8005450:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005452:	e7b5      	b.n	80053c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005454:	4b17      	ldr	r3, [pc, #92]	; (80054b4 <xTaskIncrementTick+0x168>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800545a:	4915      	ldr	r1, [pc, #84]	; (80054b0 <xTaskIncrementTick+0x164>)
 800545c:	4613      	mov	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	440b      	add	r3, r1
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d901      	bls.n	8005470 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800546c:	2301      	movs	r3, #1
 800546e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005470:	4b11      	ldr	r3, [pc, #68]	; (80054b8 <xTaskIncrementTick+0x16c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d007      	beq.n	8005488 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005478:	2301      	movs	r3, #1
 800547a:	617b      	str	r3, [r7, #20]
 800547c:	e004      	b.n	8005488 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800547e:	4b0f      	ldr	r3, [pc, #60]	; (80054bc <xTaskIncrementTick+0x170>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	3301      	adds	r3, #1
 8005484:	4a0d      	ldr	r2, [pc, #52]	; (80054bc <xTaskIncrementTick+0x170>)
 8005486:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005488:	697b      	ldr	r3, [r7, #20]
}
 800548a:	4618      	mov	r0, r3
 800548c:	3718      	adds	r7, #24
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	20000e2c 	.word	0x20000e2c
 8005498:	20000e08 	.word	0x20000e08
 800549c:	20000dbc 	.word	0x20000dbc
 80054a0:	20000dc0 	.word	0x20000dc0
 80054a4:	20000e1c 	.word	0x20000e1c
 80054a8:	20000e24 	.word	0x20000e24
 80054ac:	20000e0c 	.word	0x20000e0c
 80054b0:	20000934 	.word	0x20000934
 80054b4:	20000930 	.word	0x20000930
 80054b8:	20000e18 	.word	0x20000e18
 80054bc:	20000e14 	.word	0x20000e14

080054c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80054c6:	4b36      	ldr	r3, [pc, #216]	; (80055a0 <vTaskSwitchContext+0xe0>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80054ce:	4b35      	ldr	r3, [pc, #212]	; (80055a4 <vTaskSwitchContext+0xe4>)
 80054d0:	2201      	movs	r2, #1
 80054d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80054d4:	e05f      	b.n	8005596 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 80054d6:	4b33      	ldr	r3, [pc, #204]	; (80055a4 <vTaskSwitchContext+0xe4>)
 80054d8:	2200      	movs	r2, #0
 80054da:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80054dc:	f7fb f801 	bl	80004e2 <getRunTimeCounterValue>
 80054e0:	4603      	mov	r3, r0
 80054e2:	4a31      	ldr	r2, [pc, #196]	; (80055a8 <vTaskSwitchContext+0xe8>)
 80054e4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80054e6:	4b30      	ldr	r3, [pc, #192]	; (80055a8 <vTaskSwitchContext+0xe8>)
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	4b30      	ldr	r3, [pc, #192]	; (80055ac <vTaskSwitchContext+0xec>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d909      	bls.n	8005506 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80054f2:	4b2f      	ldr	r3, [pc, #188]	; (80055b0 <vTaskSwitchContext+0xf0>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80054f8:	4a2b      	ldr	r2, [pc, #172]	; (80055a8 <vTaskSwitchContext+0xe8>)
 80054fa:	6810      	ldr	r0, [r2, #0]
 80054fc:	4a2b      	ldr	r2, [pc, #172]	; (80055ac <vTaskSwitchContext+0xec>)
 80054fe:	6812      	ldr	r2, [r2, #0]
 8005500:	1a82      	subs	r2, r0, r2
 8005502:	440a      	add	r2, r1
 8005504:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8005506:	4b28      	ldr	r3, [pc, #160]	; (80055a8 <vTaskSwitchContext+0xe8>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a28      	ldr	r2, [pc, #160]	; (80055ac <vTaskSwitchContext+0xec>)
 800550c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800550e:	4b29      	ldr	r3, [pc, #164]	; (80055b4 <vTaskSwitchContext+0xf4>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	60fb      	str	r3, [r7, #12]
 8005514:	e010      	b.n	8005538 <vTaskSwitchContext+0x78>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10a      	bne.n	8005532 <vTaskSwitchContext+0x72>
	__asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	607b      	str	r3, [r7, #4]
}
 800552e:	bf00      	nop
 8005530:	e7fe      	b.n	8005530 <vTaskSwitchContext+0x70>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	3b01      	subs	r3, #1
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	491f      	ldr	r1, [pc, #124]	; (80055b8 <vTaskSwitchContext+0xf8>)
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	440b      	add	r3, r1
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d0e4      	beq.n	8005516 <vTaskSwitchContext+0x56>
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4613      	mov	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4a18      	ldr	r2, [pc, #96]	; (80055b8 <vTaskSwitchContext+0xf8>)
 8005558:	4413      	add	r3, r2
 800555a:	60bb      	str	r3, [r7, #8]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	605a      	str	r2, [r3, #4]
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	3308      	adds	r3, #8
 800556e:	429a      	cmp	r2, r3
 8005570:	d104      	bne.n	800557c <vTaskSwitchContext+0xbc>
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	605a      	str	r2, [r3, #4]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	4a0b      	ldr	r2, [pc, #44]	; (80055b0 <vTaskSwitchContext+0xf0>)
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	4a0b      	ldr	r2, [pc, #44]	; (80055b4 <vTaskSwitchContext+0xf4>)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800558c:	4b08      	ldr	r3, [pc, #32]	; (80055b0 <vTaskSwitchContext+0xf0>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3358      	adds	r3, #88	; 0x58
 8005592:	4a0a      	ldr	r2, [pc, #40]	; (80055bc <vTaskSwitchContext+0xfc>)
 8005594:	6013      	str	r3, [r2, #0]
}
 8005596:	bf00      	nop
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	20000e2c 	.word	0x20000e2c
 80055a4:	20000e18 	.word	0x20000e18
 80055a8:	20000e34 	.word	0x20000e34
 80055ac:	20000e30 	.word	0x20000e30
 80055b0:	20000930 	.word	0x20000930
 80055b4:	20000e0c 	.word	0x20000e0c
 80055b8:	20000934 	.word	0x20000934
 80055bc:	20000010 	.word	0x20000010

080055c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10a      	bne.n	80055e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	60fb      	str	r3, [r7, #12]
}
 80055e2:	bf00      	nop
 80055e4:	e7fe      	b.n	80055e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055e6:	4b07      	ldr	r3, [pc, #28]	; (8005604 <vTaskPlaceOnEventList+0x44>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3318      	adds	r3, #24
 80055ec:	4619      	mov	r1, r3
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7fe fe3f 	bl	8004272 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80055f4:	2101      	movs	r1, #1
 80055f6:	6838      	ldr	r0, [r7, #0]
 80055f8:	f000 fa80 	bl	8005afc <prvAddCurrentTaskToDelayedList>
}
 80055fc:	bf00      	nop
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	20000930 	.word	0x20000930

08005608 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10a      	bne.n	8005630 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800561a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561e:	f383 8811 	msr	BASEPRI, r3
 8005622:	f3bf 8f6f 	isb	sy
 8005626:	f3bf 8f4f 	dsb	sy
 800562a:	617b      	str	r3, [r7, #20]
}
 800562c:	bf00      	nop
 800562e:	e7fe      	b.n	800562e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005630:	4b0a      	ldr	r3, [pc, #40]	; (800565c <vTaskPlaceOnEventListRestricted+0x54>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3318      	adds	r3, #24
 8005636:	4619      	mov	r1, r3
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f7fe fdf6 	bl	800422a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d002      	beq.n	800564a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005644:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005648:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800564a:	6879      	ldr	r1, [r7, #4]
 800564c:	68b8      	ldr	r0, [r7, #8]
 800564e:	f000 fa55 	bl	8005afc <prvAddCurrentTaskToDelayedList>
	}
 8005652:	bf00      	nop
 8005654:	3718      	adds	r7, #24
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	20000930 	.word	0x20000930

08005660 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10a      	bne.n	800568c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567a:	f383 8811 	msr	BASEPRI, r3
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	60fb      	str	r3, [r7, #12]
}
 8005688:	bf00      	nop
 800568a:	e7fe      	b.n	800568a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	3318      	adds	r3, #24
 8005690:	4618      	mov	r0, r3
 8005692:	f7fe fe27 	bl	80042e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005696:	4b1e      	ldr	r3, [pc, #120]	; (8005710 <xTaskRemoveFromEventList+0xb0>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d11d      	bne.n	80056da <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	3304      	adds	r3, #4
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fe fe1e 	bl	80042e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ac:	4b19      	ldr	r3, [pc, #100]	; (8005714 <xTaskRemoveFromEventList+0xb4>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d903      	bls.n	80056bc <xTaskRemoveFromEventList+0x5c>
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b8:	4a16      	ldr	r2, [pc, #88]	; (8005714 <xTaskRemoveFromEventList+0xb4>)
 80056ba:	6013      	str	r3, [r2, #0]
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c0:	4613      	mov	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4a13      	ldr	r2, [pc, #76]	; (8005718 <xTaskRemoveFromEventList+0xb8>)
 80056ca:	441a      	add	r2, r3
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	3304      	adds	r3, #4
 80056d0:	4619      	mov	r1, r3
 80056d2:	4610      	mov	r0, r2
 80056d4:	f7fe fda9 	bl	800422a <vListInsertEnd>
 80056d8:	e005      	b.n	80056e6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	3318      	adds	r3, #24
 80056de:	4619      	mov	r1, r3
 80056e0:	480e      	ldr	r0, [pc, #56]	; (800571c <xTaskRemoveFromEventList+0xbc>)
 80056e2:	f7fe fda2 	bl	800422a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ea:	4b0d      	ldr	r3, [pc, #52]	; (8005720 <xTaskRemoveFromEventList+0xc0>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d905      	bls.n	8005700 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80056f4:	2301      	movs	r3, #1
 80056f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80056f8:	4b0a      	ldr	r3, [pc, #40]	; (8005724 <xTaskRemoveFromEventList+0xc4>)
 80056fa:	2201      	movs	r2, #1
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	e001      	b.n	8005704 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005700:	2300      	movs	r3, #0
 8005702:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005704:	697b      	ldr	r3, [r7, #20]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3718      	adds	r7, #24
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	20000e2c 	.word	0x20000e2c
 8005714:	20000e0c 	.word	0x20000e0c
 8005718:	20000934 	.word	0x20000934
 800571c:	20000dc4 	.word	0x20000dc4
 8005720:	20000930 	.word	0x20000930
 8005724:	20000e18 	.word	0x20000e18

08005728 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005730:	4b06      	ldr	r3, [pc, #24]	; (800574c <vTaskInternalSetTimeOutState+0x24>)
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005738:	4b05      	ldr	r3, [pc, #20]	; (8005750 <vTaskInternalSetTimeOutState+0x28>)
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	605a      	str	r2, [r3, #4]
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	20000e1c 	.word	0x20000e1c
 8005750:	20000e08 	.word	0x20000e08

08005754 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b088      	sub	sp, #32
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10a      	bne.n	800577a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005768:	f383 8811 	msr	BASEPRI, r3
 800576c:	f3bf 8f6f 	isb	sy
 8005770:	f3bf 8f4f 	dsb	sy
 8005774:	613b      	str	r3, [r7, #16]
}
 8005776:	bf00      	nop
 8005778:	e7fe      	b.n	8005778 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10a      	bne.n	8005796 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	60fb      	str	r3, [r7, #12]
}
 8005792:	bf00      	nop
 8005794:	e7fe      	b.n	8005794 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005796:	f000 fe7d 	bl	8006494 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800579a:	4b1d      	ldr	r3, [pc, #116]	; (8005810 <xTaskCheckForTimeOut+0xbc>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057b2:	d102      	bne.n	80057ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80057b4:	2300      	movs	r3, #0
 80057b6:	61fb      	str	r3, [r7, #28]
 80057b8:	e023      	b.n	8005802 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	4b15      	ldr	r3, [pc, #84]	; (8005814 <xTaskCheckForTimeOut+0xc0>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d007      	beq.n	80057d6 <xTaskCheckForTimeOut+0x82>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d302      	bcc.n	80057d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80057d0:	2301      	movs	r3, #1
 80057d2:	61fb      	str	r3, [r7, #28]
 80057d4:	e015      	b.n	8005802 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d20b      	bcs.n	80057f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	1ad2      	subs	r2, r2, r3
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f7ff ff9b 	bl	8005728 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80057f2:	2300      	movs	r3, #0
 80057f4:	61fb      	str	r3, [r7, #28]
 80057f6:	e004      	b.n	8005802 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2200      	movs	r2, #0
 80057fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80057fe:	2301      	movs	r3, #1
 8005800:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005802:	f000 fe77 	bl	80064f4 <vPortExitCritical>

	return xReturn;
 8005806:	69fb      	ldr	r3, [r7, #28]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3720      	adds	r7, #32
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	20000e08 	.word	0x20000e08
 8005814:	20000e1c 	.word	0x20000e1c

08005818 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005818:	b480      	push	{r7}
 800581a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800581c:	4b03      	ldr	r3, [pc, #12]	; (800582c <vTaskMissedYield+0x14>)
 800581e:	2201      	movs	r2, #1
 8005820:	601a      	str	r2, [r3, #0]
}
 8005822:	bf00      	nop
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	20000e18 	.word	0x20000e18

08005830 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005838:	f000 f852 	bl	80058e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800583c:	4b06      	ldr	r3, [pc, #24]	; (8005858 <prvIdleTask+0x28>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d9f9      	bls.n	8005838 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005844:	4b05      	ldr	r3, [pc, #20]	; (800585c <prvIdleTask+0x2c>)
 8005846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005854:	e7f0      	b.n	8005838 <prvIdleTask+0x8>
 8005856:	bf00      	nop
 8005858:	20000934 	.word	0x20000934
 800585c:	e000ed04 	.word	0xe000ed04

08005860 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005866:	2300      	movs	r3, #0
 8005868:	607b      	str	r3, [r7, #4]
 800586a:	e00c      	b.n	8005886 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	4613      	mov	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4a12      	ldr	r2, [pc, #72]	; (80058c0 <prvInitialiseTaskLists+0x60>)
 8005878:	4413      	add	r3, r2
 800587a:	4618      	mov	r0, r3
 800587c:	f7fe fca8 	bl	80041d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	3301      	adds	r3, #1
 8005884:	607b      	str	r3, [r7, #4]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2b37      	cmp	r3, #55	; 0x37
 800588a:	d9ef      	bls.n	800586c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800588c:	480d      	ldr	r0, [pc, #52]	; (80058c4 <prvInitialiseTaskLists+0x64>)
 800588e:	f7fe fc9f 	bl	80041d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005892:	480d      	ldr	r0, [pc, #52]	; (80058c8 <prvInitialiseTaskLists+0x68>)
 8005894:	f7fe fc9c 	bl	80041d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005898:	480c      	ldr	r0, [pc, #48]	; (80058cc <prvInitialiseTaskLists+0x6c>)
 800589a:	f7fe fc99 	bl	80041d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800589e:	480c      	ldr	r0, [pc, #48]	; (80058d0 <prvInitialiseTaskLists+0x70>)
 80058a0:	f7fe fc96 	bl	80041d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80058a4:	480b      	ldr	r0, [pc, #44]	; (80058d4 <prvInitialiseTaskLists+0x74>)
 80058a6:	f7fe fc93 	bl	80041d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80058aa:	4b0b      	ldr	r3, [pc, #44]	; (80058d8 <prvInitialiseTaskLists+0x78>)
 80058ac:	4a05      	ldr	r2, [pc, #20]	; (80058c4 <prvInitialiseTaskLists+0x64>)
 80058ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80058b0:	4b0a      	ldr	r3, [pc, #40]	; (80058dc <prvInitialiseTaskLists+0x7c>)
 80058b2:	4a05      	ldr	r2, [pc, #20]	; (80058c8 <prvInitialiseTaskLists+0x68>)
 80058b4:	601a      	str	r2, [r3, #0]
}
 80058b6:	bf00      	nop
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	20000934 	.word	0x20000934
 80058c4:	20000d94 	.word	0x20000d94
 80058c8:	20000da8 	.word	0x20000da8
 80058cc:	20000dc4 	.word	0x20000dc4
 80058d0:	20000dd8 	.word	0x20000dd8
 80058d4:	20000df0 	.word	0x20000df0
 80058d8:	20000dbc 	.word	0x20000dbc
 80058dc:	20000dc0 	.word	0x20000dc0

080058e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058e6:	e019      	b.n	800591c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80058e8:	f000 fdd4 	bl	8006494 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058ec:	4b10      	ldr	r3, [pc, #64]	; (8005930 <prvCheckTasksWaitingTermination+0x50>)
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3304      	adds	r3, #4
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7fe fcf3 	bl	80042e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80058fe:	4b0d      	ldr	r3, [pc, #52]	; (8005934 <prvCheckTasksWaitingTermination+0x54>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3b01      	subs	r3, #1
 8005904:	4a0b      	ldr	r2, [pc, #44]	; (8005934 <prvCheckTasksWaitingTermination+0x54>)
 8005906:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005908:	4b0b      	ldr	r3, [pc, #44]	; (8005938 <prvCheckTasksWaitingTermination+0x58>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	3b01      	subs	r3, #1
 800590e:	4a0a      	ldr	r2, [pc, #40]	; (8005938 <prvCheckTasksWaitingTermination+0x58>)
 8005910:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005912:	f000 fdef 	bl	80064f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f810 	bl	800593c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800591c:	4b06      	ldr	r3, [pc, #24]	; (8005938 <prvCheckTasksWaitingTermination+0x58>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1e1      	bne.n	80058e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005924:	bf00      	nop
 8005926:	bf00      	nop
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20000dd8 	.word	0x20000dd8
 8005934:	20000e04 	.word	0x20000e04
 8005938:	20000dec 	.word	0x20000dec

0800593c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	3358      	adds	r3, #88	; 0x58
 8005948:	4618      	mov	r0, r3
 800594a:	f001 f8f9 	bl	8006b40 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8005954:	2b00      	cmp	r3, #0
 8005956:	d108      	bne.n	800596a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595c:	4618      	mov	r0, r3
 800595e:	f000 ff87 	bl	8006870 <vPortFree>
				vPortFree( pxTCB );
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 ff84 	bl	8006870 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005968:	e018      	b.n	800599c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8005970:	2b01      	cmp	r3, #1
 8005972:	d103      	bne.n	800597c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 ff7b 	bl	8006870 <vPortFree>
	}
 800597a:	e00f      	b.n	800599c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8005982:	2b02      	cmp	r3, #2
 8005984:	d00a      	beq.n	800599c <prvDeleteTCB+0x60>
	__asm volatile
 8005986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	60fb      	str	r3, [r7, #12]
}
 8005998:	bf00      	nop
 800599a:	e7fe      	b.n	800599a <prvDeleteTCB+0x5e>
	}
 800599c:	bf00      	nop
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059aa:	4b0c      	ldr	r3, [pc, #48]	; (80059dc <prvResetNextTaskUnblockTime+0x38>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d104      	bne.n	80059be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80059b4:	4b0a      	ldr	r3, [pc, #40]	; (80059e0 <prvResetNextTaskUnblockTime+0x3c>)
 80059b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80059bc:	e008      	b.n	80059d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059be:	4b07      	ldr	r3, [pc, #28]	; (80059dc <prvResetNextTaskUnblockTime+0x38>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	4a04      	ldr	r2, [pc, #16]	; (80059e0 <prvResetNextTaskUnblockTime+0x3c>)
 80059ce:	6013      	str	r3, [r2, #0]
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	20000dbc 	.word	0x20000dbc
 80059e0:	20000e24 	.word	0x20000e24

080059e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80059ea:	4b0b      	ldr	r3, [pc, #44]	; (8005a18 <xTaskGetSchedulerState+0x34>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d102      	bne.n	80059f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80059f2:	2301      	movs	r3, #1
 80059f4:	607b      	str	r3, [r7, #4]
 80059f6:	e008      	b.n	8005a0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059f8:	4b08      	ldr	r3, [pc, #32]	; (8005a1c <xTaskGetSchedulerState+0x38>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d102      	bne.n	8005a06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a00:	2302      	movs	r3, #2
 8005a02:	607b      	str	r3, [r7, #4]
 8005a04:	e001      	b.n	8005a0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a06:	2300      	movs	r3, #0
 8005a08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a0a:	687b      	ldr	r3, [r7, #4]
	}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr
 8005a18:	20000e10 	.word	0x20000e10
 8005a1c:	20000e2c 	.word	0x20000e2c

08005a20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d056      	beq.n	8005ae4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a36:	4b2e      	ldr	r3, [pc, #184]	; (8005af0 <xTaskPriorityDisinherit+0xd0>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d00a      	beq.n	8005a56 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	60fb      	str	r3, [r7, #12]
}
 8005a52:	bf00      	nop
 8005a54:	e7fe      	b.n	8005a54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10a      	bne.n	8005a74 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	60bb      	str	r3, [r7, #8]
}
 8005a70:	bf00      	nop
 8005a72:	e7fe      	b.n	8005a72 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a78:	1e5a      	subs	r2, r3, #1
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d02c      	beq.n	8005ae4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d128      	bne.n	8005ae4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	3304      	adds	r3, #4
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7fe fc24 	bl	80042e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab4:	4b0f      	ldr	r3, [pc, #60]	; (8005af4 <xTaskPriorityDisinherit+0xd4>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d903      	bls.n	8005ac4 <xTaskPriorityDisinherit+0xa4>
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac0:	4a0c      	ldr	r2, [pc, #48]	; (8005af4 <xTaskPriorityDisinherit+0xd4>)
 8005ac2:	6013      	str	r3, [r2, #0]
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac8:	4613      	mov	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4a09      	ldr	r2, [pc, #36]	; (8005af8 <xTaskPriorityDisinherit+0xd8>)
 8005ad2:	441a      	add	r2, r3
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	3304      	adds	r3, #4
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4610      	mov	r0, r2
 8005adc:	f7fe fba5 	bl	800422a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ae4:	697b      	ldr	r3, [r7, #20]
	}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3718      	adds	r7, #24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	20000930 	.word	0x20000930
 8005af4:	20000e0c 	.word	0x20000e0c
 8005af8:	20000934 	.word	0x20000934

08005afc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b06:	4b21      	ldr	r3, [pc, #132]	; (8005b8c <prvAddCurrentTaskToDelayedList+0x90>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b0c:	4b20      	ldr	r3, [pc, #128]	; (8005b90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	3304      	adds	r3, #4
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fe fbe6 	bl	80042e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b1e:	d10a      	bne.n	8005b36 <prvAddCurrentTaskToDelayedList+0x3a>
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d007      	beq.n	8005b36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b26:	4b1a      	ldr	r3, [pc, #104]	; (8005b90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	4819      	ldr	r0, [pc, #100]	; (8005b94 <prvAddCurrentTaskToDelayedList+0x98>)
 8005b30:	f7fe fb7b 	bl	800422a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b34:	e026      	b.n	8005b84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b3e:	4b14      	ldr	r3, [pc, #80]	; (8005b90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d209      	bcs.n	8005b62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b4e:	4b12      	ldr	r3, [pc, #72]	; (8005b98 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	4b0f      	ldr	r3, [pc, #60]	; (8005b90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	3304      	adds	r3, #4
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	f7fe fb89 	bl	8004272 <vListInsert>
}
 8005b60:	e010      	b.n	8005b84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b62:	4b0e      	ldr	r3, [pc, #56]	; (8005b9c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	4b0a      	ldr	r3, [pc, #40]	; (8005b90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4610      	mov	r0, r2
 8005b70:	f7fe fb7f 	bl	8004272 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b74:	4b0a      	ldr	r3, [pc, #40]	; (8005ba0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d202      	bcs.n	8005b84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005b7e:	4a08      	ldr	r2, [pc, #32]	; (8005ba0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	6013      	str	r3, [r2, #0]
}
 8005b84:	bf00      	nop
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	20000e08 	.word	0x20000e08
 8005b90:	20000930 	.word	0x20000930
 8005b94:	20000df0 	.word	0x20000df0
 8005b98:	20000dc0 	.word	0x20000dc0
 8005b9c:	20000dbc 	.word	0x20000dbc
 8005ba0:	20000e24 	.word	0x20000e24

08005ba4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b08a      	sub	sp, #40	; 0x28
 8005ba8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005baa:	2300      	movs	r3, #0
 8005bac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005bae:	f000 fb07 	bl	80061c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005bb2:	4b1c      	ldr	r3, [pc, #112]	; (8005c24 <xTimerCreateTimerTask+0x80>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d021      	beq.n	8005bfe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005bc2:	1d3a      	adds	r2, r7, #4
 8005bc4:	f107 0108 	add.w	r1, r7, #8
 8005bc8:	f107 030c 	add.w	r3, r7, #12
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7fe fae5 	bl	800419c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005bd2:	6879      	ldr	r1, [r7, #4]
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	9202      	str	r2, [sp, #8]
 8005bda:	9301      	str	r3, [sp, #4]
 8005bdc:	2302      	movs	r3, #2
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	2300      	movs	r3, #0
 8005be2:	460a      	mov	r2, r1
 8005be4:	4910      	ldr	r1, [pc, #64]	; (8005c28 <xTimerCreateTimerTask+0x84>)
 8005be6:	4811      	ldr	r0, [pc, #68]	; (8005c2c <xTimerCreateTimerTask+0x88>)
 8005be8:	f7ff f892 	bl	8004d10 <xTaskCreateStatic>
 8005bec:	4603      	mov	r3, r0
 8005bee:	4a10      	ldr	r2, [pc, #64]	; (8005c30 <xTimerCreateTimerTask+0x8c>)
 8005bf0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005bf2:	4b0f      	ldr	r3, [pc, #60]	; (8005c30 <xTimerCreateTimerTask+0x8c>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10a      	bne.n	8005c1a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c08:	f383 8811 	msr	BASEPRI, r3
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	613b      	str	r3, [r7, #16]
}
 8005c16:	bf00      	nop
 8005c18:	e7fe      	b.n	8005c18 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005c1a:	697b      	ldr	r3, [r7, #20]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	20000e68 	.word	0x20000e68
 8005c28:	08006d10 	.word	0x08006d10
 8005c2c:	08005d69 	.word	0x08005d69
 8005c30:	20000e6c 	.word	0x20000e6c

08005c34 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b08a      	sub	sp, #40	; 0x28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
 8005c40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005c42:	2300      	movs	r3, #0
 8005c44:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10a      	bne.n	8005c62 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c50:	f383 8811 	msr	BASEPRI, r3
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	623b      	str	r3, [r7, #32]
}
 8005c5e:	bf00      	nop
 8005c60:	e7fe      	b.n	8005c60 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005c62:	4b1a      	ldr	r3, [pc, #104]	; (8005ccc <xTimerGenericCommand+0x98>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d02a      	beq.n	8005cc0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	2b05      	cmp	r3, #5
 8005c7a:	dc18      	bgt.n	8005cae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005c7c:	f7ff feb2 	bl	80059e4 <xTaskGetSchedulerState>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d109      	bne.n	8005c9a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005c86:	4b11      	ldr	r3, [pc, #68]	; (8005ccc <xTimerGenericCommand+0x98>)
 8005c88:	6818      	ldr	r0, [r3, #0]
 8005c8a:	f107 0110 	add.w	r1, r7, #16
 8005c8e:	2300      	movs	r3, #0
 8005c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c92:	f7fe fc55 	bl	8004540 <xQueueGenericSend>
 8005c96:	6278      	str	r0, [r7, #36]	; 0x24
 8005c98:	e012      	b.n	8005cc0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c9a:	4b0c      	ldr	r3, [pc, #48]	; (8005ccc <xTimerGenericCommand+0x98>)
 8005c9c:	6818      	ldr	r0, [r3, #0]
 8005c9e:	f107 0110 	add.w	r1, r7, #16
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f7fe fc4b 	bl	8004540 <xQueueGenericSend>
 8005caa:	6278      	str	r0, [r7, #36]	; 0x24
 8005cac:	e008      	b.n	8005cc0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005cae:	4b07      	ldr	r3, [pc, #28]	; (8005ccc <xTimerGenericCommand+0x98>)
 8005cb0:	6818      	ldr	r0, [r3, #0]
 8005cb2:	f107 0110 	add.w	r1, r7, #16
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	f7fe fd3f 	bl	800473c <xQueueGenericSendFromISR>
 8005cbe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3728      	adds	r7, #40	; 0x28
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	20000e68 	.word	0x20000e68

08005cd0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b088      	sub	sp, #32
 8005cd4:	af02      	add	r7, sp, #8
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cda:	4b22      	ldr	r3, [pc, #136]	; (8005d64 <prvProcessExpiredTimer+0x94>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fe fafb 	bl	80042e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cf4:	f003 0304 	and.w	r3, r3, #4
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d022      	beq.n	8005d42 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	699a      	ldr	r2, [r3, #24]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	18d1      	adds	r1, r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	6978      	ldr	r0, [r7, #20]
 8005d0a:	f000 f8d1 	bl	8005eb0 <prvInsertTimerInActiveList>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d01f      	beq.n	8005d54 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d14:	2300      	movs	r3, #0
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	2300      	movs	r3, #0
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	6978      	ldr	r0, [r7, #20]
 8005d20:	f7ff ff88 	bl	8005c34 <xTimerGenericCommand>
 8005d24:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d113      	bne.n	8005d54 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d30:	f383 8811 	msr	BASEPRI, r3
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	60fb      	str	r3, [r7, #12]
}
 8005d3e:	bf00      	nop
 8005d40:	e7fe      	b.n	8005d40 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d48:	f023 0301 	bic.w	r3, r3, #1
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	6a1b      	ldr	r3, [r3, #32]
 8005d58:	6978      	ldr	r0, [r7, #20]
 8005d5a:	4798      	blx	r3
}
 8005d5c:	bf00      	nop
 8005d5e:	3718      	adds	r7, #24
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	20000e60 	.word	0x20000e60

08005d68 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d70:	f107 0308 	add.w	r3, r7, #8
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 f857 	bl	8005e28 <prvGetNextExpireTime>
 8005d7a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	4619      	mov	r1, r3
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f000 f803 	bl	8005d8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005d86:	f000 f8d5 	bl	8005f34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d8a:	e7f1      	b.n	8005d70 <prvTimerTask+0x8>

08005d8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005d96:	f7ff fa1d 	bl	80051d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d9a:	f107 0308 	add.w	r3, r7, #8
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 f866 	bl	8005e70 <prvSampleTimeNow>
 8005da4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d130      	bne.n	8005e0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10a      	bne.n	8005dc8 <prvProcessTimerOrBlockTask+0x3c>
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d806      	bhi.n	8005dc8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005dba:	f7ff fa19 	bl	80051f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005dbe:	68f9      	ldr	r1, [r7, #12]
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f7ff ff85 	bl	8005cd0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005dc6:	e024      	b.n	8005e12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d008      	beq.n	8005de0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005dce:	4b13      	ldr	r3, [pc, #76]	; (8005e1c <prvProcessTimerOrBlockTask+0x90>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d101      	bne.n	8005ddc <prvProcessTimerOrBlockTask+0x50>
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e000      	b.n	8005dde <prvProcessTimerOrBlockTask+0x52>
 8005ddc:	2300      	movs	r3, #0
 8005dde:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005de0:	4b0f      	ldr	r3, [pc, #60]	; (8005e20 <prvProcessTimerOrBlockTask+0x94>)
 8005de2:	6818      	ldr	r0, [r3, #0]
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	683a      	ldr	r2, [r7, #0]
 8005dec:	4619      	mov	r1, r3
 8005dee:	f7fe ff5b 	bl	8004ca8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005df2:	f7ff f9fd 	bl	80051f0 <xTaskResumeAll>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10a      	bne.n	8005e12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005dfc:	4b09      	ldr	r3, [pc, #36]	; (8005e24 <prvProcessTimerOrBlockTask+0x98>)
 8005dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	f3bf 8f6f 	isb	sy
}
 8005e0c:	e001      	b.n	8005e12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005e0e:	f7ff f9ef 	bl	80051f0 <xTaskResumeAll>
}
 8005e12:	bf00      	nop
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000e64 	.word	0x20000e64
 8005e20:	20000e68 	.word	0x20000e68
 8005e24:	e000ed04 	.word	0xe000ed04

08005e28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005e30:	4b0e      	ldr	r3, [pc, #56]	; (8005e6c <prvGetNextExpireTime+0x44>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <prvGetNextExpireTime+0x16>
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	e000      	b.n	8005e40 <prvGetNextExpireTime+0x18>
 8005e3e:	2200      	movs	r2, #0
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d105      	bne.n	8005e58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e4c:	4b07      	ldr	r3, [pc, #28]	; (8005e6c <prvGetNextExpireTime+0x44>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	60fb      	str	r3, [r7, #12]
 8005e56:	e001      	b.n	8005e5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	20000e60 	.word	0x20000e60

08005e70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005e78:	f7ff fa58 	bl	800532c <xTaskGetTickCount>
 8005e7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005e7e:	4b0b      	ldr	r3, [pc, #44]	; (8005eac <prvSampleTimeNow+0x3c>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d205      	bcs.n	8005e94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005e88:	f000 f936 	bl	80060f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	601a      	str	r2, [r3, #0]
 8005e92:	e002      	b.n	8005e9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005e9a:	4a04      	ldr	r2, [pc, #16]	; (8005eac <prvSampleTimeNow+0x3c>)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	20000e70 	.word	0x20000e70

08005eb0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
 8005ebc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d812      	bhi.n	8005efc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	1ad2      	subs	r2, r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d302      	bcc.n	8005eea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	617b      	str	r3, [r7, #20]
 8005ee8:	e01b      	b.n	8005f22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005eea:	4b10      	ldr	r3, [pc, #64]	; (8005f2c <prvInsertTimerInActiveList+0x7c>)
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	4610      	mov	r0, r2
 8005ef6:	f7fe f9bc 	bl	8004272 <vListInsert>
 8005efa:	e012      	b.n	8005f22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d206      	bcs.n	8005f12 <prvInsertTimerInActiveList+0x62>
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d302      	bcc.n	8005f12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	617b      	str	r3, [r7, #20]
 8005f10:	e007      	b.n	8005f22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f12:	4b07      	ldr	r3, [pc, #28]	; (8005f30 <prvInsertTimerInActiveList+0x80>)
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	3304      	adds	r3, #4
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	4610      	mov	r0, r2
 8005f1e:	f7fe f9a8 	bl	8004272 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005f22:	697b      	ldr	r3, [r7, #20]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3718      	adds	r7, #24
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	20000e64 	.word	0x20000e64
 8005f30:	20000e60 	.word	0x20000e60

08005f34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b08e      	sub	sp, #56	; 0x38
 8005f38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f3a:	e0ca      	b.n	80060d2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	da18      	bge.n	8005f74 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005f42:	1d3b      	adds	r3, r7, #4
 8005f44:	3304      	adds	r3, #4
 8005f46:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10a      	bne.n	8005f64 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f52:	f383 8811 	msr	BASEPRI, r3
 8005f56:	f3bf 8f6f 	isb	sy
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	61fb      	str	r3, [r7, #28]
}
 8005f60:	bf00      	nop
 8005f62:	e7fe      	b.n	8005f62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f6a:	6850      	ldr	r0, [r2, #4]
 8005f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f6e:	6892      	ldr	r2, [r2, #8]
 8005f70:	4611      	mov	r1, r2
 8005f72:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f2c0 80aa 	blt.w	80060d0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f82:	695b      	ldr	r3, [r3, #20]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d004      	beq.n	8005f92 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8a:	3304      	adds	r3, #4
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7fe f9a9 	bl	80042e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f92:	463b      	mov	r3, r7
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff ff6b 	bl	8005e70 <prvSampleTimeNow>
 8005f9a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b09      	cmp	r3, #9
 8005fa0:	f200 8097 	bhi.w	80060d2 <prvProcessReceivedCommands+0x19e>
 8005fa4:	a201      	add	r2, pc, #4	; (adr r2, 8005fac <prvProcessReceivedCommands+0x78>)
 8005fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005faa:	bf00      	nop
 8005fac:	08005fd5 	.word	0x08005fd5
 8005fb0:	08005fd5 	.word	0x08005fd5
 8005fb4:	08005fd5 	.word	0x08005fd5
 8005fb8:	08006049 	.word	0x08006049
 8005fbc:	0800605d 	.word	0x0800605d
 8005fc0:	080060a7 	.word	0x080060a7
 8005fc4:	08005fd5 	.word	0x08005fd5
 8005fc8:	08005fd5 	.word	0x08005fd5
 8005fcc:	08006049 	.word	0x08006049
 8005fd0:	0800605d 	.word	0x0800605d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fda:	f043 0301 	orr.w	r3, r3, #1
 8005fde:	b2da      	uxtb	r2, r3
 8005fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	18d1      	adds	r1, r2, r3
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ff4:	f7ff ff5c 	bl	8005eb0 <prvInsertTimerInActiveList>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d069      	beq.n	80060d2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006004:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006008:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800600c:	f003 0304 	and.w	r3, r3, #4
 8006010:	2b00      	cmp	r3, #0
 8006012:	d05e      	beq.n	80060d2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	441a      	add	r2, r3
 800601c:	2300      	movs	r3, #0
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	2300      	movs	r3, #0
 8006022:	2100      	movs	r1, #0
 8006024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006026:	f7ff fe05 	bl	8005c34 <xTimerGenericCommand>
 800602a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d14f      	bne.n	80060d2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	61bb      	str	r3, [r7, #24]
}
 8006044:	bf00      	nop
 8006046:	e7fe      	b.n	8006046 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800604e:	f023 0301 	bic.w	r3, r3, #1
 8006052:	b2da      	uxtb	r2, r3
 8006054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006056:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800605a:	e03a      	b.n	80060d2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800605c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006062:	f043 0301 	orr.w	r3, r3, #1
 8006066:	b2da      	uxtb	r2, r3
 8006068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006072:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10a      	bne.n	8006092 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800607c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006080:	f383 8811 	msr	BASEPRI, r3
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	617b      	str	r3, [r7, #20]
}
 800608e:	bf00      	nop
 8006090:	e7fe      	b.n	8006090 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006094:	699a      	ldr	r2, [r3, #24]
 8006096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006098:	18d1      	adds	r1, r2, r3
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800609e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060a0:	f7ff ff06 	bl	8005eb0 <prvInsertTimerInActiveList>
					break;
 80060a4:	e015      	b.n	80060d2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80060a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d103      	bne.n	80060bc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80060b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060b6:	f000 fbdb 	bl	8006870 <vPortFree>
 80060ba:	e00a      	b.n	80060d2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060c2:	f023 0301 	bic.w	r3, r3, #1
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80060ce:	e000      	b.n	80060d2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80060d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060d2:	4b08      	ldr	r3, [pc, #32]	; (80060f4 <prvProcessReceivedCommands+0x1c0>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	1d39      	adds	r1, r7, #4
 80060d8:	2200      	movs	r2, #0
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fe fbca 	bl	8004874 <xQueueReceive>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f47f af2a 	bne.w	8005f3c <prvProcessReceivedCommands+0x8>
	}
}
 80060e8:	bf00      	nop
 80060ea:	bf00      	nop
 80060ec:	3730      	adds	r7, #48	; 0x30
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	20000e68 	.word	0x20000e68

080060f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b088      	sub	sp, #32
 80060fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060fe:	e048      	b.n	8006192 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006100:	4b2d      	ldr	r3, [pc, #180]	; (80061b8 <prvSwitchTimerLists+0xc0>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800610a:	4b2b      	ldr	r3, [pc, #172]	; (80061b8 <prvSwitchTimerLists+0xc0>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	3304      	adds	r3, #4
 8006118:	4618      	mov	r0, r3
 800611a:	f7fe f8e3 	bl	80042e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800612c:	f003 0304 	and.w	r3, r3, #4
 8006130:	2b00      	cmp	r3, #0
 8006132:	d02e      	beq.n	8006192 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	4413      	add	r3, r2
 800613c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	429a      	cmp	r2, r3
 8006144:	d90e      	bls.n	8006164 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006152:	4b19      	ldr	r3, [pc, #100]	; (80061b8 <prvSwitchTimerLists+0xc0>)
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	3304      	adds	r3, #4
 800615a:	4619      	mov	r1, r3
 800615c:	4610      	mov	r0, r2
 800615e:	f7fe f888 	bl	8004272 <vListInsert>
 8006162:	e016      	b.n	8006192 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006164:	2300      	movs	r3, #0
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	2300      	movs	r3, #0
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	2100      	movs	r1, #0
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f7ff fd60 	bl	8005c34 <xTimerGenericCommand>
 8006174:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10a      	bne.n	8006192 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800617c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006180:	f383 8811 	msr	BASEPRI, r3
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	603b      	str	r3, [r7, #0]
}
 800618e:	bf00      	nop
 8006190:	e7fe      	b.n	8006190 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006192:	4b09      	ldr	r3, [pc, #36]	; (80061b8 <prvSwitchTimerLists+0xc0>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1b1      	bne.n	8006100 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800619c:	4b06      	ldr	r3, [pc, #24]	; (80061b8 <prvSwitchTimerLists+0xc0>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80061a2:	4b06      	ldr	r3, [pc, #24]	; (80061bc <prvSwitchTimerLists+0xc4>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a04      	ldr	r2, [pc, #16]	; (80061b8 <prvSwitchTimerLists+0xc0>)
 80061a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80061aa:	4a04      	ldr	r2, [pc, #16]	; (80061bc <prvSwitchTimerLists+0xc4>)
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	6013      	str	r3, [r2, #0]
}
 80061b0:	bf00      	nop
 80061b2:	3718      	adds	r7, #24
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	20000e60 	.word	0x20000e60
 80061bc:	20000e64 	.word	0x20000e64

080061c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80061c6:	f000 f965 	bl	8006494 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80061ca:	4b15      	ldr	r3, [pc, #84]	; (8006220 <prvCheckForValidListAndQueue+0x60>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d120      	bne.n	8006214 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80061d2:	4814      	ldr	r0, [pc, #80]	; (8006224 <prvCheckForValidListAndQueue+0x64>)
 80061d4:	f7fd fffc 	bl	80041d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80061d8:	4813      	ldr	r0, [pc, #76]	; (8006228 <prvCheckForValidListAndQueue+0x68>)
 80061da:	f7fd fff9 	bl	80041d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80061de:	4b13      	ldr	r3, [pc, #76]	; (800622c <prvCheckForValidListAndQueue+0x6c>)
 80061e0:	4a10      	ldr	r2, [pc, #64]	; (8006224 <prvCheckForValidListAndQueue+0x64>)
 80061e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80061e4:	4b12      	ldr	r3, [pc, #72]	; (8006230 <prvCheckForValidListAndQueue+0x70>)
 80061e6:	4a10      	ldr	r2, [pc, #64]	; (8006228 <prvCheckForValidListAndQueue+0x68>)
 80061e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80061ea:	2300      	movs	r3, #0
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	4b11      	ldr	r3, [pc, #68]	; (8006234 <prvCheckForValidListAndQueue+0x74>)
 80061f0:	4a11      	ldr	r2, [pc, #68]	; (8006238 <prvCheckForValidListAndQueue+0x78>)
 80061f2:	2110      	movs	r1, #16
 80061f4:	200a      	movs	r0, #10
 80061f6:	f7fe f907 	bl	8004408 <xQueueGenericCreateStatic>
 80061fa:	4603      	mov	r3, r0
 80061fc:	4a08      	ldr	r2, [pc, #32]	; (8006220 <prvCheckForValidListAndQueue+0x60>)
 80061fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006200:	4b07      	ldr	r3, [pc, #28]	; (8006220 <prvCheckForValidListAndQueue+0x60>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d005      	beq.n	8006214 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006208:	4b05      	ldr	r3, [pc, #20]	; (8006220 <prvCheckForValidListAndQueue+0x60>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	490b      	ldr	r1, [pc, #44]	; (800623c <prvCheckForValidListAndQueue+0x7c>)
 800620e:	4618      	mov	r0, r3
 8006210:	f7fe fd20 	bl	8004c54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006214:	f000 f96e 	bl	80064f4 <vPortExitCritical>
}
 8006218:	bf00      	nop
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	20000e68 	.word	0x20000e68
 8006224:	20000e38 	.word	0x20000e38
 8006228:	20000e4c 	.word	0x20000e4c
 800622c:	20000e60 	.word	0x20000e60
 8006230:	20000e64 	.word	0x20000e64
 8006234:	20000f14 	.word	0x20000f14
 8006238:	20000e74 	.word	0x20000e74
 800623c:	08006d18 	.word	0x08006d18

08006240 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	3b04      	subs	r3, #4
 8006250:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006258:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	3b04      	subs	r3, #4
 800625e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	f023 0201 	bic.w	r2, r3, #1
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	3b04      	subs	r3, #4
 800626e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006270:	4a0c      	ldr	r2, [pc, #48]	; (80062a4 <pxPortInitialiseStack+0x64>)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	3b14      	subs	r3, #20
 800627a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	3b04      	subs	r3, #4
 8006286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f06f 0202 	mvn.w	r2, #2
 800628e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	3b20      	subs	r3, #32
 8006294:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006296:	68fb      	ldr	r3, [r7, #12]
}
 8006298:	4618      	mov	r0, r3
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr
 80062a4:	080062a9 	.word	0x080062a9

080062a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80062ae:	2300      	movs	r3, #0
 80062b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80062b2:	4b12      	ldr	r3, [pc, #72]	; (80062fc <prvTaskExitError+0x54>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062ba:	d00a      	beq.n	80062d2 <prvTaskExitError+0x2a>
	__asm volatile
 80062bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c0:	f383 8811 	msr	BASEPRI, r3
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	60fb      	str	r3, [r7, #12]
}
 80062ce:	bf00      	nop
 80062d0:	e7fe      	b.n	80062d0 <prvTaskExitError+0x28>
	__asm volatile
 80062d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	60bb      	str	r3, [r7, #8]
}
 80062e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80062e6:	bf00      	nop
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d0fc      	beq.n	80062e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062ee:	bf00      	nop
 80062f0:	bf00      	nop
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	2000000c 	.word	0x2000000c

08006300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006300:	4b07      	ldr	r3, [pc, #28]	; (8006320 <pxCurrentTCBConst2>)
 8006302:	6819      	ldr	r1, [r3, #0]
 8006304:	6808      	ldr	r0, [r1, #0]
 8006306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800630a:	f380 8809 	msr	PSP, r0
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f04f 0000 	mov.w	r0, #0
 8006316:	f380 8811 	msr	BASEPRI, r0
 800631a:	4770      	bx	lr
 800631c:	f3af 8000 	nop.w

08006320 <pxCurrentTCBConst2>:
 8006320:	20000930 	.word	0x20000930
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006324:	bf00      	nop
 8006326:	bf00      	nop

08006328 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006328:	4808      	ldr	r0, [pc, #32]	; (800634c <prvPortStartFirstTask+0x24>)
 800632a:	6800      	ldr	r0, [r0, #0]
 800632c:	6800      	ldr	r0, [r0, #0]
 800632e:	f380 8808 	msr	MSP, r0
 8006332:	f04f 0000 	mov.w	r0, #0
 8006336:	f380 8814 	msr	CONTROL, r0
 800633a:	b662      	cpsie	i
 800633c:	b661      	cpsie	f
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	df00      	svc	0
 8006348:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800634a:	bf00      	nop
 800634c:	e000ed08 	.word	0xe000ed08

08006350 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006356:	4b46      	ldr	r3, [pc, #280]	; (8006470 <xPortStartScheduler+0x120>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a46      	ldr	r2, [pc, #280]	; (8006474 <xPortStartScheduler+0x124>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d10a      	bne.n	8006376 <xPortStartScheduler+0x26>
	__asm volatile
 8006360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	613b      	str	r3, [r7, #16]
}
 8006372:	bf00      	nop
 8006374:	e7fe      	b.n	8006374 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006376:	4b3e      	ldr	r3, [pc, #248]	; (8006470 <xPortStartScheduler+0x120>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a3f      	ldr	r2, [pc, #252]	; (8006478 <xPortStartScheduler+0x128>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d10a      	bne.n	8006396 <xPortStartScheduler+0x46>
	__asm volatile
 8006380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	60fb      	str	r3, [r7, #12]
}
 8006392:	bf00      	nop
 8006394:	e7fe      	b.n	8006394 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006396:	4b39      	ldr	r3, [pc, #228]	; (800647c <xPortStartScheduler+0x12c>)
 8006398:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	22ff      	movs	r2, #255	; 0xff
 80063a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063b0:	78fb      	ldrb	r3, [r7, #3]
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	4b31      	ldr	r3, [pc, #196]	; (8006480 <xPortStartScheduler+0x130>)
 80063bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063be:	4b31      	ldr	r3, [pc, #196]	; (8006484 <xPortStartScheduler+0x134>)
 80063c0:	2207      	movs	r2, #7
 80063c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063c4:	e009      	b.n	80063da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80063c6:	4b2f      	ldr	r3, [pc, #188]	; (8006484 <xPortStartScheduler+0x134>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3b01      	subs	r3, #1
 80063cc:	4a2d      	ldr	r2, [pc, #180]	; (8006484 <xPortStartScheduler+0x134>)
 80063ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80063d0:	78fb      	ldrb	r3, [r7, #3]
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063da:	78fb      	ldrb	r3, [r7, #3]
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e2:	2b80      	cmp	r3, #128	; 0x80
 80063e4:	d0ef      	beq.n	80063c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80063e6:	4b27      	ldr	r3, [pc, #156]	; (8006484 <xPortStartScheduler+0x134>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f1c3 0307 	rsb	r3, r3, #7
 80063ee:	2b04      	cmp	r3, #4
 80063f0:	d00a      	beq.n	8006408 <xPortStartScheduler+0xb8>
	__asm volatile
 80063f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	60bb      	str	r3, [r7, #8]
}
 8006404:	bf00      	nop
 8006406:	e7fe      	b.n	8006406 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006408:	4b1e      	ldr	r3, [pc, #120]	; (8006484 <xPortStartScheduler+0x134>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	021b      	lsls	r3, r3, #8
 800640e:	4a1d      	ldr	r2, [pc, #116]	; (8006484 <xPortStartScheduler+0x134>)
 8006410:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006412:	4b1c      	ldr	r3, [pc, #112]	; (8006484 <xPortStartScheduler+0x134>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800641a:	4a1a      	ldr	r2, [pc, #104]	; (8006484 <xPortStartScheduler+0x134>)
 800641c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	b2da      	uxtb	r2, r3
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006426:	4b18      	ldr	r3, [pc, #96]	; (8006488 <xPortStartScheduler+0x138>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a17      	ldr	r2, [pc, #92]	; (8006488 <xPortStartScheduler+0x138>)
 800642c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006430:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006432:	4b15      	ldr	r3, [pc, #84]	; (8006488 <xPortStartScheduler+0x138>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a14      	ldr	r2, [pc, #80]	; (8006488 <xPortStartScheduler+0x138>)
 8006438:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800643c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800643e:	f000 f8dd 	bl	80065fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006442:	4b12      	ldr	r3, [pc, #72]	; (800648c <xPortStartScheduler+0x13c>)
 8006444:	2200      	movs	r2, #0
 8006446:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006448:	f000 f8fc 	bl	8006644 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800644c:	4b10      	ldr	r3, [pc, #64]	; (8006490 <xPortStartScheduler+0x140>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a0f      	ldr	r2, [pc, #60]	; (8006490 <xPortStartScheduler+0x140>)
 8006452:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006456:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006458:	f7ff ff66 	bl	8006328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800645c:	f7ff f830 	bl	80054c0 <vTaskSwitchContext>
	prvTaskExitError();
 8006460:	f7ff ff22 	bl	80062a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3718      	adds	r7, #24
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	e000ed00 	.word	0xe000ed00
 8006474:	410fc271 	.word	0x410fc271
 8006478:	410fc270 	.word	0x410fc270
 800647c:	e000e400 	.word	0xe000e400
 8006480:	20000f64 	.word	0x20000f64
 8006484:	20000f68 	.word	0x20000f68
 8006488:	e000ed20 	.word	0xe000ed20
 800648c:	2000000c 	.word	0x2000000c
 8006490:	e000ef34 	.word	0xe000ef34

08006494 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	607b      	str	r3, [r7, #4]
}
 80064ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064ae:	4b0f      	ldr	r3, [pc, #60]	; (80064ec <vPortEnterCritical+0x58>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3301      	adds	r3, #1
 80064b4:	4a0d      	ldr	r2, [pc, #52]	; (80064ec <vPortEnterCritical+0x58>)
 80064b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80064b8:	4b0c      	ldr	r3, [pc, #48]	; (80064ec <vPortEnterCritical+0x58>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d10f      	bne.n	80064e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80064c0:	4b0b      	ldr	r3, [pc, #44]	; (80064f0 <vPortEnterCritical+0x5c>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00a      	beq.n	80064e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80064ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	603b      	str	r3, [r7, #0]
}
 80064dc:	bf00      	nop
 80064de:	e7fe      	b.n	80064de <vPortEnterCritical+0x4a>
	}
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	2000000c 	.word	0x2000000c
 80064f0:	e000ed04 	.word	0xe000ed04

080064f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064fa:	4b12      	ldr	r3, [pc, #72]	; (8006544 <vPortExitCritical+0x50>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10a      	bne.n	8006518 <vPortExitCritical+0x24>
	__asm volatile
 8006502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	607b      	str	r3, [r7, #4]
}
 8006514:	bf00      	nop
 8006516:	e7fe      	b.n	8006516 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006518:	4b0a      	ldr	r3, [pc, #40]	; (8006544 <vPortExitCritical+0x50>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	3b01      	subs	r3, #1
 800651e:	4a09      	ldr	r2, [pc, #36]	; (8006544 <vPortExitCritical+0x50>)
 8006520:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006522:	4b08      	ldr	r3, [pc, #32]	; (8006544 <vPortExitCritical+0x50>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d105      	bne.n	8006536 <vPortExitCritical+0x42>
 800652a:	2300      	movs	r3, #0
 800652c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	f383 8811 	msr	BASEPRI, r3
}
 8006534:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006536:	bf00      	nop
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	2000000c 	.word	0x2000000c
	...

08006550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006550:	f3ef 8009 	mrs	r0, PSP
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	4b15      	ldr	r3, [pc, #84]	; (80065b0 <pxCurrentTCBConst>)
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	f01e 0f10 	tst.w	lr, #16
 8006560:	bf08      	it	eq
 8006562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800656a:	6010      	str	r0, [r2, #0]
 800656c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006570:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006574:	f380 8811 	msr	BASEPRI, r0
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f7fe ff9e 	bl	80054c0 <vTaskSwitchContext>
 8006584:	f04f 0000 	mov.w	r0, #0
 8006588:	f380 8811 	msr	BASEPRI, r0
 800658c:	bc09      	pop	{r0, r3}
 800658e:	6819      	ldr	r1, [r3, #0]
 8006590:	6808      	ldr	r0, [r1, #0]
 8006592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006596:	f01e 0f10 	tst.w	lr, #16
 800659a:	bf08      	it	eq
 800659c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80065a0:	f380 8809 	msr	PSP, r0
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	f3af 8000 	nop.w

080065b0 <pxCurrentTCBConst>:
 80065b0:	20000930 	.word	0x20000930
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80065b4:	bf00      	nop
 80065b6:	bf00      	nop

080065b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	607b      	str	r3, [r7, #4]
}
 80065d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80065d2:	f7fe febb 	bl	800534c <xTaskIncrementTick>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d003      	beq.n	80065e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80065dc:	4b06      	ldr	r3, [pc, #24]	; (80065f8 <xPortSysTickHandler+0x40>)
 80065de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	2300      	movs	r3, #0
 80065e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	f383 8811 	msr	BASEPRI, r3
}
 80065ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065f0:	bf00      	nop
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	e000ed04 	.word	0xe000ed04

080065fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80065fc:	b480      	push	{r7}
 80065fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006600:	4b0b      	ldr	r3, [pc, #44]	; (8006630 <vPortSetupTimerInterrupt+0x34>)
 8006602:	2200      	movs	r2, #0
 8006604:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006606:	4b0b      	ldr	r3, [pc, #44]	; (8006634 <vPortSetupTimerInterrupt+0x38>)
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800660c:	4b0a      	ldr	r3, [pc, #40]	; (8006638 <vPortSetupTimerInterrupt+0x3c>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a0a      	ldr	r2, [pc, #40]	; (800663c <vPortSetupTimerInterrupt+0x40>)
 8006612:	fba2 2303 	umull	r2, r3, r2, r3
 8006616:	099b      	lsrs	r3, r3, #6
 8006618:	4a09      	ldr	r2, [pc, #36]	; (8006640 <vPortSetupTimerInterrupt+0x44>)
 800661a:	3b01      	subs	r3, #1
 800661c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800661e:	4b04      	ldr	r3, [pc, #16]	; (8006630 <vPortSetupTimerInterrupt+0x34>)
 8006620:	2207      	movs	r2, #7
 8006622:	601a      	str	r2, [r3, #0]
}
 8006624:	bf00      	nop
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	e000e010 	.word	0xe000e010
 8006634:	e000e018 	.word	0xe000e018
 8006638:	20000000 	.word	0x20000000
 800663c:	10624dd3 	.word	0x10624dd3
 8006640:	e000e014 	.word	0xe000e014

08006644 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006644:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006654 <vPortEnableVFP+0x10>
 8006648:	6801      	ldr	r1, [r0, #0]
 800664a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800664e:	6001      	str	r1, [r0, #0]
 8006650:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006652:	bf00      	nop
 8006654:	e000ed88 	.word	0xe000ed88

08006658 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800665e:	f3ef 8305 	mrs	r3, IPSR
 8006662:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2b0f      	cmp	r3, #15
 8006668:	d914      	bls.n	8006694 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800666a:	4a17      	ldr	r2, [pc, #92]	; (80066c8 <vPortValidateInterruptPriority+0x70>)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4413      	add	r3, r2
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006674:	4b15      	ldr	r3, [pc, #84]	; (80066cc <vPortValidateInterruptPriority+0x74>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	7afa      	ldrb	r2, [r7, #11]
 800667a:	429a      	cmp	r2, r3
 800667c:	d20a      	bcs.n	8006694 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	607b      	str	r3, [r7, #4]
}
 8006690:	bf00      	nop
 8006692:	e7fe      	b.n	8006692 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006694:	4b0e      	ldr	r3, [pc, #56]	; (80066d0 <vPortValidateInterruptPriority+0x78>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800669c:	4b0d      	ldr	r3, [pc, #52]	; (80066d4 <vPortValidateInterruptPriority+0x7c>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d90a      	bls.n	80066ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80066a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a8:	f383 8811 	msr	BASEPRI, r3
 80066ac:	f3bf 8f6f 	isb	sy
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	603b      	str	r3, [r7, #0]
}
 80066b6:	bf00      	nop
 80066b8:	e7fe      	b.n	80066b8 <vPortValidateInterruptPriority+0x60>
	}
 80066ba:	bf00      	nop
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	e000e3f0 	.word	0xe000e3f0
 80066cc:	20000f64 	.word	0x20000f64
 80066d0:	e000ed0c 	.word	0xe000ed0c
 80066d4:	20000f68 	.word	0x20000f68

080066d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b08a      	sub	sp, #40	; 0x28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80066e0:	2300      	movs	r3, #0
 80066e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80066e4:	f7fe fd76 	bl	80051d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066e8:	4b5b      	ldr	r3, [pc, #364]	; (8006858 <pvPortMalloc+0x180>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066f0:	f000 f920 	bl	8006934 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066f4:	4b59      	ldr	r3, [pc, #356]	; (800685c <pvPortMalloc+0x184>)
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4013      	ands	r3, r2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f040 8093 	bne.w	8006828 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d01d      	beq.n	8006744 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006708:	2208      	movs	r2, #8
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4413      	add	r3, r2
 800670e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f003 0307 	and.w	r3, r3, #7
 8006716:	2b00      	cmp	r3, #0
 8006718:	d014      	beq.n	8006744 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f023 0307 	bic.w	r3, r3, #7
 8006720:	3308      	adds	r3, #8
 8006722:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f003 0307 	and.w	r3, r3, #7
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <pvPortMalloc+0x6c>
	__asm volatile
 800672e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	617b      	str	r3, [r7, #20]
}
 8006740:	bf00      	nop
 8006742:	e7fe      	b.n	8006742 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d06e      	beq.n	8006828 <pvPortMalloc+0x150>
 800674a:	4b45      	ldr	r3, [pc, #276]	; (8006860 <pvPortMalloc+0x188>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	429a      	cmp	r2, r3
 8006752:	d869      	bhi.n	8006828 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006754:	4b43      	ldr	r3, [pc, #268]	; (8006864 <pvPortMalloc+0x18c>)
 8006756:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006758:	4b42      	ldr	r3, [pc, #264]	; (8006864 <pvPortMalloc+0x18c>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800675e:	e004      	b.n	800676a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	429a      	cmp	r2, r3
 8006772:	d903      	bls.n	800677c <pvPortMalloc+0xa4>
 8006774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1f1      	bne.n	8006760 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800677c:	4b36      	ldr	r3, [pc, #216]	; (8006858 <pvPortMalloc+0x180>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006782:	429a      	cmp	r2, r3
 8006784:	d050      	beq.n	8006828 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006786:	6a3b      	ldr	r3, [r7, #32]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2208      	movs	r2, #8
 800678c:	4413      	add	r3, r2
 800678e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	1ad2      	subs	r2, r2, r3
 80067a0:	2308      	movs	r3, #8
 80067a2:	005b      	lsls	r3, r3, #1
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d91f      	bls.n	80067e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80067a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4413      	add	r3, r2
 80067ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	f003 0307 	and.w	r3, r3, #7
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00a      	beq.n	80067d0 <pvPortMalloc+0xf8>
	__asm volatile
 80067ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	613b      	str	r3, [r7, #16]
}
 80067cc:	bf00      	nop
 80067ce:	e7fe      	b.n	80067ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	1ad2      	subs	r2, r2, r3
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067e2:	69b8      	ldr	r0, [r7, #24]
 80067e4:	f000 f908 	bl	80069f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067e8:	4b1d      	ldr	r3, [pc, #116]	; (8006860 <pvPortMalloc+0x188>)
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	4a1b      	ldr	r2, [pc, #108]	; (8006860 <pvPortMalloc+0x188>)
 80067f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067f6:	4b1a      	ldr	r3, [pc, #104]	; (8006860 <pvPortMalloc+0x188>)
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	4b1b      	ldr	r3, [pc, #108]	; (8006868 <pvPortMalloc+0x190>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d203      	bcs.n	800680a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006802:	4b17      	ldr	r3, [pc, #92]	; (8006860 <pvPortMalloc+0x188>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a18      	ldr	r2, [pc, #96]	; (8006868 <pvPortMalloc+0x190>)
 8006808:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	685a      	ldr	r2, [r3, #4]
 800680e:	4b13      	ldr	r3, [pc, #76]	; (800685c <pvPortMalloc+0x184>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	431a      	orrs	r2, r3
 8006814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006816:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681a:	2200      	movs	r2, #0
 800681c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800681e:	4b13      	ldr	r3, [pc, #76]	; (800686c <pvPortMalloc+0x194>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	3301      	adds	r3, #1
 8006824:	4a11      	ldr	r2, [pc, #68]	; (800686c <pvPortMalloc+0x194>)
 8006826:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006828:	f7fe fce2 	bl	80051f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	f003 0307 	and.w	r3, r3, #7
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00a      	beq.n	800684c <pvPortMalloc+0x174>
	__asm volatile
 8006836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683a:	f383 8811 	msr	BASEPRI, r3
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f3bf 8f4f 	dsb	sy
 8006846:	60fb      	str	r3, [r7, #12]
}
 8006848:	bf00      	nop
 800684a:	e7fe      	b.n	800684a <pvPortMalloc+0x172>
	return pvReturn;
 800684c:	69fb      	ldr	r3, [r7, #28]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3728      	adds	r7, #40	; 0x28
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	20001b2c 	.word	0x20001b2c
 800685c:	20001b40 	.word	0x20001b40
 8006860:	20001b30 	.word	0x20001b30
 8006864:	20001b24 	.word	0x20001b24
 8006868:	20001b34 	.word	0x20001b34
 800686c:	20001b38 	.word	0x20001b38

08006870 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d04d      	beq.n	800691e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006882:	2308      	movs	r3, #8
 8006884:	425b      	negs	r3, r3
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	4413      	add	r3, r2
 800688a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	4b24      	ldr	r3, [pc, #144]	; (8006928 <vPortFree+0xb8>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4013      	ands	r3, r2
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10a      	bne.n	80068b4 <vPortFree+0x44>
	__asm volatile
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	60fb      	str	r3, [r7, #12]
}
 80068b0:	bf00      	nop
 80068b2:	e7fe      	b.n	80068b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00a      	beq.n	80068d2 <vPortFree+0x62>
	__asm volatile
 80068bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c0:	f383 8811 	msr	BASEPRI, r3
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	60bb      	str	r3, [r7, #8]
}
 80068ce:	bf00      	nop
 80068d0:	e7fe      	b.n	80068d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	4b14      	ldr	r3, [pc, #80]	; (8006928 <vPortFree+0xb8>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4013      	ands	r3, r2
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d01e      	beq.n	800691e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d11a      	bne.n	800691e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	4b0e      	ldr	r3, [pc, #56]	; (8006928 <vPortFree+0xb8>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	43db      	mvns	r3, r3
 80068f2:	401a      	ands	r2, r3
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80068f8:	f7fe fc6c 	bl	80051d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	4b0a      	ldr	r3, [pc, #40]	; (800692c <vPortFree+0xbc>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4413      	add	r3, r2
 8006906:	4a09      	ldr	r2, [pc, #36]	; (800692c <vPortFree+0xbc>)
 8006908:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800690a:	6938      	ldr	r0, [r7, #16]
 800690c:	f000 f874 	bl	80069f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006910:	4b07      	ldr	r3, [pc, #28]	; (8006930 <vPortFree+0xc0>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3301      	adds	r3, #1
 8006916:	4a06      	ldr	r2, [pc, #24]	; (8006930 <vPortFree+0xc0>)
 8006918:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800691a:	f7fe fc69 	bl	80051f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800691e:	bf00      	nop
 8006920:	3718      	adds	r7, #24
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	20001b40 	.word	0x20001b40
 800692c:	20001b30 	.word	0x20001b30
 8006930:	20001b3c 	.word	0x20001b3c

08006934 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800693a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800693e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006940:	4b27      	ldr	r3, [pc, #156]	; (80069e0 <prvHeapInit+0xac>)
 8006942:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f003 0307 	and.w	r3, r3, #7
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00c      	beq.n	8006968 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3307      	adds	r3, #7
 8006952:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f023 0307 	bic.w	r3, r3, #7
 800695a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	4a1f      	ldr	r2, [pc, #124]	; (80069e0 <prvHeapInit+0xac>)
 8006964:	4413      	add	r3, r2
 8006966:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800696c:	4a1d      	ldr	r2, [pc, #116]	; (80069e4 <prvHeapInit+0xb0>)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006972:	4b1c      	ldr	r3, [pc, #112]	; (80069e4 <prvHeapInit+0xb0>)
 8006974:	2200      	movs	r2, #0
 8006976:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	4413      	add	r3, r2
 800697e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006980:	2208      	movs	r2, #8
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	1a9b      	subs	r3, r3, r2
 8006986:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f023 0307 	bic.w	r3, r3, #7
 800698e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4a15      	ldr	r2, [pc, #84]	; (80069e8 <prvHeapInit+0xb4>)
 8006994:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006996:	4b14      	ldr	r3, [pc, #80]	; (80069e8 <prvHeapInit+0xb4>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2200      	movs	r2, #0
 800699c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800699e:	4b12      	ldr	r3, [pc, #72]	; (80069e8 <prvHeapInit+0xb4>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2200      	movs	r2, #0
 80069a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	1ad2      	subs	r2, r2, r3
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80069b4:	4b0c      	ldr	r3, [pc, #48]	; (80069e8 <prvHeapInit+0xb4>)
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	4a0a      	ldr	r2, [pc, #40]	; (80069ec <prvHeapInit+0xb8>)
 80069c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	4a09      	ldr	r2, [pc, #36]	; (80069f0 <prvHeapInit+0xbc>)
 80069ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80069cc:	4b09      	ldr	r3, [pc, #36]	; (80069f4 <prvHeapInit+0xc0>)
 80069ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80069d2:	601a      	str	r2, [r3, #0]
}
 80069d4:	bf00      	nop
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	20000f6c 	.word	0x20000f6c
 80069e4:	20001b24 	.word	0x20001b24
 80069e8:	20001b2c 	.word	0x20001b2c
 80069ec:	20001b34 	.word	0x20001b34
 80069f0:	20001b30 	.word	0x20001b30
 80069f4:	20001b40 	.word	0x20001b40

080069f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a00:	4b28      	ldr	r3, [pc, #160]	; (8006aa4 <prvInsertBlockIntoFreeList+0xac>)
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	e002      	b.n	8006a0c <prvInsertBlockIntoFreeList+0x14>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	60fb      	str	r3, [r7, #12]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d8f7      	bhi.n	8006a06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	4413      	add	r3, r2
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d108      	bne.n	8006a3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	441a      	add	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	441a      	add	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d118      	bne.n	8006a80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	4b15      	ldr	r3, [pc, #84]	; (8006aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d00d      	beq.n	8006a76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	441a      	add	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	e008      	b.n	8006a88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a76:	4b0c      	ldr	r3, [pc, #48]	; (8006aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	601a      	str	r2, [r3, #0]
 8006a7e:	e003      	b.n	8006a88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d002      	beq.n	8006a96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a96:	bf00      	nop
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	20001b24 	.word	0x20001b24
 8006aa8:	20001b2c 	.word	0x20001b2c

08006aac <__libc_init_array>:
 8006aac:	b570      	push	{r4, r5, r6, lr}
 8006aae:	4d0d      	ldr	r5, [pc, #52]	; (8006ae4 <__libc_init_array+0x38>)
 8006ab0:	4c0d      	ldr	r4, [pc, #52]	; (8006ae8 <__libc_init_array+0x3c>)
 8006ab2:	1b64      	subs	r4, r4, r5
 8006ab4:	10a4      	asrs	r4, r4, #2
 8006ab6:	2600      	movs	r6, #0
 8006ab8:	42a6      	cmp	r6, r4
 8006aba:	d109      	bne.n	8006ad0 <__libc_init_array+0x24>
 8006abc:	4d0b      	ldr	r5, [pc, #44]	; (8006aec <__libc_init_array+0x40>)
 8006abe:	4c0c      	ldr	r4, [pc, #48]	; (8006af0 <__libc_init_array+0x44>)
 8006ac0:	f000 f8f2 	bl	8006ca8 <_init>
 8006ac4:	1b64      	subs	r4, r4, r5
 8006ac6:	10a4      	asrs	r4, r4, #2
 8006ac8:	2600      	movs	r6, #0
 8006aca:	42a6      	cmp	r6, r4
 8006acc:	d105      	bne.n	8006ada <__libc_init_array+0x2e>
 8006ace:	bd70      	pop	{r4, r5, r6, pc}
 8006ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ad4:	4798      	blx	r3
 8006ad6:	3601      	adds	r6, #1
 8006ad8:	e7ee      	b.n	8006ab8 <__libc_init_array+0xc>
 8006ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ade:	4798      	blx	r3
 8006ae0:	3601      	adds	r6, #1
 8006ae2:	e7f2      	b.n	8006aca <__libc_init_array+0x1e>
 8006ae4:	08006e18 	.word	0x08006e18
 8006ae8:	08006e18 	.word	0x08006e18
 8006aec:	08006e18 	.word	0x08006e18
 8006af0:	08006e1c 	.word	0x08006e1c

08006af4 <__retarget_lock_acquire_recursive>:
 8006af4:	4770      	bx	lr

08006af6 <__retarget_lock_release_recursive>:
 8006af6:	4770      	bx	lr

08006af8 <memcpy>:
 8006af8:	440a      	add	r2, r1
 8006afa:	4291      	cmp	r1, r2
 8006afc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006b00:	d100      	bne.n	8006b04 <memcpy+0xc>
 8006b02:	4770      	bx	lr
 8006b04:	b510      	push	{r4, lr}
 8006b06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b0e:	4291      	cmp	r1, r2
 8006b10:	d1f9      	bne.n	8006b06 <memcpy+0xe>
 8006b12:	bd10      	pop	{r4, pc}

08006b14 <memset>:
 8006b14:	4402      	add	r2, r0
 8006b16:	4603      	mov	r3, r0
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d100      	bne.n	8006b1e <memset+0xa>
 8006b1c:	4770      	bx	lr
 8006b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8006b22:	e7f9      	b.n	8006b18 <memset+0x4>

08006b24 <cleanup_glue>:
 8006b24:	b538      	push	{r3, r4, r5, lr}
 8006b26:	460c      	mov	r4, r1
 8006b28:	6809      	ldr	r1, [r1, #0]
 8006b2a:	4605      	mov	r5, r0
 8006b2c:	b109      	cbz	r1, 8006b32 <cleanup_glue+0xe>
 8006b2e:	f7ff fff9 	bl	8006b24 <cleanup_glue>
 8006b32:	4621      	mov	r1, r4
 8006b34:	4628      	mov	r0, r5
 8006b36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b3a:	f000 b869 	b.w	8006c10 <_free_r>
	...

08006b40 <_reclaim_reent>:
 8006b40:	4b2c      	ldr	r3, [pc, #176]	; (8006bf4 <_reclaim_reent+0xb4>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4283      	cmp	r3, r0
 8006b46:	b570      	push	{r4, r5, r6, lr}
 8006b48:	4604      	mov	r4, r0
 8006b4a:	d051      	beq.n	8006bf0 <_reclaim_reent+0xb0>
 8006b4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006b4e:	b143      	cbz	r3, 8006b62 <_reclaim_reent+0x22>
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d14a      	bne.n	8006bec <_reclaim_reent+0xac>
 8006b56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b58:	6819      	ldr	r1, [r3, #0]
 8006b5a:	b111      	cbz	r1, 8006b62 <_reclaim_reent+0x22>
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f000 f857 	bl	8006c10 <_free_r>
 8006b62:	6961      	ldr	r1, [r4, #20]
 8006b64:	b111      	cbz	r1, 8006b6c <_reclaim_reent+0x2c>
 8006b66:	4620      	mov	r0, r4
 8006b68:	f000 f852 	bl	8006c10 <_free_r>
 8006b6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006b6e:	b111      	cbz	r1, 8006b76 <_reclaim_reent+0x36>
 8006b70:	4620      	mov	r0, r4
 8006b72:	f000 f84d 	bl	8006c10 <_free_r>
 8006b76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006b78:	b111      	cbz	r1, 8006b80 <_reclaim_reent+0x40>
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	f000 f848 	bl	8006c10 <_free_r>
 8006b80:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006b82:	b111      	cbz	r1, 8006b8a <_reclaim_reent+0x4a>
 8006b84:	4620      	mov	r0, r4
 8006b86:	f000 f843 	bl	8006c10 <_free_r>
 8006b8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006b8c:	b111      	cbz	r1, 8006b94 <_reclaim_reent+0x54>
 8006b8e:	4620      	mov	r0, r4
 8006b90:	f000 f83e 	bl	8006c10 <_free_r>
 8006b94:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006b96:	b111      	cbz	r1, 8006b9e <_reclaim_reent+0x5e>
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f000 f839 	bl	8006c10 <_free_r>
 8006b9e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006ba0:	b111      	cbz	r1, 8006ba8 <_reclaim_reent+0x68>
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	f000 f834 	bl	8006c10 <_free_r>
 8006ba8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006baa:	b111      	cbz	r1, 8006bb2 <_reclaim_reent+0x72>
 8006bac:	4620      	mov	r0, r4
 8006bae:	f000 f82f 	bl	8006c10 <_free_r>
 8006bb2:	69a3      	ldr	r3, [r4, #24]
 8006bb4:	b1e3      	cbz	r3, 8006bf0 <_reclaim_reent+0xb0>
 8006bb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006bb8:	4620      	mov	r0, r4
 8006bba:	4798      	blx	r3
 8006bbc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006bbe:	b1b9      	cbz	r1, 8006bf0 <_reclaim_reent+0xb0>
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006bc6:	f7ff bfad 	b.w	8006b24 <cleanup_glue>
 8006bca:	5949      	ldr	r1, [r1, r5]
 8006bcc:	b941      	cbnz	r1, 8006be0 <_reclaim_reent+0xa0>
 8006bce:	3504      	adds	r5, #4
 8006bd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bd2:	2d80      	cmp	r5, #128	; 0x80
 8006bd4:	68d9      	ldr	r1, [r3, #12]
 8006bd6:	d1f8      	bne.n	8006bca <_reclaim_reent+0x8a>
 8006bd8:	4620      	mov	r0, r4
 8006bda:	f000 f819 	bl	8006c10 <_free_r>
 8006bde:	e7ba      	b.n	8006b56 <_reclaim_reent+0x16>
 8006be0:	680e      	ldr	r6, [r1, #0]
 8006be2:	4620      	mov	r0, r4
 8006be4:	f000 f814 	bl	8006c10 <_free_r>
 8006be8:	4631      	mov	r1, r6
 8006bea:	e7ef      	b.n	8006bcc <_reclaim_reent+0x8c>
 8006bec:	2500      	movs	r5, #0
 8006bee:	e7ef      	b.n	8006bd0 <_reclaim_reent+0x90>
 8006bf0:	bd70      	pop	{r4, r5, r6, pc}
 8006bf2:	bf00      	nop
 8006bf4:	20000010 	.word	0x20000010

08006bf8 <__malloc_lock>:
 8006bf8:	4801      	ldr	r0, [pc, #4]	; (8006c00 <__malloc_lock+0x8>)
 8006bfa:	f7ff bf7b 	b.w	8006af4 <__retarget_lock_acquire_recursive>
 8006bfe:	bf00      	nop
 8006c00:	20001b44 	.word	0x20001b44

08006c04 <__malloc_unlock>:
 8006c04:	4801      	ldr	r0, [pc, #4]	; (8006c0c <__malloc_unlock+0x8>)
 8006c06:	f7ff bf76 	b.w	8006af6 <__retarget_lock_release_recursive>
 8006c0a:	bf00      	nop
 8006c0c:	20001b44 	.word	0x20001b44

08006c10 <_free_r>:
 8006c10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c12:	2900      	cmp	r1, #0
 8006c14:	d044      	beq.n	8006ca0 <_free_r+0x90>
 8006c16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c1a:	9001      	str	r0, [sp, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f1a1 0404 	sub.w	r4, r1, #4
 8006c22:	bfb8      	it	lt
 8006c24:	18e4      	addlt	r4, r4, r3
 8006c26:	f7ff ffe7 	bl	8006bf8 <__malloc_lock>
 8006c2a:	4a1e      	ldr	r2, [pc, #120]	; (8006ca4 <_free_r+0x94>)
 8006c2c:	9801      	ldr	r0, [sp, #4]
 8006c2e:	6813      	ldr	r3, [r2, #0]
 8006c30:	b933      	cbnz	r3, 8006c40 <_free_r+0x30>
 8006c32:	6063      	str	r3, [r4, #4]
 8006c34:	6014      	str	r4, [r2, #0]
 8006c36:	b003      	add	sp, #12
 8006c38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c3c:	f7ff bfe2 	b.w	8006c04 <__malloc_unlock>
 8006c40:	42a3      	cmp	r3, r4
 8006c42:	d908      	bls.n	8006c56 <_free_r+0x46>
 8006c44:	6825      	ldr	r5, [r4, #0]
 8006c46:	1961      	adds	r1, r4, r5
 8006c48:	428b      	cmp	r3, r1
 8006c4a:	bf01      	itttt	eq
 8006c4c:	6819      	ldreq	r1, [r3, #0]
 8006c4e:	685b      	ldreq	r3, [r3, #4]
 8006c50:	1949      	addeq	r1, r1, r5
 8006c52:	6021      	streq	r1, [r4, #0]
 8006c54:	e7ed      	b.n	8006c32 <_free_r+0x22>
 8006c56:	461a      	mov	r2, r3
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	b10b      	cbz	r3, 8006c60 <_free_r+0x50>
 8006c5c:	42a3      	cmp	r3, r4
 8006c5e:	d9fa      	bls.n	8006c56 <_free_r+0x46>
 8006c60:	6811      	ldr	r1, [r2, #0]
 8006c62:	1855      	adds	r5, r2, r1
 8006c64:	42a5      	cmp	r5, r4
 8006c66:	d10b      	bne.n	8006c80 <_free_r+0x70>
 8006c68:	6824      	ldr	r4, [r4, #0]
 8006c6a:	4421      	add	r1, r4
 8006c6c:	1854      	adds	r4, r2, r1
 8006c6e:	42a3      	cmp	r3, r4
 8006c70:	6011      	str	r1, [r2, #0]
 8006c72:	d1e0      	bne.n	8006c36 <_free_r+0x26>
 8006c74:	681c      	ldr	r4, [r3, #0]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	6053      	str	r3, [r2, #4]
 8006c7a:	4421      	add	r1, r4
 8006c7c:	6011      	str	r1, [r2, #0]
 8006c7e:	e7da      	b.n	8006c36 <_free_r+0x26>
 8006c80:	d902      	bls.n	8006c88 <_free_r+0x78>
 8006c82:	230c      	movs	r3, #12
 8006c84:	6003      	str	r3, [r0, #0]
 8006c86:	e7d6      	b.n	8006c36 <_free_r+0x26>
 8006c88:	6825      	ldr	r5, [r4, #0]
 8006c8a:	1961      	adds	r1, r4, r5
 8006c8c:	428b      	cmp	r3, r1
 8006c8e:	bf04      	itt	eq
 8006c90:	6819      	ldreq	r1, [r3, #0]
 8006c92:	685b      	ldreq	r3, [r3, #4]
 8006c94:	6063      	str	r3, [r4, #4]
 8006c96:	bf04      	itt	eq
 8006c98:	1949      	addeq	r1, r1, r5
 8006c9a:	6021      	streq	r1, [r4, #0]
 8006c9c:	6054      	str	r4, [r2, #4]
 8006c9e:	e7ca      	b.n	8006c36 <_free_r+0x26>
 8006ca0:	b003      	add	sp, #12
 8006ca2:	bd30      	pop	{r4, r5, pc}
 8006ca4:	20001b48 	.word	0x20001b48

08006ca8 <_init>:
 8006ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006caa:	bf00      	nop
 8006cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cae:	bc08      	pop	{r3}
 8006cb0:	469e      	mov	lr, r3
 8006cb2:	4770      	bx	lr

08006cb4 <_fini>:
 8006cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb6:	bf00      	nop
 8006cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cba:	bc08      	pop	{r3}
 8006cbc:	469e      	mov	lr, r3
 8006cbe:	4770      	bx	lr
