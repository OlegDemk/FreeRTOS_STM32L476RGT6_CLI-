
CLI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006aa0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08006c30  08006c30  00016c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d28  08006d28  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006d28  08006d28  00016d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d30  08006d30  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d30  08006d30  00016d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d34  08006d34  00016d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006d38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ac4  20000074  08006dac  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b38  08006dac  00021b38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d52c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038c3  00000000  00000000  0003d5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  00040e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015f8  00000000  00000000  000425d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000380b  00000000  00000000  00043bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ca2  00000000  00000000  000473db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe189  00000000  00000000  0006107d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015f206  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006520  00000000  00000000  0015f258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c18 	.word	0x08006c18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006c18 	.word	0x08006c18

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fa51 	bl	800097e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f818 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f898 	bl	8000614 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004e4:	f000 f866 	bl	80005b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e8:	f003 fd20 	bl	8003f2c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004ec:	4a05      	ldr	r2, [pc, #20]	; (8000504 <main+0x30>)
 80004ee:	2100      	movs	r1, #0
 80004f0:	4805      	ldr	r0, [pc, #20]	; (8000508 <main+0x34>)
 80004f2:	f003 fd65 	bl	8003fc0 <osThreadNew>
 80004f6:	4603      	mov	r3, r0
 80004f8:	4a04      	ldr	r2, [pc, #16]	; (800050c <main+0x38>)
 80004fa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004fc:	f003 fd3a 	bl	8003f74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000500:	e7fe      	b.n	8000500 <main+0x2c>
 8000502:	bf00      	nop
 8000504:	08006c5c 	.word	0x08006c5c
 8000508:	08000679 	.word	0x08000679
 800050c:	20000114 	.word	0x20000114

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b096      	sub	sp, #88	; 0x58
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	2244      	movs	r2, #68	; 0x44
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f006 fab0 	bl	8006a84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	463b      	mov	r3, r7
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000532:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000536:	f000 fda7 	bl	8001088 <HAL_PWREx_ControlVoltageScaling>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000540:	f000 f8ce 	bl	80006e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000544:	2310      	movs	r3, #16
 8000546:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000548:	2301      	movs	r3, #1
 800054a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000550:	2360      	movs	r3, #96	; 0x60
 8000552:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000554:	2302      	movs	r3, #2
 8000556:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000558:	2301      	movs	r3, #1
 800055a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800055c:	2301      	movs	r3, #1
 800055e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000560:	2328      	movs	r3, #40	; 0x28
 8000562:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000564:	2307      	movs	r3, #7
 8000566:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000568:	2302      	movs	r3, #2
 800056a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800056c:	2302      	movs	r3, #2
 800056e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	4618      	mov	r0, r3
 8000576:	f000 fddd 	bl	8001134 <HAL_RCC_OscConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000580:	f000 f8ae 	bl	80006e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000584:	230f      	movs	r3, #15
 8000586:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000588:	2303      	movs	r3, #3
 800058a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000598:	463b      	mov	r3, r7
 800059a:	2104      	movs	r1, #4
 800059c:	4618      	mov	r0, r3
 800059e:	f001 f9a5 	bl	80018ec <HAL_RCC_ClockConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005a8:	f000 f89a 	bl	80006e0 <Error_Handler>
  }
}
 80005ac:	bf00      	nop
 80005ae:	3758      	adds	r7, #88	; 0x58
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005b8:	4b14      	ldr	r3, [pc, #80]	; (800060c <MX_USART1_UART_Init+0x58>)
 80005ba:	4a15      	ldr	r2, [pc, #84]	; (8000610 <MX_USART1_UART_Init+0x5c>)
 80005bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005be:	4b13      	ldr	r3, [pc, #76]	; (800060c <MX_USART1_UART_Init+0x58>)
 80005c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <MX_USART1_UART_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <MX_USART1_UART_Init+0x58>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <MX_USART1_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MX_USART1_UART_Init+0x58>)
 80005da:	220c      	movs	r2, #12
 80005dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <MX_USART1_UART_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_USART1_UART_Init+0x58>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <MX_USART1_UART_Init+0x58>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <MX_USART1_UART_Init+0x58>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <MX_USART1_UART_Init+0x58>)
 80005f8:	f002 fb5c 	bl	8002cb4 <HAL_UART_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000602:	f000 f86d 	bl	80006e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000090 	.word	0x20000090
 8000610:	40013800 	.word	0x40013800

08000614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <MX_GPIO_Init+0x60>)
 800062a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062c:	4a11      	ldr	r2, [pc, #68]	; (8000674 <MX_GPIO_Init+0x60>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_GPIO_Init+0x60>)
 8000636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	603b      	str	r3, [r7, #0]
 800063e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800064a:	f000 fcdd 	bl	8001008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800064e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000652:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000654:	2301      	movs	r3, #1
 8000656:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	4619      	mov	r1, r3
 8000664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000668:	f000 fb24 	bl	8000cb4 <HAL_GPIO_Init>

}
 800066c:	bf00      	nop
 800066e:	3718      	adds	r7, #24
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40021000 	.word	0x40021000

08000678 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, LED_Pin);
 8000680:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000688:	f000 fcd6 	bl	8001038 <HAL_GPIO_TogglePin>
	  char test_str[] = "Test \n\r";
 800068c:	4a09      	ldr	r2, [pc, #36]	; (80006b4 <StartDefaultTask+0x3c>)
 800068e:	f107 0308 	add.w	r3, r7, #8
 8000692:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000696:	e883 0003 	stmia.w	r3, {r0, r1}
	  HAL_UART_Transmit(&huart1, test_str, sizeof(test_str), 100);
 800069a:	f107 0108 	add.w	r1, r7, #8
 800069e:	2364      	movs	r3, #100	; 0x64
 80006a0:	2208      	movs	r2, #8
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <StartDefaultTask+0x40>)
 80006a4:	f002 fb54 	bl	8002d50 <HAL_UART_Transmit>

	 // HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size);
	  osDelay(1000);
 80006a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ac:	f003 fd1a 	bl	80040e4 <osDelay>
  {
 80006b0:	e7e6      	b.n	8000680 <StartDefaultTask+0x8>
 80006b2:	bf00      	nop
 80006b4:	08006c3c 	.word	0x08006c3c
 80006b8:	20000090 	.word	0x20000090

080006bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a04      	ldr	r2, [pc, #16]	; (80006dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d101      	bne.n	80006d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006ce:	f000 f96f 	bl	80009b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40000800 	.word	0x40000800

080006e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e4:	b672      	cpsid	i
}
 80006e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <Error_Handler+0x8>
	...

080006ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <HAL_MspInit+0x4c>)
 80006f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006f6:	4a10      	ldr	r2, [pc, #64]	; (8000738 <HAL_MspInit+0x4c>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6613      	str	r3, [r2, #96]	; 0x60
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <HAL_MspInit+0x4c>)
 8000700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <HAL_MspInit+0x4c>)
 800070c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800070e:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <HAL_MspInit+0x4c>)
 8000710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000714:	6593      	str	r3, [r2, #88]	; 0x58
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <HAL_MspInit+0x4c>)
 8000718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800071a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	210f      	movs	r1, #15
 8000726:	f06f 0001 	mvn.w	r0, #1
 800072a:	f000 fa19 	bl	8000b60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40021000 	.word	0x40021000

0800073c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b0ac      	sub	sp, #176	; 0xb0
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	2288      	movs	r2, #136	; 0x88
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f006 f991 	bl	8006a84 <memset>
  if(huart->Instance==USART1)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a26      	ldr	r2, [pc, #152]	; (8000800 <HAL_UART_MspInit+0xc4>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d144      	bne.n	80007f6 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800076c:	2301      	movs	r3, #1
 800076e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000770:	2300      	movs	r3, #0
 8000772:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4618      	mov	r0, r3
 800077a:	f001 fb0d 	bl	8001d98 <HAL_RCCEx_PeriphCLKConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000784:	f7ff ffac 	bl	80006e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <HAL_UART_MspInit+0xc8>)
 800078a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800078c:	4a1d      	ldr	r2, [pc, #116]	; (8000804 <HAL_UART_MspInit+0xc8>)
 800078e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000792:	6613      	str	r3, [r2, #96]	; 0x60
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <HAL_UART_MspInit+0xc8>)
 8000796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a0:	4b18      	ldr	r3, [pc, #96]	; (8000804 <HAL_UART_MspInit+0xc8>)
 80007a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a4:	4a17      	ldr	r2, [pc, #92]	; (8000804 <HAL_UART_MspInit+0xc8>)
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <HAL_UART_MspInit+0xc8>)
 80007ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b0:	f003 0301 	and.w	r3, r3, #1
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007b8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80007bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007cc:	2303      	movs	r3, #3
 80007ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007d2:	2307      	movs	r3, #7
 80007d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007dc:	4619      	mov	r1, r3
 80007de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e2:	f000 fa67 	bl	8000cb4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2105      	movs	r1, #5
 80007ea:	2025      	movs	r0, #37	; 0x25
 80007ec:	f000 f9b8 	bl	8000b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007f0:	2025      	movs	r0, #37	; 0x25
 80007f2:	f000 f9d1 	bl	8000b98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007f6:	bf00      	nop
 80007f8:	37b0      	adds	r7, #176	; 0xb0
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40013800 	.word	0x40013800
 8000804:	40021000 	.word	0x40021000

08000808 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08c      	sub	sp, #48	; 0x30
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000818:	2200      	movs	r2, #0
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	201e      	movs	r0, #30
 800081e:	f000 f99f 	bl	8000b60 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000822:	201e      	movs	r0, #30
 8000824:	f000 f9b8 	bl	8000b98 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000828:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <HAL_InitTick+0x9c>)
 800082a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800082c:	4a1d      	ldr	r2, [pc, #116]	; (80008a4 <HAL_InitTick+0x9c>)
 800082e:	f043 0304 	orr.w	r3, r3, #4
 8000832:	6593      	str	r3, [r2, #88]	; 0x58
 8000834:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <HAL_InitTick+0x9c>)
 8000836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000838:	f003 0304 	and.w	r3, r3, #4
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000840:	f107 0210 	add.w	r2, r7, #16
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4611      	mov	r1, r2
 800084a:	4618      	mov	r0, r3
 800084c:	f001 fa12 	bl	8001c74 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000850:	f001 f9e4 	bl	8001c1c <HAL_RCC_GetPCLK1Freq>
 8000854:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000858:	4a13      	ldr	r2, [pc, #76]	; (80008a8 <HAL_InitTick+0xa0>)
 800085a:	fba2 2303 	umull	r2, r3, r2, r3
 800085e:	0c9b      	lsrs	r3, r3, #18
 8000860:	3b01      	subs	r3, #1
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <HAL_InitTick+0xa4>)
 8000866:	4a12      	ldr	r2, [pc, #72]	; (80008b0 <HAL_InitTick+0xa8>)
 8000868:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <HAL_InitTick+0xa4>)
 800086c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000870:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000872:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <HAL_InitTick+0xa4>)
 8000874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000876:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <HAL_InitTick+0xa4>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <HAL_InitTick+0xa4>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000884:	4809      	ldr	r0, [pc, #36]	; (80008ac <HAL_InitTick+0xa4>)
 8000886:	f001 ff43 	bl	8002710 <HAL_TIM_Base_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d104      	bne.n	800089a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000890:	4806      	ldr	r0, [pc, #24]	; (80008ac <HAL_InitTick+0xa4>)
 8000892:	f001 ff9f 	bl	80027d4 <HAL_TIM_Base_Start_IT>
 8000896:	4603      	mov	r3, r0
 8000898:	e000      	b.n	800089c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
}
 800089c:	4618      	mov	r0, r3
 800089e:	3730      	adds	r7, #48	; 0x30
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40021000 	.word	0x40021000
 80008a8:	431bde83 	.word	0x431bde83
 80008ac:	20000118 	.word	0x20000118
 80008b0:	40000800 	.word	0x40000800

080008b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <NMI_Handler+0x4>

080008ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008be:	e7fe      	b.n	80008be <HardFault_Handler+0x4>

080008c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <MemManage_Handler+0x4>

080008c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <BusFault_Handler+0x4>

080008cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <UsageFault_Handler+0x4>

080008d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80008e4:	4802      	ldr	r0, [pc, #8]	; (80008f0 <TIM4_IRQHandler+0x10>)
 80008e6:	f001 ffe5 	bl	80028b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000118 	.word	0x20000118

080008f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008f8:	4802      	ldr	r0, [pc, #8]	; (8000904 <USART1_IRQHandler+0x10>)
 80008fa:	f002 fabd 	bl	8002e78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000090 	.word	0x20000090

08000908 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <SystemInit+0x20>)
 800090e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000912:	4a05      	ldr	r2, [pc, #20]	; (8000928 <SystemInit+0x20>)
 8000914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800092c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000964 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000930:	f7ff ffea 	bl	8000908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000934:	480c      	ldr	r0, [pc, #48]	; (8000968 <LoopForever+0x6>)
  ldr r1, =_edata
 8000936:	490d      	ldr	r1, [pc, #52]	; (800096c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000938:	4a0d      	ldr	r2, [pc, #52]	; (8000970 <LoopForever+0xe>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800093c:	e002      	b.n	8000944 <LoopCopyDataInit>

0800093e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000942:	3304      	adds	r3, #4

08000944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000948:	d3f9      	bcc.n	800093e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094a:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <LoopForever+0x12>)
  ldr r4, =_ebss
 800094c:	4c0a      	ldr	r4, [pc, #40]	; (8000978 <LoopForever+0x16>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000950:	e001      	b.n	8000956 <LoopFillZerobss>

08000952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000954:	3204      	adds	r2, #4

08000956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000958:	d3fb      	bcc.n	8000952 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800095a:	f006 f85f 	bl	8006a1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800095e:	f7ff fdb9 	bl	80004d4 <main>

08000962 <LoopForever>:

LoopForever:
    b LoopForever
 8000962:	e7fe      	b.n	8000962 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000964:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800096c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000970:	08006d38 	.word	0x08006d38
  ldr r2, =_sbss
 8000974:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000978:	20001b38 	.word	0x20001b38

0800097c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800097c:	e7fe      	b.n	800097c <ADC1_2_IRQHandler>

0800097e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b082      	sub	sp, #8
 8000982:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000984:	2300      	movs	r3, #0
 8000986:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000988:	2003      	movs	r0, #3
 800098a:	f000 f8de 	bl	8000b4a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800098e:	200f      	movs	r0, #15
 8000990:	f7ff ff3a 	bl	8000808 <HAL_InitTick>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d002      	beq.n	80009a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	71fb      	strb	r3, [r7, #7]
 800099e:	e001      	b.n	80009a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009a0:	f7ff fea4 	bl	80006ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009a4:	79fb      	ldrb	r3, [r7, #7]
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_IncTick+0x20>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_IncTick+0x24>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4413      	add	r3, r2
 80009c0:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <HAL_IncTick+0x24>)
 80009c2:	6013      	str	r3, [r2, #0]
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	20000008 	.word	0x20000008
 80009d4:	20000164 	.word	0x20000164

080009d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return uwTick;
 80009dc:	4b03      	ldr	r3, [pc, #12]	; (80009ec <HAL_GetTick+0x14>)
 80009de:	681b      	ldr	r3, [r3, #0]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20000164 	.word	0x20000164

080009f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f003 0307 	and.w	r3, r3, #7
 80009fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a22:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	60d3      	str	r3, [r2, #12]
}
 8000a28:	bf00      	nop
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <__NVIC_GetPriorityGrouping+0x18>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	0a1b      	lsrs	r3, r3, #8
 8000a42:	f003 0307 	and.w	r3, r3, #7
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	db0b      	blt.n	8000a7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	f003 021f 	and.w	r2, r3, #31
 8000a6c:	4907      	ldr	r1, [pc, #28]	; (8000a8c <__NVIC_EnableIRQ+0x38>)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	095b      	lsrs	r3, r3, #5
 8000a74:	2001      	movs	r0, #1
 8000a76:	fa00 f202 	lsl.w	r2, r0, r2
 8000a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000e100 	.word	0xe000e100

08000a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	6039      	str	r1, [r7, #0]
 8000a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	db0a      	blt.n	8000aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	490c      	ldr	r1, [pc, #48]	; (8000adc <__NVIC_SetPriority+0x4c>)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	0112      	lsls	r2, r2, #4
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	440b      	add	r3, r1
 8000ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab8:	e00a      	b.n	8000ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4908      	ldr	r1, [pc, #32]	; (8000ae0 <__NVIC_SetPriority+0x50>)
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	f003 030f 	and.w	r3, r3, #15
 8000ac6:	3b04      	subs	r3, #4
 8000ac8:	0112      	lsls	r2, r2, #4
 8000aca:	b2d2      	uxtb	r2, r2
 8000acc:	440b      	add	r3, r1
 8000ace:	761a      	strb	r2, [r3, #24]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000e100 	.word	0xe000e100
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	f1c3 0307 	rsb	r3, r3, #7
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	bf28      	it	cs
 8000b02:	2304      	movcs	r3, #4
 8000b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	2b06      	cmp	r3, #6
 8000b0c:	d902      	bls.n	8000b14 <NVIC_EncodePriority+0x30>
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3b03      	subs	r3, #3
 8000b12:	e000      	b.n	8000b16 <NVIC_EncodePriority+0x32>
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	43da      	mvns	r2, r3
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	401a      	ands	r2, r3
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	fa01 f303 	lsl.w	r3, r1, r3
 8000b36:	43d9      	mvns	r1, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	4313      	orrs	r3, r2
         );
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3724      	adds	r7, #36	; 0x24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff ff4c 	bl	80009f0 <__NVIC_SetPriorityGrouping>
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
 8000b6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b72:	f7ff ff61 	bl	8000a38 <__NVIC_GetPriorityGrouping>
 8000b76:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	68b9      	ldr	r1, [r7, #8]
 8000b7c:	6978      	ldr	r0, [r7, #20]
 8000b7e:	f7ff ffb1 	bl	8000ae4 <NVIC_EncodePriority>
 8000b82:	4602      	mov	r2, r0
 8000b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b88:	4611      	mov	r1, r2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff ff80 	bl	8000a90 <__NVIC_SetPriority>
}
 8000b90:	bf00      	nop
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff ff54 	bl	8000a54 <__NVIC_EnableIRQ>
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d008      	beq.n	8000bde <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2204      	movs	r2, #4
 8000bd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e022      	b.n	8000c24 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f022 020e 	bic.w	r2, r2, #14
 8000bec:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f022 0201 	bic.w	r2, r2, #1
 8000bfc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	f003 021c 	and.w	r2, r3, #28
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c10:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2201      	movs	r2, #1
 8000c16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d005      	beq.n	8000c54 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2204      	movs	r2, #4
 8000c4c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	73fb      	strb	r3, [r7, #15]
 8000c52:	e029      	b.n	8000ca8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f022 020e 	bic.w	r2, r2, #14
 8000c62:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f022 0201 	bic.w	r2, r2, #1
 8000c72:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c78:	f003 021c 	and.w	r2, r3, #28
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	2101      	movs	r1, #1
 8000c82:	fa01 f202 	lsl.w	r2, r1, r2
 8000c86:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d003      	beq.n	8000ca8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	4798      	blx	r3
    }
  }
  return status;
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b087      	sub	sp, #28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cc2:	e17f      	b.n	8000fc4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	2101      	movs	r1, #1
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f000 8171 	beq.w	8000fbe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 0303 	and.w	r3, r3, #3
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d005      	beq.n	8000cf4 <HAL_GPIO_Init+0x40>
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 0303 	and.w	r3, r3, #3
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d130      	bne.n	8000d56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	2203      	movs	r2, #3
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	68da      	ldr	r2, [r3, #12]
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	091b      	lsrs	r3, r3, #4
 8000d40:	f003 0201 	and.w	r2, r3, #1
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f003 0303 	and.w	r3, r3, #3
 8000d5e:	2b03      	cmp	r3, #3
 8000d60:	d118      	bne.n	8000d94 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d68:	2201      	movs	r2, #1
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	08db      	lsrs	r3, r3, #3
 8000d7e:	f003 0201 	and.w	r2, r3, #1
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 0303 	and.w	r3, r3, #3
 8000d9c:	2b03      	cmp	r3, #3
 8000d9e:	d017      	beq.n	8000dd0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	2203      	movs	r2, #3
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	689a      	ldr	r2, [r3, #8]
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0303 	and.w	r3, r3, #3
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d123      	bne.n	8000e24 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	08da      	lsrs	r2, r3, #3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3208      	adds	r2, #8
 8000de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000de8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	f003 0307 	and.w	r3, r3, #7
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	220f      	movs	r2, #15
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	691a      	ldr	r2, [r3, #16]
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	08da      	lsrs	r2, r3, #3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3208      	adds	r2, #8
 8000e1e:	6939      	ldr	r1, [r7, #16]
 8000e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0203 	and.w	r2, r3, #3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f000 80ac 	beq.w	8000fbe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e66:	4b5f      	ldr	r3, [pc, #380]	; (8000fe4 <HAL_GPIO_Init+0x330>)
 8000e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e6a:	4a5e      	ldr	r2, [pc, #376]	; (8000fe4 <HAL_GPIO_Init+0x330>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6613      	str	r3, [r2, #96]	; 0x60
 8000e72:	4b5c      	ldr	r3, [pc, #368]	; (8000fe4 <HAL_GPIO_Init+0x330>)
 8000e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e7e:	4a5a      	ldr	r2, [pc, #360]	; (8000fe8 <HAL_GPIO_Init+0x334>)
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	089b      	lsrs	r3, r3, #2
 8000e84:	3302      	adds	r3, #2
 8000e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	f003 0303 	and.w	r3, r3, #3
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	220f      	movs	r2, #15
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ea8:	d025      	beq.n	8000ef6 <HAL_GPIO_Init+0x242>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a4f      	ldr	r2, [pc, #316]	; (8000fec <HAL_GPIO_Init+0x338>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d01f      	beq.n	8000ef2 <HAL_GPIO_Init+0x23e>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a4e      	ldr	r2, [pc, #312]	; (8000ff0 <HAL_GPIO_Init+0x33c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d019      	beq.n	8000eee <HAL_GPIO_Init+0x23a>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a4d      	ldr	r2, [pc, #308]	; (8000ff4 <HAL_GPIO_Init+0x340>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d013      	beq.n	8000eea <HAL_GPIO_Init+0x236>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a4c      	ldr	r2, [pc, #304]	; (8000ff8 <HAL_GPIO_Init+0x344>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d00d      	beq.n	8000ee6 <HAL_GPIO_Init+0x232>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a4b      	ldr	r2, [pc, #300]	; (8000ffc <HAL_GPIO_Init+0x348>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d007      	beq.n	8000ee2 <HAL_GPIO_Init+0x22e>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a4a      	ldr	r2, [pc, #296]	; (8001000 <HAL_GPIO_Init+0x34c>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d101      	bne.n	8000ede <HAL_GPIO_Init+0x22a>
 8000eda:	2306      	movs	r3, #6
 8000edc:	e00c      	b.n	8000ef8 <HAL_GPIO_Init+0x244>
 8000ede:	2307      	movs	r3, #7
 8000ee0:	e00a      	b.n	8000ef8 <HAL_GPIO_Init+0x244>
 8000ee2:	2305      	movs	r3, #5
 8000ee4:	e008      	b.n	8000ef8 <HAL_GPIO_Init+0x244>
 8000ee6:	2304      	movs	r3, #4
 8000ee8:	e006      	b.n	8000ef8 <HAL_GPIO_Init+0x244>
 8000eea:	2303      	movs	r3, #3
 8000eec:	e004      	b.n	8000ef8 <HAL_GPIO_Init+0x244>
 8000eee:	2302      	movs	r3, #2
 8000ef0:	e002      	b.n	8000ef8 <HAL_GPIO_Init+0x244>
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e000      	b.n	8000ef8 <HAL_GPIO_Init+0x244>
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	697a      	ldr	r2, [r7, #20]
 8000efa:	f002 0203 	and.w	r2, r2, #3
 8000efe:	0092      	lsls	r2, r2, #2
 8000f00:	4093      	lsls	r3, r2
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f08:	4937      	ldr	r1, [pc, #220]	; (8000fe8 <HAL_GPIO_Init+0x334>)
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	089b      	lsrs	r3, r3, #2
 8000f0e:	3302      	adds	r3, #2
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f16:	4b3b      	ldr	r3, [pc, #236]	; (8001004 <HAL_GPIO_Init+0x350>)
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f3a:	4a32      	ldr	r2, [pc, #200]	; (8001004 <HAL_GPIO_Init+0x350>)
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f40:	4b30      	ldr	r3, [pc, #192]	; (8001004 <HAL_GPIO_Init+0x350>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f64:	4a27      	ldr	r2, [pc, #156]	; (8001004 <HAL_GPIO_Init+0x350>)
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f6a:	4b26      	ldr	r3, [pc, #152]	; (8001004 <HAL_GPIO_Init+0x350>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f8e:	4a1d      	ldr	r2, [pc, #116]	; (8001004 <HAL_GPIO_Init+0x350>)
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <HAL_GPIO_Init+0x350>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fb8:	4a12      	ldr	r2, [pc, #72]	; (8001004 <HAL_GPIO_Init+0x350>)
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa22 f303 	lsr.w	r3, r2, r3
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f47f ae78 	bne.w	8000cc4 <HAL_GPIO_Init+0x10>
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	371c      	adds	r7, #28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	40010000 	.word	0x40010000
 8000fec:	48000400 	.word	0x48000400
 8000ff0:	48000800 	.word	0x48000800
 8000ff4:	48000c00 	.word	0x48000c00
 8000ff8:	48001000 	.word	0x48001000
 8000ffc:	48001400 	.word	0x48001400
 8001000:	48001800 	.word	0x48001800
 8001004:	40010400 	.word	0x40010400

08001008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	807b      	strh	r3, [r7, #2]
 8001014:	4613      	mov	r3, r2
 8001016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001018:	787b      	ldrb	r3, [r7, #1]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800101e:	887a      	ldrh	r2, [r7, #2]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001024:	e002      	b.n	800102c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001026:	887a      	ldrh	r2, [r7, #2]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800104a:	887a      	ldrh	r2, [r7, #2]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4013      	ands	r3, r2
 8001050:	041a      	lsls	r2, r3, #16
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	43d9      	mvns	r1, r3
 8001056:	887b      	ldrh	r3, [r7, #2]
 8001058:	400b      	ands	r3, r1
 800105a:	431a      	orrs	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	619a      	str	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <HAL_PWREx_GetVoltageRange+0x18>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40007000 	.word	0x40007000

08001088 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001096:	d130      	bne.n	80010fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001098:	4b23      	ldr	r3, [pc, #140]	; (8001128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010a4:	d038      	beq.n	8001118 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a6:	4b20      	ldr	r3, [pc, #128]	; (8001128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010ae:	4a1e      	ldr	r2, [pc, #120]	; (8001128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010b6:	4b1d      	ldr	r3, [pc, #116]	; (800112c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2232      	movs	r2, #50	; 0x32
 80010bc:	fb02 f303 	mul.w	r3, r2, r3
 80010c0:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010c2:	fba2 2303 	umull	r2, r3, r2, r3
 80010c6:	0c9b      	lsrs	r3, r3, #18
 80010c8:	3301      	adds	r3, #1
 80010ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010cc:	e002      	b.n	80010d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010e0:	d102      	bne.n	80010e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1f2      	bne.n	80010ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010f4:	d110      	bne.n	8001118 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e00f      	b.n	800111a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001106:	d007      	beq.n	8001118 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001108:	4b07      	ldr	r3, [pc, #28]	; (8001128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001110:	4a05      	ldr	r2, [pc, #20]	; (8001128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001112:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001116:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40007000 	.word	0x40007000
 800112c:	20000000 	.word	0x20000000
 8001130:	431bde83 	.word	0x431bde83

08001134 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e3ca      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001146:	4b97      	ldr	r3, [pc, #604]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f003 030c 	and.w	r3, r3, #12
 800114e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001150:	4b94      	ldr	r3, [pc, #592]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0310 	and.w	r3, r3, #16
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 80e4 	beq.w	8001330 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d007      	beq.n	800117e <HAL_RCC_OscConfig+0x4a>
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	2b0c      	cmp	r3, #12
 8001172:	f040 808b 	bne.w	800128c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	2b01      	cmp	r3, #1
 800117a:	f040 8087 	bne.w	800128c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800117e:	4b89      	ldr	r3, [pc, #548]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d005      	beq.n	8001196 <HAL_RCC_OscConfig+0x62>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e3a2      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a1a      	ldr	r2, [r3, #32]
 800119a:	4b82      	ldr	r3, [pc, #520]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d004      	beq.n	80011b0 <HAL_RCC_OscConfig+0x7c>
 80011a6:	4b7f      	ldr	r3, [pc, #508]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011ae:	e005      	b.n	80011bc <HAL_RCC_OscConfig+0x88>
 80011b0:	4b7c      	ldr	r3, [pc, #496]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 80011b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011b6:	091b      	lsrs	r3, r3, #4
 80011b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011bc:	4293      	cmp	r3, r2
 80011be:	d223      	bcs.n	8001208 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 fd87 	bl	8001cd8 <RCC_SetFlashLatencyFromMSIRange>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e383      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011d4:	4b73      	ldr	r3, [pc, #460]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a72      	ldr	r2, [pc, #456]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 80011da:	f043 0308 	orr.w	r3, r3, #8
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	4b70      	ldr	r3, [pc, #448]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a1b      	ldr	r3, [r3, #32]
 80011ec:	496d      	ldr	r1, [pc, #436]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 80011ee:	4313      	orrs	r3, r2
 80011f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011f2:	4b6c      	ldr	r3, [pc, #432]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	4968      	ldr	r1, [pc, #416]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 8001202:	4313      	orrs	r3, r2
 8001204:	604b      	str	r3, [r1, #4]
 8001206:	e025      	b.n	8001254 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001208:	4b66      	ldr	r3, [pc, #408]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a65      	ldr	r2, [pc, #404]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 800120e:	f043 0308 	orr.w	r3, r3, #8
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	4b63      	ldr	r3, [pc, #396]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a1b      	ldr	r3, [r3, #32]
 8001220:	4960      	ldr	r1, [pc, #384]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 8001222:	4313      	orrs	r3, r2
 8001224:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001226:	4b5f      	ldr	r3, [pc, #380]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	021b      	lsls	r3, r3, #8
 8001234:	495b      	ldr	r1, [pc, #364]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 8001236:	4313      	orrs	r3, r2
 8001238:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d109      	bne.n	8001254 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a1b      	ldr	r3, [r3, #32]
 8001244:	4618      	mov	r0, r3
 8001246:	f000 fd47 	bl	8001cd8 <RCC_SetFlashLatencyFromMSIRange>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e343      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001254:	f000 fc4a 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8001258:	4602      	mov	r2, r0
 800125a:	4b52      	ldr	r3, [pc, #328]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	091b      	lsrs	r3, r3, #4
 8001260:	f003 030f 	and.w	r3, r3, #15
 8001264:	4950      	ldr	r1, [pc, #320]	; (80013a8 <HAL_RCC_OscConfig+0x274>)
 8001266:	5ccb      	ldrb	r3, [r1, r3]
 8001268:	f003 031f 	and.w	r3, r3, #31
 800126c:	fa22 f303 	lsr.w	r3, r2, r3
 8001270:	4a4e      	ldr	r2, [pc, #312]	; (80013ac <HAL_RCC_OscConfig+0x278>)
 8001272:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001274:	4b4e      	ldr	r3, [pc, #312]	; (80013b0 <HAL_RCC_OscConfig+0x27c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fac5 	bl	8000808 <HAL_InitTick>
 800127e:	4603      	mov	r3, r0
 8001280:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d052      	beq.n	800132e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	e327      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d032      	beq.n	80012fa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001294:	4b43      	ldr	r3, [pc, #268]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a42      	ldr	r2, [pc, #264]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012a0:	f7ff fb9a 	bl	80009d8 <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012a8:	f7ff fb96 	bl	80009d8 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e310      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012ba:	4b3a      	ldr	r3, [pc, #232]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0f0      	beq.n	80012a8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012c6:	4b37      	ldr	r3, [pc, #220]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a36      	ldr	r2, [pc, #216]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 80012cc:	f043 0308 	orr.w	r3, r3, #8
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	4b34      	ldr	r3, [pc, #208]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a1b      	ldr	r3, [r3, #32]
 80012de:	4931      	ldr	r1, [pc, #196]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012e4:	4b2f      	ldr	r3, [pc, #188]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	021b      	lsls	r3, r3, #8
 80012f2:	492c      	ldr	r1, [pc, #176]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 80012f4:	4313      	orrs	r3, r2
 80012f6:	604b      	str	r3, [r1, #4]
 80012f8:	e01a      	b.n	8001330 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012fa:	4b2a      	ldr	r3, [pc, #168]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a29      	ldr	r2, [pc, #164]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 8001300:	f023 0301 	bic.w	r3, r3, #1
 8001304:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001306:	f7ff fb67 	bl	80009d8 <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800130e:	f7ff fb63 	bl	80009d8 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e2dd      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001320:	4b20      	ldr	r3, [pc, #128]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f0      	bne.n	800130e <HAL_RCC_OscConfig+0x1da>
 800132c:	e000      	b.n	8001330 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800132e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	2b00      	cmp	r3, #0
 800133a:	d074      	beq.n	8001426 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	2b08      	cmp	r3, #8
 8001340:	d005      	beq.n	800134e <HAL_RCC_OscConfig+0x21a>
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	2b0c      	cmp	r3, #12
 8001346:	d10e      	bne.n	8001366 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	2b03      	cmp	r3, #3
 800134c:	d10b      	bne.n	8001366 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d064      	beq.n	8001424 <HAL_RCC_OscConfig+0x2f0>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d160      	bne.n	8001424 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e2ba      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800136e:	d106      	bne.n	800137e <HAL_RCC_OscConfig+0x24a>
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 8001376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	e026      	b.n	80013cc <HAL_RCC_OscConfig+0x298>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001386:	d115      	bne.n	80013b4 <HAL_RCC_OscConfig+0x280>
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a05      	ldr	r2, [pc, #20]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 800138e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a02      	ldr	r2, [pc, #8]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 800139a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	e014      	b.n	80013cc <HAL_RCC_OscConfig+0x298>
 80013a2:	bf00      	nop
 80013a4:	40021000 	.word	0x40021000
 80013a8:	08006c80 	.word	0x08006c80
 80013ac:	20000000 	.word	0x20000000
 80013b0:	20000004 	.word	0x20000004
 80013b4:	4ba0      	ldr	r3, [pc, #640]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a9f      	ldr	r2, [pc, #636]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 80013ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	4b9d      	ldr	r3, [pc, #628]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a9c      	ldr	r2, [pc, #624]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 80013c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d013      	beq.n	80013fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d4:	f7ff fb00 	bl	80009d8 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013dc:	f7ff fafc 	bl	80009d8 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b64      	cmp	r3, #100	; 0x64
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e276      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013ee:	4b92      	ldr	r3, [pc, #584]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f0      	beq.n	80013dc <HAL_RCC_OscConfig+0x2a8>
 80013fa:	e014      	b.n	8001426 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fc:	f7ff faec 	bl	80009d8 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001404:	f7ff fae8 	bl	80009d8 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b64      	cmp	r3, #100	; 0x64
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e262      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001416:	4b88      	ldr	r3, [pc, #544]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0x2d0>
 8001422:	e000      	b.n	8001426 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d060      	beq.n	80014f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	2b04      	cmp	r3, #4
 8001436:	d005      	beq.n	8001444 <HAL_RCC_OscConfig+0x310>
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	2b0c      	cmp	r3, #12
 800143c:	d119      	bne.n	8001472 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	2b02      	cmp	r3, #2
 8001442:	d116      	bne.n	8001472 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001444:	4b7c      	ldr	r3, [pc, #496]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <HAL_RCC_OscConfig+0x328>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e23f      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145c:	4b76      	ldr	r3, [pc, #472]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	061b      	lsls	r3, r3, #24
 800146a:	4973      	ldr	r1, [pc, #460]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 800146c:	4313      	orrs	r3, r2
 800146e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001470:	e040      	b.n	80014f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d023      	beq.n	80014c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800147a:	4b6f      	ldr	r3, [pc, #444]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a6e      	ldr	r2, [pc, #440]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 8001480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001486:	f7ff faa7 	bl	80009d8 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800148e:	f7ff faa3 	bl	80009d8 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e21d      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014a0:	4b65      	ldr	r3, [pc, #404]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0f0      	beq.n	800148e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ac:	4b62      	ldr	r3, [pc, #392]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	061b      	lsls	r3, r3, #24
 80014ba:	495f      	ldr	r1, [pc, #380]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	604b      	str	r3, [r1, #4]
 80014c0:	e018      	b.n	80014f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014c2:	4b5d      	ldr	r3, [pc, #372]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a5c      	ldr	r2, [pc, #368]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 80014c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ce:	f7ff fa83 	bl	80009d8 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d6:	f7ff fa7f 	bl	80009d8 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e1f9      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014e8:	4b53      	ldr	r3, [pc, #332]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f0      	bne.n	80014d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d03c      	beq.n	800157a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d01c      	beq.n	8001542 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001508:	4b4b      	ldr	r3, [pc, #300]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 800150a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800150e:	4a4a      	ldr	r2, [pc, #296]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001518:	f7ff fa5e 	bl	80009d8 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001520:	f7ff fa5a 	bl	80009d8 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e1d4      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001532:	4b41      	ldr	r3, [pc, #260]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 8001534:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0ef      	beq.n	8001520 <HAL_RCC_OscConfig+0x3ec>
 8001540:	e01b      	b.n	800157a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001542:	4b3d      	ldr	r3, [pc, #244]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 8001544:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001548:	4a3b      	ldr	r2, [pc, #236]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 800154a:	f023 0301 	bic.w	r3, r3, #1
 800154e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001552:	f7ff fa41 	bl	80009d8 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800155a:	f7ff fa3d 	bl	80009d8 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e1b7      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800156c:	4b32      	ldr	r3, [pc, #200]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 800156e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1ef      	bne.n	800155a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 80a6 	beq.w	80016d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001588:	2300      	movs	r3, #0
 800158a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800158c:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 800158e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10d      	bne.n	80015b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001598:	4b27      	ldr	r3, [pc, #156]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 800159a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159c:	4a26      	ldr	r2, [pc, #152]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 800159e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a2:	6593      	str	r3, [r2, #88]	; 0x58
 80015a4:	4b24      	ldr	r3, [pc, #144]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 80015a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015b0:	2301      	movs	r3, #1
 80015b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015b4:	4b21      	ldr	r3, [pc, #132]	; (800163c <HAL_RCC_OscConfig+0x508>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d118      	bne.n	80015f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015c0:	4b1e      	ldr	r3, [pc, #120]	; (800163c <HAL_RCC_OscConfig+0x508>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a1d      	ldr	r2, [pc, #116]	; (800163c <HAL_RCC_OscConfig+0x508>)
 80015c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015cc:	f7ff fa04 	bl	80009d8 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d4:	f7ff fa00 	bl	80009d8 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e17a      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <HAL_RCC_OscConfig+0x508>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d108      	bne.n	800160c <HAL_RCC_OscConfig+0x4d8>
 80015fa:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 80015fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001600:	4a0d      	ldr	r2, [pc, #52]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800160a:	e029      	b.n	8001660 <HAL_RCC_OscConfig+0x52c>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2b05      	cmp	r3, #5
 8001612:	d115      	bne.n	8001640 <HAL_RCC_OscConfig+0x50c>
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 8001616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800161a:	4a07      	ldr	r2, [pc, #28]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001624:	4b04      	ldr	r3, [pc, #16]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 8001626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800162a:	4a03      	ldr	r2, [pc, #12]	; (8001638 <HAL_RCC_OscConfig+0x504>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001634:	e014      	b.n	8001660 <HAL_RCC_OscConfig+0x52c>
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000
 800163c:	40007000 	.word	0x40007000
 8001640:	4b9c      	ldr	r3, [pc, #624]	; (80018b4 <HAL_RCC_OscConfig+0x780>)
 8001642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001646:	4a9b      	ldr	r2, [pc, #620]	; (80018b4 <HAL_RCC_OscConfig+0x780>)
 8001648:	f023 0301 	bic.w	r3, r3, #1
 800164c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001650:	4b98      	ldr	r3, [pc, #608]	; (80018b4 <HAL_RCC_OscConfig+0x780>)
 8001652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001656:	4a97      	ldr	r2, [pc, #604]	; (80018b4 <HAL_RCC_OscConfig+0x780>)
 8001658:	f023 0304 	bic.w	r3, r3, #4
 800165c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d016      	beq.n	8001696 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001668:	f7ff f9b6 	bl	80009d8 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800166e:	e00a      	b.n	8001686 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001670:	f7ff f9b2 	bl	80009d8 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	f241 3288 	movw	r2, #5000	; 0x1388
 800167e:	4293      	cmp	r3, r2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e12a      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001686:	4b8b      	ldr	r3, [pc, #556]	; (80018b4 <HAL_RCC_OscConfig+0x780>)
 8001688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0ed      	beq.n	8001670 <HAL_RCC_OscConfig+0x53c>
 8001694:	e015      	b.n	80016c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001696:	f7ff f99f 	bl	80009d8 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800169c:	e00a      	b.n	80016b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800169e:	f7ff f99b 	bl	80009d8 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e113      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016b4:	4b7f      	ldr	r3, [pc, #508]	; (80018b4 <HAL_RCC_OscConfig+0x780>)
 80016b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1ed      	bne.n	800169e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016c2:	7ffb      	ldrb	r3, [r7, #31]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d105      	bne.n	80016d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c8:	4b7a      	ldr	r3, [pc, #488]	; (80018b4 <HAL_RCC_OscConfig+0x780>)
 80016ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016cc:	4a79      	ldr	r2, [pc, #484]	; (80018b4 <HAL_RCC_OscConfig+0x780>)
 80016ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016d2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 80fe 	beq.w	80018da <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	f040 80d0 	bne.w	8001888 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80016e8:	4b72      	ldr	r3, [pc, #456]	; (80018b4 <HAL_RCC_OscConfig+0x780>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f003 0203 	and.w	r2, r3, #3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d130      	bne.n	800175e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	3b01      	subs	r3, #1
 8001708:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800170a:	429a      	cmp	r2, r3
 800170c:	d127      	bne.n	800175e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001718:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800171a:	429a      	cmp	r2, r3
 800171c:	d11f      	bne.n	800175e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001728:	2a07      	cmp	r2, #7
 800172a:	bf14      	ite	ne
 800172c:	2201      	movne	r2, #1
 800172e:	2200      	moveq	r2, #0
 8001730:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001732:	4293      	cmp	r3, r2
 8001734:	d113      	bne.n	800175e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001740:	085b      	lsrs	r3, r3, #1
 8001742:	3b01      	subs	r3, #1
 8001744:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001746:	429a      	cmp	r2, r3
 8001748:	d109      	bne.n	800175e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001754:	085b      	lsrs	r3, r3, #1
 8001756:	3b01      	subs	r3, #1
 8001758:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800175a:	429a      	cmp	r2, r3
 800175c:	d06e      	beq.n	800183c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	2b0c      	cmp	r3, #12
 8001762:	d069      	beq.n	8001838 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001764:	4b53      	ldr	r3, [pc, #332]	; (80018b4 <HAL_RCC_OscConfig+0x780>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d105      	bne.n	800177c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001770:	4b50      	ldr	r3, [pc, #320]	; (80018b4 <HAL_RCC_OscConfig+0x780>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0ad      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001780:	4b4c      	ldr	r3, [pc, #304]	; (80018b4 <HAL_RCC_OscConfig+0x780>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a4b      	ldr	r2, [pc, #300]	; (80018b4 <HAL_RCC_OscConfig+0x780>)
 8001786:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800178a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800178c:	f7ff f924 	bl	80009d8 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001794:	f7ff f920 	bl	80009d8 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e09a      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017a6:	4b43      	ldr	r3, [pc, #268]	; (80018b4 <HAL_RCC_OscConfig+0x780>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f0      	bne.n	8001794 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017b2:	4b40      	ldr	r3, [pc, #256]	; (80018b4 <HAL_RCC_OscConfig+0x780>)
 80017b4:	68da      	ldr	r2, [r3, #12]
 80017b6:	4b40      	ldr	r3, [pc, #256]	; (80018b8 <HAL_RCC_OscConfig+0x784>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017c2:	3a01      	subs	r2, #1
 80017c4:	0112      	lsls	r2, r2, #4
 80017c6:	4311      	orrs	r1, r2
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017cc:	0212      	lsls	r2, r2, #8
 80017ce:	4311      	orrs	r1, r2
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80017d4:	0852      	lsrs	r2, r2, #1
 80017d6:	3a01      	subs	r2, #1
 80017d8:	0552      	lsls	r2, r2, #21
 80017da:	4311      	orrs	r1, r2
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017e0:	0852      	lsrs	r2, r2, #1
 80017e2:	3a01      	subs	r2, #1
 80017e4:	0652      	lsls	r2, r2, #25
 80017e6:	4311      	orrs	r1, r2
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017ec:	0912      	lsrs	r2, r2, #4
 80017ee:	0452      	lsls	r2, r2, #17
 80017f0:	430a      	orrs	r2, r1
 80017f2:	4930      	ldr	r1, [pc, #192]	; (80018b4 <HAL_RCC_OscConfig+0x780>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80017f8:	4b2e      	ldr	r3, [pc, #184]	; (80018b4 <HAL_RCC_OscConfig+0x780>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a2d      	ldr	r2, [pc, #180]	; (80018b4 <HAL_RCC_OscConfig+0x780>)
 80017fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001802:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001804:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <HAL_RCC_OscConfig+0x780>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	4a2a      	ldr	r2, [pc, #168]	; (80018b4 <HAL_RCC_OscConfig+0x780>)
 800180a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800180e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001810:	f7ff f8e2 	bl	80009d8 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001818:	f7ff f8de 	bl	80009d8 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e058      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800182a:	4b22      	ldr	r3, [pc, #136]	; (80018b4 <HAL_RCC_OscConfig+0x780>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001836:	e050      	b.n	80018da <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e04f      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800183c:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <HAL_RCC_OscConfig+0x780>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d148      	bne.n	80018da <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001848:	4b1a      	ldr	r3, [pc, #104]	; (80018b4 <HAL_RCC_OscConfig+0x780>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a19      	ldr	r2, [pc, #100]	; (80018b4 <HAL_RCC_OscConfig+0x780>)
 800184e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001852:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001854:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <HAL_RCC_OscConfig+0x780>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	4a16      	ldr	r2, [pc, #88]	; (80018b4 <HAL_RCC_OscConfig+0x780>)
 800185a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800185e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001860:	f7ff f8ba 	bl	80009d8 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001868:	f7ff f8b6 	bl	80009d8 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e030      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <HAL_RCC_OscConfig+0x780>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f0      	beq.n	8001868 <HAL_RCC_OscConfig+0x734>
 8001886:	e028      	b.n	80018da <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	2b0c      	cmp	r3, #12
 800188c:	d023      	beq.n	80018d6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_RCC_OscConfig+0x780>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <HAL_RCC_OscConfig+0x780>)
 8001894:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001898:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189a:	f7ff f89d 	bl	80009d8 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a0:	e00c      	b.n	80018bc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a2:	f7ff f899 	bl	80009d8 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d905      	bls.n	80018bc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e013      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
 80018b4:	40021000 	.word	0x40021000
 80018b8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <HAL_RCC_OscConfig+0x7b0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1ec      	bne.n	80018a2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_RCC_OscConfig+0x7b0>)
 80018ca:	68da      	ldr	r2, [r3, #12]
 80018cc:	4905      	ldr	r1, [pc, #20]	; (80018e4 <HAL_RCC_OscConfig+0x7b0>)
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_RCC_OscConfig+0x7b4>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	60cb      	str	r3, [r1, #12]
 80018d4:	e001      	b.n	80018da <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e000      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3720      	adds	r7, #32
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40021000 	.word	0x40021000
 80018e8:	feeefffc 	.word	0xfeeefffc

080018ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d101      	bne.n	8001900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e0e7      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001900:	4b75      	ldr	r3, [pc, #468]	; (8001ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d910      	bls.n	8001930 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190e:	4b72      	ldr	r3, [pc, #456]	; (8001ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f023 0207 	bic.w	r2, r3, #7
 8001916:	4970      	ldr	r1, [pc, #448]	; (8001ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	4313      	orrs	r3, r2
 800191c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800191e:	4b6e      	ldr	r3, [pc, #440]	; (8001ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d001      	beq.n	8001930 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0cf      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d010      	beq.n	800195e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	4b66      	ldr	r3, [pc, #408]	; (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001948:	429a      	cmp	r2, r3
 800194a:	d908      	bls.n	800195e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800194c:	4b63      	ldr	r3, [pc, #396]	; (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	4960      	ldr	r1, [pc, #384]	; (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 800195a:	4313      	orrs	r3, r2
 800195c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d04c      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b03      	cmp	r3, #3
 8001970:	d107      	bne.n	8001982 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001972:	4b5a      	ldr	r3, [pc, #360]	; (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d121      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e0a6      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d107      	bne.n	800199a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800198a:	4b54      	ldr	r3, [pc, #336]	; (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d115      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e09a      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d107      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019a2:	4b4e      	ldr	r3, [pc, #312]	; (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d109      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e08e      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019b2:	4b4a      	ldr	r3, [pc, #296]	; (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e086      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019c2:	4b46      	ldr	r3, [pc, #280]	; (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f023 0203 	bic.w	r2, r3, #3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	4943      	ldr	r1, [pc, #268]	; (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019d4:	f7ff f800 	bl	80009d8 <HAL_GetTick>
 80019d8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019da:	e00a      	b.n	80019f2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019dc:	f7fe fffc 	bl	80009d8 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e06e      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f2:	4b3a      	ldr	r3, [pc, #232]	; (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 020c 	and.w	r2, r3, #12
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d1eb      	bne.n	80019dc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d010      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	4b31      	ldr	r3, [pc, #196]	; (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d208      	bcs.n	8001a32 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a20:	4b2e      	ldr	r3, [pc, #184]	; (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	492b      	ldr	r1, [pc, #172]	; (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a32:	4b29      	ldr	r3, [pc, #164]	; (8001ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d210      	bcs.n	8001a62 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a40:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f023 0207 	bic.w	r2, r3, #7
 8001a48:	4923      	ldr	r1, [pc, #140]	; (8001ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a50:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d001      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e036      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d008      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a6e:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	4918      	ldr	r1, [pc, #96]	; (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d009      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a8c:	4b13      	ldr	r3, [pc, #76]	; (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	4910      	ldr	r1, [pc, #64]	; (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001aa0:	f000 f824 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	091b      	lsrs	r3, r3, #4
 8001aac:	f003 030f 	and.w	r3, r3, #15
 8001ab0:	490b      	ldr	r1, [pc, #44]	; (8001ae0 <HAL_RCC_ClockConfig+0x1f4>)
 8001ab2:	5ccb      	ldrb	r3, [r1, r3]
 8001ab4:	f003 031f 	and.w	r3, r3, #31
 8001ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8001abc:	4a09      	ldr	r2, [pc, #36]	; (8001ae4 <HAL_RCC_ClockConfig+0x1f8>)
 8001abe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ac0:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_RCC_ClockConfig+0x1fc>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fe9f 	bl	8000808 <HAL_InitTick>
 8001aca:	4603      	mov	r3, r0
 8001acc:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ace:	7afb      	ldrb	r3, [r7, #11]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40022000 	.word	0x40022000
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	08006c80 	.word	0x08006c80
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	20000004 	.word	0x20000004

08001aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b089      	sub	sp, #36	; 0x24
 8001af0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
 8001af6:	2300      	movs	r3, #0
 8001af8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001afa:	4b3e      	ldr	r3, [pc, #248]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 030c 	and.w	r3, r3, #12
 8001b02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b04:	4b3b      	ldr	r3, [pc, #236]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <HAL_RCC_GetSysClockFreq+0x34>
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	2b0c      	cmp	r3, #12
 8001b18:	d121      	bne.n	8001b5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d11e      	bne.n	8001b5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b20:	4b34      	ldr	r3, [pc, #208]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d107      	bne.n	8001b3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b2c:	4b31      	ldr	r3, [pc, #196]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b32:	0a1b      	lsrs	r3, r3, #8
 8001b34:	f003 030f 	and.w	r3, r3, #15
 8001b38:	61fb      	str	r3, [r7, #28]
 8001b3a:	e005      	b.n	8001b48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b3c:	4b2d      	ldr	r3, [pc, #180]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b48:	4a2b      	ldr	r2, [pc, #172]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10d      	bne.n	8001b74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b5c:	e00a      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d102      	bne.n	8001b6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b64:	4b25      	ldr	r3, [pc, #148]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x110>)
 8001b66:	61bb      	str	r3, [r7, #24]
 8001b68:	e004      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d101      	bne.n	8001b74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b70:	4b23      	ldr	r3, [pc, #140]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	2b0c      	cmp	r3, #12
 8001b78:	d134      	bne.n	8001be4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b7a:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d003      	beq.n	8001b92 <HAL_RCC_GetSysClockFreq+0xa6>
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d003      	beq.n	8001b98 <HAL_RCC_GetSysClockFreq+0xac>
 8001b90:	e005      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b92:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x110>)
 8001b94:	617b      	str	r3, [r7, #20]
      break;
 8001b96:	e005      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b98:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b9a:	617b      	str	r3, [r7, #20]
      break;
 8001b9c:	e002      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	617b      	str	r3, [r7, #20]
      break;
 8001ba2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ba4:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	091b      	lsrs	r3, r3, #4
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	3301      	adds	r3, #1
 8001bb0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bb2:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	0a1b      	lsrs	r3, r3, #8
 8001bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	fb03 f202 	mul.w	r2, r3, r2
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	0e5b      	lsrs	r3, r3, #25
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001be4:	69bb      	ldr	r3, [r7, #24]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3724      	adds	r7, #36	; 0x24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	08006c98 	.word	0x08006c98
 8001bfc:	00f42400 	.word	0x00f42400
 8001c00:	007a1200 	.word	0x007a1200

08001c04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c08:	4b03      	ldr	r3, [pc, #12]	; (8001c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000000 	.word	0x20000000

08001c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c20:	f7ff fff0 	bl	8001c04 <HAL_RCC_GetHCLKFreq>
 8001c24:	4602      	mov	r2, r0
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	0a1b      	lsrs	r3, r3, #8
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	4904      	ldr	r1, [pc, #16]	; (8001c44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c32:	5ccb      	ldrb	r3, [r1, r3]
 8001c34:	f003 031f 	and.w	r3, r3, #31
 8001c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40021000 	.word	0x40021000
 8001c44:	08006c90 	.word	0x08006c90

08001c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c4c:	f7ff ffda 	bl	8001c04 <HAL_RCC_GetHCLKFreq>
 8001c50:	4602      	mov	r2, r0
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	0adb      	lsrs	r3, r3, #11
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	4904      	ldr	r1, [pc, #16]	; (8001c70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c5e:	5ccb      	ldrb	r3, [r1, r3]
 8001c60:	f003 031f 	and.w	r3, r3, #31
 8001c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	08006c90 	.word	0x08006c90

08001c74 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	220f      	movs	r2, #15
 8001c82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 0203 	and.w	r2, r3, #3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001c90:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001ca8:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	08db      	lsrs	r3, r3, #3
 8001cae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001cb6:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <HAL_RCC_GetClockConfig+0x60>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0207 	and.w	r2, r3, #7
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	601a      	str	r2, [r3, #0]
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40022000 	.word	0x40022000

08001cd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ce4:	4b2a      	ldr	r3, [pc, #168]	; (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001cf0:	f7ff f9bc 	bl	800106c <HAL_PWREx_GetVoltageRange>
 8001cf4:	6178      	str	r0, [r7, #20]
 8001cf6:	e014      	b.n	8001d22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cf8:	4b25      	ldr	r3, [pc, #148]	; (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfc:	4a24      	ldr	r2, [pc, #144]	; (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d02:	6593      	str	r3, [r2, #88]	; 0x58
 8001d04:	4b22      	ldr	r3, [pc, #136]	; (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d10:	f7ff f9ac 	bl	800106c <HAL_PWREx_GetVoltageRange>
 8001d14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d16:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1a:	4a1d      	ldr	r2, [pc, #116]	; (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d28:	d10b      	bne.n	8001d42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b80      	cmp	r3, #128	; 0x80
 8001d2e:	d919      	bls.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2ba0      	cmp	r3, #160	; 0xa0
 8001d34:	d902      	bls.n	8001d3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d36:	2302      	movs	r3, #2
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	e013      	b.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	e010      	b.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b80      	cmp	r3, #128	; 0x80
 8001d46:	d902      	bls.n	8001d4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d48:	2303      	movs	r3, #3
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	e00a      	b.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b80      	cmp	r3, #128	; 0x80
 8001d52:	d102      	bne.n	8001d5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d54:	2302      	movs	r3, #2
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	e004      	b.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b70      	cmp	r3, #112	; 0x70
 8001d5e:	d101      	bne.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d60:	2301      	movs	r3, #1
 8001d62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f023 0207 	bic.w	r2, r3, #7
 8001d6c:	4909      	ldr	r1, [pc, #36]	; (8001d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d74:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d001      	beq.n	8001d86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40022000 	.word	0x40022000

08001d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001da0:	2300      	movs	r3, #0
 8001da2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001da4:	2300      	movs	r3, #0
 8001da6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d041      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001db8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001dbc:	d02a      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001dbe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001dc2:	d824      	bhi.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001dc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001dc8:	d008      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001dca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001dce:	d81e      	bhi.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00a      	beq.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001dd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dd8:	d010      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001dda:	e018      	b.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ddc:	4b86      	ldr	r3, [pc, #536]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	4a85      	ldr	r2, [pc, #532]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001de8:	e015      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3304      	adds	r3, #4
 8001dee:	2100      	movs	r1, #0
 8001df0:	4618      	mov	r0, r3
 8001df2:	f000 fabb 	bl	800236c <RCCEx_PLLSAI1_Config>
 8001df6:	4603      	mov	r3, r0
 8001df8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001dfa:	e00c      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3320      	adds	r3, #32
 8001e00:	2100      	movs	r1, #0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 fba6 	bl	8002554 <RCCEx_PLLSAI2_Config>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e0c:	e003      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	74fb      	strb	r3, [r7, #19]
      break;
 8001e12:	e000      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e16:	7cfb      	ldrb	r3, [r7, #19]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10b      	bne.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e1c:	4b76      	ldr	r3, [pc, #472]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e2a:	4973      	ldr	r1, [pc, #460]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e32:	e001      	b.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e34:	7cfb      	ldrb	r3, [r7, #19]
 8001e36:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d041      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e48:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e4c:	d02a      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e52:	d824      	bhi.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e58:	d008      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e5e:	d81e      	bhi.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00a      	beq.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e68:	d010      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e6a:	e018      	b.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e6c:	4b62      	ldr	r3, [pc, #392]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4a61      	ldr	r2, [pc, #388]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e76:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e78:	e015      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 fa73 	bl	800236c <RCCEx_PLLSAI1_Config>
 8001e86:	4603      	mov	r3, r0
 8001e88:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e8a:	e00c      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3320      	adds	r3, #32
 8001e90:	2100      	movs	r1, #0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 fb5e 	bl	8002554 <RCCEx_PLLSAI2_Config>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e9c:	e003      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	74fb      	strb	r3, [r7, #19]
      break;
 8001ea2:	e000      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001ea4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ea6:	7cfb      	ldrb	r3, [r7, #19]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10b      	bne.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001eac:	4b52      	ldr	r3, [pc, #328]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001eba:	494f      	ldr	r1, [pc, #316]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ec2:	e001      	b.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ec4:	7cfb      	ldrb	r3, [r7, #19]
 8001ec6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 80a0 	beq.w	8002016 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001eda:	4b47      	ldr	r3, [pc, #284]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001eea:	2300      	movs	r3, #0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00d      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef0:	4b41      	ldr	r3, [pc, #260]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef4:	4a40      	ldr	r2, [pc, #256]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efa:	6593      	str	r3, [r2, #88]	; 0x58
 8001efc:	4b3e      	ldr	r3, [pc, #248]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f0c:	4b3b      	ldr	r3, [pc, #236]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a3a      	ldr	r2, [pc, #232]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f18:	f7fe fd5e 	bl	80009d8 <HAL_GetTick>
 8001f1c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f1e:	e009      	b.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f20:	f7fe fd5a 	bl	80009d8 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d902      	bls.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	74fb      	strb	r3, [r7, #19]
        break;
 8001f32:	e005      	b.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f34:	4b31      	ldr	r3, [pc, #196]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0ef      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f40:	7cfb      	ldrb	r3, [r7, #19]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d15c      	bne.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f46:	4b2c      	ldr	r3, [pc, #176]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f50:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d01f      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d019      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f64:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f70:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f76:	4a20      	ldr	r2, [pc, #128]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f80:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f86:	4a1c      	ldr	r2, [pc, #112]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f90:	4a19      	ldr	r2, [pc, #100]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d016      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa2:	f7fe fd19 	bl	80009d8 <HAL_GetTick>
 8001fa6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa8:	e00b      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001faa:	f7fe fd15 	bl	80009d8 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d902      	bls.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	74fb      	strb	r3, [r7, #19]
            break;
 8001fc0:	e006      	b.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc2:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0ec      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001fd0:	7cfb      	ldrb	r3, [r7, #19]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10c      	bne.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fd6:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fe6:	4904      	ldr	r1, [pc, #16]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001fee:	e009      	b.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ff0:	7cfb      	ldrb	r3, [r7, #19]
 8001ff2:	74bb      	strb	r3, [r7, #18]
 8001ff4:	e006      	b.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002000:	7cfb      	ldrb	r3, [r7, #19]
 8002002:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002004:	7c7b      	ldrb	r3, [r7, #17]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d105      	bne.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800200a:	4b9e      	ldr	r3, [pc, #632]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800200c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200e:	4a9d      	ldr	r2, [pc, #628]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002014:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00a      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002022:	4b98      	ldr	r3, [pc, #608]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002028:	f023 0203 	bic.w	r2, r3, #3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002030:	4994      	ldr	r1, [pc, #592]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002032:	4313      	orrs	r3, r2
 8002034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00a      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002044:	4b8f      	ldr	r3, [pc, #572]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204a:	f023 020c 	bic.w	r2, r3, #12
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002052:	498c      	ldr	r1, [pc, #560]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002054:	4313      	orrs	r3, r2
 8002056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00a      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002066:	4b87      	ldr	r3, [pc, #540]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	4983      	ldr	r1, [pc, #524]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002076:	4313      	orrs	r3, r2
 8002078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00a      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002088:	4b7e      	ldr	r3, [pc, #504]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	497b      	ldr	r1, [pc, #492]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00a      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020aa:	4b76      	ldr	r3, [pc, #472]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b8:	4972      	ldr	r1, [pc, #456]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0320 	and.w	r3, r3, #32
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00a      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020cc:	4b6d      	ldr	r3, [pc, #436]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020da:	496a      	ldr	r1, [pc, #424]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00a      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020ee:	4b65      	ldr	r3, [pc, #404]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fc:	4961      	ldr	r1, [pc, #388]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00a      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002110:	4b5c      	ldr	r3, [pc, #368]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002116:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800211e:	4959      	ldr	r1, [pc, #356]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002120:	4313      	orrs	r3, r2
 8002122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00a      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002132:	4b54      	ldr	r3, [pc, #336]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002138:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002140:	4950      	ldr	r1, [pc, #320]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00a      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002154:	4b4b      	ldr	r3, [pc, #300]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002162:	4948      	ldr	r1, [pc, #288]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002164:	4313      	orrs	r3, r2
 8002166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00a      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002176:	4b43      	ldr	r3, [pc, #268]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002184:	493f      	ldr	r1, [pc, #252]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002186:	4313      	orrs	r3, r2
 8002188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d028      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002198:	4b3a      	ldr	r3, [pc, #232]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021a6:	4937      	ldr	r1, [pc, #220]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021b6:	d106      	bne.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021b8:	4b32      	ldr	r3, [pc, #200]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	4a31      	ldr	r2, [pc, #196]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021c2:	60d3      	str	r3, [r2, #12]
 80021c4:	e011      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021ce:	d10c      	bne.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3304      	adds	r3, #4
 80021d4:	2101      	movs	r1, #1
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f8c8 	bl	800236c <RCCEx_PLLSAI1_Config>
 80021dc:	4603      	mov	r3, r0
 80021de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80021e0:	7cfb      	ldrb	r3, [r7, #19]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80021e6:	7cfb      	ldrb	r3, [r7, #19]
 80021e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d028      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021f6:	4b23      	ldr	r3, [pc, #140]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002204:	491f      	ldr	r1, [pc, #124]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002206:	4313      	orrs	r3, r2
 8002208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002210:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002214:	d106      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002216:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	4a1a      	ldr	r2, [pc, #104]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002220:	60d3      	str	r3, [r2, #12]
 8002222:	e011      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002228:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800222c:	d10c      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3304      	adds	r3, #4
 8002232:	2101      	movs	r1, #1
 8002234:	4618      	mov	r0, r3
 8002236:	f000 f899 	bl	800236c <RCCEx_PLLSAI1_Config>
 800223a:	4603      	mov	r3, r0
 800223c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800223e:	7cfb      	ldrb	r3, [r7, #19]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002244:	7cfb      	ldrb	r3, [r7, #19]
 8002246:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d02b      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002262:	4908      	ldr	r1, [pc, #32]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800226e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002272:	d109      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002274:	4b03      	ldr	r3, [pc, #12]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4a02      	ldr	r2, [pc, #8]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800227e:	60d3      	str	r3, [r2, #12]
 8002280:	e014      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002282:	bf00      	nop
 8002284:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800228c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002290:	d10c      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3304      	adds	r3, #4
 8002296:	2101      	movs	r1, #1
 8002298:	4618      	mov	r0, r3
 800229a:	f000 f867 	bl	800236c <RCCEx_PLLSAI1_Config>
 800229e:	4603      	mov	r3, r0
 80022a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022a2:	7cfb      	ldrb	r3, [r7, #19]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d02f      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022b8:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022c6:	4928      	ldr	r1, [pc, #160]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022d6:	d10d      	bne.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3304      	adds	r3, #4
 80022dc:	2102      	movs	r1, #2
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 f844 	bl	800236c <RCCEx_PLLSAI1_Config>
 80022e4:	4603      	mov	r3, r0
 80022e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022e8:	7cfb      	ldrb	r3, [r7, #19]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d014      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80022ee:	7cfb      	ldrb	r3, [r7, #19]
 80022f0:	74bb      	strb	r3, [r7, #18]
 80022f2:	e011      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022fc:	d10c      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3320      	adds	r3, #32
 8002302:	2102      	movs	r1, #2
 8002304:	4618      	mov	r0, r3
 8002306:	f000 f925 	bl	8002554 <RCCEx_PLLSAI2_Config>
 800230a:	4603      	mov	r3, r0
 800230c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800230e:	7cfb      	ldrb	r3, [r7, #19]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002314:	7cfb      	ldrb	r3, [r7, #19]
 8002316:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002324:	4b10      	ldr	r3, [pc, #64]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002332:	490d      	ldr	r1, [pc, #52]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00b      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002346:	4b08      	ldr	r3, [pc, #32]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002356:	4904      	ldr	r1, [pc, #16]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800235e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40021000 	.word	0x40021000

0800236c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800237a:	4b75      	ldr	r3, [pc, #468]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d018      	beq.n	80023b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002386:	4b72      	ldr	r3, [pc, #456]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	f003 0203 	and.w	r2, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d10d      	bne.n	80023b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
       ||
 800239a:	2b00      	cmp	r3, #0
 800239c:	d009      	beq.n	80023b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800239e:	4b6c      	ldr	r3, [pc, #432]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	091b      	lsrs	r3, r3, #4
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
       ||
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d047      	beq.n	8002442 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	73fb      	strb	r3, [r7, #15]
 80023b6:	e044      	b.n	8002442 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d018      	beq.n	80023f2 <RCCEx_PLLSAI1_Config+0x86>
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d825      	bhi.n	8002410 <RCCEx_PLLSAI1_Config+0xa4>
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d002      	beq.n	80023ce <RCCEx_PLLSAI1_Config+0x62>
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d009      	beq.n	80023e0 <RCCEx_PLLSAI1_Config+0x74>
 80023cc:	e020      	b.n	8002410 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023ce:	4b60      	ldr	r3, [pc, #384]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d11d      	bne.n	8002416 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023de:	e01a      	b.n	8002416 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023e0:	4b5b      	ldr	r3, [pc, #364]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d116      	bne.n	800241a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023f0:	e013      	b.n	800241a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023f2:	4b57      	ldr	r3, [pc, #348]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10f      	bne.n	800241e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023fe:	4b54      	ldr	r3, [pc, #336]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d109      	bne.n	800241e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800240e:	e006      	b.n	800241e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
      break;
 8002414:	e004      	b.n	8002420 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002416:	bf00      	nop
 8002418:	e002      	b.n	8002420 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800241a:	bf00      	nop
 800241c:	e000      	b.n	8002420 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800241e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10d      	bne.n	8002442 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002426:	4b4a      	ldr	r3, [pc, #296]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6819      	ldr	r1, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	3b01      	subs	r3, #1
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	430b      	orrs	r3, r1
 800243c:	4944      	ldr	r1, [pc, #272]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 800243e:	4313      	orrs	r3, r2
 8002440:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002442:	7bfb      	ldrb	r3, [r7, #15]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d17d      	bne.n	8002544 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002448:	4b41      	ldr	r3, [pc, #260]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a40      	ldr	r2, [pc, #256]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 800244e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002452:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002454:	f7fe fac0 	bl	80009d8 <HAL_GetTick>
 8002458:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800245a:	e009      	b.n	8002470 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800245c:	f7fe fabc 	bl	80009d8 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d902      	bls.n	8002470 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	73fb      	strb	r3, [r7, #15]
        break;
 800246e:	e005      	b.n	800247c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002470:	4b37      	ldr	r3, [pc, #220]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1ef      	bne.n	800245c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d160      	bne.n	8002544 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d111      	bne.n	80024ac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002488:	4b31      	ldr	r3, [pc, #196]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6892      	ldr	r2, [r2, #8]
 8002498:	0211      	lsls	r1, r2, #8
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68d2      	ldr	r2, [r2, #12]
 800249e:	0912      	lsrs	r2, r2, #4
 80024a0:	0452      	lsls	r2, r2, #17
 80024a2:	430a      	orrs	r2, r1
 80024a4:	492a      	ldr	r1, [pc, #168]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	610b      	str	r3, [r1, #16]
 80024aa:	e027      	b.n	80024fc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d112      	bne.n	80024d8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024b2:	4b27      	ldr	r3, [pc, #156]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80024ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6892      	ldr	r2, [r2, #8]
 80024c2:	0211      	lsls	r1, r2, #8
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6912      	ldr	r2, [r2, #16]
 80024c8:	0852      	lsrs	r2, r2, #1
 80024ca:	3a01      	subs	r2, #1
 80024cc:	0552      	lsls	r2, r2, #21
 80024ce:	430a      	orrs	r2, r1
 80024d0:	491f      	ldr	r1, [pc, #124]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	610b      	str	r3, [r1, #16]
 80024d6:	e011      	b.n	80024fc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024d8:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80024e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6892      	ldr	r2, [r2, #8]
 80024e8:	0211      	lsls	r1, r2, #8
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6952      	ldr	r2, [r2, #20]
 80024ee:	0852      	lsrs	r2, r2, #1
 80024f0:	3a01      	subs	r2, #1
 80024f2:	0652      	lsls	r2, r2, #25
 80024f4:	430a      	orrs	r2, r1
 80024f6:	4916      	ldr	r1, [pc, #88]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80024fc:	4b14      	ldr	r3, [pc, #80]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a13      	ldr	r2, [pc, #76]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002502:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002506:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002508:	f7fe fa66 	bl	80009d8 <HAL_GetTick>
 800250c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800250e:	e009      	b.n	8002524 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002510:	f7fe fa62 	bl	80009d8 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d902      	bls.n	8002524 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	73fb      	strb	r3, [r7, #15]
          break;
 8002522:	e005      	b.n	8002530 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002524:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0ef      	beq.n	8002510 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002538:	691a      	ldr	r2, [r3, #16]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	4904      	ldr	r1, [pc, #16]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002540:	4313      	orrs	r3, r2
 8002542:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002544:	7bfb      	ldrb	r3, [r7, #15]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000

08002554 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002562:	4b6a      	ldr	r3, [pc, #424]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d018      	beq.n	80025a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800256e:	4b67      	ldr	r3, [pc, #412]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f003 0203 	and.w	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d10d      	bne.n	800259a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
       ||
 8002582:	2b00      	cmp	r3, #0
 8002584:	d009      	beq.n	800259a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002586:	4b61      	ldr	r3, [pc, #388]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	091b      	lsrs	r3, r3, #4
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
       ||
 8002596:	429a      	cmp	r2, r3
 8002598:	d047      	beq.n	800262a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	73fb      	strb	r3, [r7, #15]
 800259e:	e044      	b.n	800262a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d018      	beq.n	80025da <RCCEx_PLLSAI2_Config+0x86>
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d825      	bhi.n	80025f8 <RCCEx_PLLSAI2_Config+0xa4>
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d002      	beq.n	80025b6 <RCCEx_PLLSAI2_Config+0x62>
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d009      	beq.n	80025c8 <RCCEx_PLLSAI2_Config+0x74>
 80025b4:	e020      	b.n	80025f8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025b6:	4b55      	ldr	r3, [pc, #340]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d11d      	bne.n	80025fe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025c6:	e01a      	b.n	80025fe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025c8:	4b50      	ldr	r3, [pc, #320]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d116      	bne.n	8002602 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025d8:	e013      	b.n	8002602 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025da:	4b4c      	ldr	r3, [pc, #304]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10f      	bne.n	8002606 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025e6:	4b49      	ldr	r3, [pc, #292]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d109      	bne.n	8002606 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025f6:	e006      	b.n	8002606 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
      break;
 80025fc:	e004      	b.n	8002608 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025fe:	bf00      	nop
 8002600:	e002      	b.n	8002608 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002602:	bf00      	nop
 8002604:	e000      	b.n	8002608 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002606:	bf00      	nop
    }

    if(status == HAL_OK)
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10d      	bne.n	800262a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800260e:	4b3f      	ldr	r3, [pc, #252]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6819      	ldr	r1, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	3b01      	subs	r3, #1
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	430b      	orrs	r3, r1
 8002624:	4939      	ldr	r1, [pc, #228]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002626:	4313      	orrs	r3, r2
 8002628:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d167      	bne.n	8002700 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002630:	4b36      	ldr	r3, [pc, #216]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a35      	ldr	r2, [pc, #212]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800263a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800263c:	f7fe f9cc 	bl	80009d8 <HAL_GetTick>
 8002640:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002642:	e009      	b.n	8002658 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002644:	f7fe f9c8 	bl	80009d8 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d902      	bls.n	8002658 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	73fb      	strb	r3, [r7, #15]
        break;
 8002656:	e005      	b.n	8002664 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002658:	4b2c      	ldr	r3, [pc, #176]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1ef      	bne.n	8002644 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d14a      	bne.n	8002700 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d111      	bne.n	8002694 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002670:	4b26      	ldr	r3, [pc, #152]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6892      	ldr	r2, [r2, #8]
 8002680:	0211      	lsls	r1, r2, #8
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	68d2      	ldr	r2, [r2, #12]
 8002686:	0912      	lsrs	r2, r2, #4
 8002688:	0452      	lsls	r2, r2, #17
 800268a:	430a      	orrs	r2, r1
 800268c:	491f      	ldr	r1, [pc, #124]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 800268e:	4313      	orrs	r3, r2
 8002690:	614b      	str	r3, [r1, #20]
 8002692:	e011      	b.n	80026b8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002694:	4b1d      	ldr	r3, [pc, #116]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800269c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6892      	ldr	r2, [r2, #8]
 80026a4:	0211      	lsls	r1, r2, #8
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6912      	ldr	r2, [r2, #16]
 80026aa:	0852      	lsrs	r2, r2, #1
 80026ac:	3a01      	subs	r2, #1
 80026ae:	0652      	lsls	r2, r2, #25
 80026b0:	430a      	orrs	r2, r1
 80026b2:	4916      	ldr	r1, [pc, #88]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80026b8:	4b14      	ldr	r3, [pc, #80]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a13      	ldr	r2, [pc, #76]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c4:	f7fe f988 	bl	80009d8 <HAL_GetTick>
 80026c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026ca:	e009      	b.n	80026e0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026cc:	f7fe f984 	bl	80009d8 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d902      	bls.n	80026e0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	73fb      	strb	r3, [r7, #15]
          break;
 80026de:	e005      	b.n	80026ec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026e0:	4b0a      	ldr	r3, [pc, #40]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0ef      	beq.n	80026cc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f4:	695a      	ldr	r2, [r3, #20]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	4904      	ldr	r1, [pc, #16]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002700:	7bfb      	ldrb	r3, [r7, #15]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40021000 	.word	0x40021000

08002710 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e049      	b.n	80027b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d106      	bne.n	800273c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f841 	bl	80027be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3304      	adds	r3, #4
 800274c:	4619      	mov	r1, r3
 800274e:	4610      	mov	r0, r2
 8002750:	f000 f9f8 	bl	8002b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
	...

080027d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d001      	beq.n	80027ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e04f      	b.n	800288c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0201 	orr.w	r2, r2, #1
 8002802:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a23      	ldr	r2, [pc, #140]	; (8002898 <HAL_TIM_Base_Start_IT+0xc4>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d01d      	beq.n	800284a <HAL_TIM_Base_Start_IT+0x76>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002816:	d018      	beq.n	800284a <HAL_TIM_Base_Start_IT+0x76>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a1f      	ldr	r2, [pc, #124]	; (800289c <HAL_TIM_Base_Start_IT+0xc8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d013      	beq.n	800284a <HAL_TIM_Base_Start_IT+0x76>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a1e      	ldr	r2, [pc, #120]	; (80028a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d00e      	beq.n	800284a <HAL_TIM_Base_Start_IT+0x76>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a1c      	ldr	r2, [pc, #112]	; (80028a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d009      	beq.n	800284a <HAL_TIM_Base_Start_IT+0x76>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a1b      	ldr	r2, [pc, #108]	; (80028a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d004      	beq.n	800284a <HAL_TIM_Base_Start_IT+0x76>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a19      	ldr	r2, [pc, #100]	; (80028ac <HAL_TIM_Base_Start_IT+0xd8>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d115      	bne.n	8002876 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	4b17      	ldr	r3, [pc, #92]	; (80028b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002852:	4013      	ands	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2b06      	cmp	r3, #6
 800285a:	d015      	beq.n	8002888 <HAL_TIM_Base_Start_IT+0xb4>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002862:	d011      	beq.n	8002888 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002874:	e008      	b.n	8002888 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0201 	orr.w	r2, r2, #1
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	e000      	b.n	800288a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002888:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	40012c00 	.word	0x40012c00
 800289c:	40000400 	.word	0x40000400
 80028a0:	40000800 	.word	0x40000800
 80028a4:	40000c00 	.word	0x40000c00
 80028a8:	40013400 	.word	0x40013400
 80028ac:	40014000 	.word	0x40014000
 80028b0:	00010007 	.word	0x00010007

080028b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d122      	bne.n	8002910 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d11b      	bne.n	8002910 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f06f 0202 	mvn.w	r2, #2
 80028e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f905 	bl	8002b06 <HAL_TIM_IC_CaptureCallback>
 80028fc:	e005      	b.n	800290a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f8f7 	bl	8002af2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f908 	bl	8002b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	2b04      	cmp	r3, #4
 800291c:	d122      	bne.n	8002964 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b04      	cmp	r3, #4
 800292a:	d11b      	bne.n	8002964 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f06f 0204 	mvn.w	r2, #4
 8002934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2202      	movs	r2, #2
 800293a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f8db 	bl	8002b06 <HAL_TIM_IC_CaptureCallback>
 8002950:	e005      	b.n	800295e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f8cd 	bl	8002af2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f8de 	bl	8002b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b08      	cmp	r3, #8
 8002970:	d122      	bne.n	80029b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b08      	cmp	r3, #8
 800297e:	d11b      	bne.n	80029b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f06f 0208 	mvn.w	r2, #8
 8002988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2204      	movs	r2, #4
 800298e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f8b1 	bl	8002b06 <HAL_TIM_IC_CaptureCallback>
 80029a4:	e005      	b.n	80029b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f8a3 	bl	8002af2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f8b4 	bl	8002b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f003 0310 	and.w	r3, r3, #16
 80029c2:	2b10      	cmp	r3, #16
 80029c4:	d122      	bne.n	8002a0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f003 0310 	and.w	r3, r3, #16
 80029d0:	2b10      	cmp	r3, #16
 80029d2:	d11b      	bne.n	8002a0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f06f 0210 	mvn.w	r2, #16
 80029dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2208      	movs	r2, #8
 80029e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f887 	bl	8002b06 <HAL_TIM_IC_CaptureCallback>
 80029f8:	e005      	b.n	8002a06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f879 	bl	8002af2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f88a 	bl	8002b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d10e      	bne.n	8002a38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d107      	bne.n	8002a38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f06f 0201 	mvn.w	r2, #1
 8002a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7fd fe42 	bl	80006bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a42:	2b80      	cmp	r3, #128	; 0x80
 8002a44:	d10e      	bne.n	8002a64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a50:	2b80      	cmp	r3, #128	; 0x80
 8002a52:	d107      	bne.n	8002a64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f914 	bl	8002c8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a72:	d10e      	bne.n	8002a92 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7e:	2b80      	cmp	r3, #128	; 0x80
 8002a80:	d107      	bne.n	8002a92 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f907 	bl	8002ca0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9c:	2b40      	cmp	r3, #64	; 0x40
 8002a9e:	d10e      	bne.n	8002abe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aaa:	2b40      	cmp	r3, #64	; 0x40
 8002aac:	d107      	bne.n	8002abe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f838 	bl	8002b2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	f003 0320 	and.w	r3, r3, #32
 8002ac8:	2b20      	cmp	r3, #32
 8002aca:	d10e      	bne.n	8002aea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f003 0320 	and.w	r3, r3, #32
 8002ad6:	2b20      	cmp	r3, #32
 8002ad8:	d107      	bne.n	8002aea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f06f 0220 	mvn.w	r2, #32
 8002ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f8c7 	bl	8002c78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
	...

08002b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a40      	ldr	r2, [pc, #256]	; (8002c58 <TIM_Base_SetConfig+0x114>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d013      	beq.n	8002b84 <TIM_Base_SetConfig+0x40>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b62:	d00f      	beq.n	8002b84 <TIM_Base_SetConfig+0x40>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a3d      	ldr	r2, [pc, #244]	; (8002c5c <TIM_Base_SetConfig+0x118>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d00b      	beq.n	8002b84 <TIM_Base_SetConfig+0x40>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a3c      	ldr	r2, [pc, #240]	; (8002c60 <TIM_Base_SetConfig+0x11c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d007      	beq.n	8002b84 <TIM_Base_SetConfig+0x40>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a3b      	ldr	r2, [pc, #236]	; (8002c64 <TIM_Base_SetConfig+0x120>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d003      	beq.n	8002b84 <TIM_Base_SetConfig+0x40>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a3a      	ldr	r2, [pc, #232]	; (8002c68 <TIM_Base_SetConfig+0x124>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d108      	bne.n	8002b96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a2f      	ldr	r2, [pc, #188]	; (8002c58 <TIM_Base_SetConfig+0x114>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d01f      	beq.n	8002bde <TIM_Base_SetConfig+0x9a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba4:	d01b      	beq.n	8002bde <TIM_Base_SetConfig+0x9a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a2c      	ldr	r2, [pc, #176]	; (8002c5c <TIM_Base_SetConfig+0x118>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d017      	beq.n	8002bde <TIM_Base_SetConfig+0x9a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a2b      	ldr	r2, [pc, #172]	; (8002c60 <TIM_Base_SetConfig+0x11c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d013      	beq.n	8002bde <TIM_Base_SetConfig+0x9a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a2a      	ldr	r2, [pc, #168]	; (8002c64 <TIM_Base_SetConfig+0x120>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00f      	beq.n	8002bde <TIM_Base_SetConfig+0x9a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a29      	ldr	r2, [pc, #164]	; (8002c68 <TIM_Base_SetConfig+0x124>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d00b      	beq.n	8002bde <TIM_Base_SetConfig+0x9a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a28      	ldr	r2, [pc, #160]	; (8002c6c <TIM_Base_SetConfig+0x128>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d007      	beq.n	8002bde <TIM_Base_SetConfig+0x9a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a27      	ldr	r2, [pc, #156]	; (8002c70 <TIM_Base_SetConfig+0x12c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d003      	beq.n	8002bde <TIM_Base_SetConfig+0x9a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a26      	ldr	r2, [pc, #152]	; (8002c74 <TIM_Base_SetConfig+0x130>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d108      	bne.n	8002bf0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002be4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a10      	ldr	r2, [pc, #64]	; (8002c58 <TIM_Base_SetConfig+0x114>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d00f      	beq.n	8002c3c <TIM_Base_SetConfig+0xf8>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a12      	ldr	r2, [pc, #72]	; (8002c68 <TIM_Base_SetConfig+0x124>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d00b      	beq.n	8002c3c <TIM_Base_SetConfig+0xf8>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a11      	ldr	r2, [pc, #68]	; (8002c6c <TIM_Base_SetConfig+0x128>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d007      	beq.n	8002c3c <TIM_Base_SetConfig+0xf8>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a10      	ldr	r2, [pc, #64]	; (8002c70 <TIM_Base_SetConfig+0x12c>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d003      	beq.n	8002c3c <TIM_Base_SetConfig+0xf8>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a0f      	ldr	r2, [pc, #60]	; (8002c74 <TIM_Base_SetConfig+0x130>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d103      	bne.n	8002c44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	691a      	ldr	r2, [r3, #16]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	615a      	str	r2, [r3, #20]
}
 8002c4a:	bf00      	nop
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	40012c00 	.word	0x40012c00
 8002c5c:	40000400 	.word	0x40000400
 8002c60:	40000800 	.word	0x40000800
 8002c64:	40000c00 	.word	0x40000c00
 8002c68:	40013400 	.word	0x40013400
 8002c6c:	40014000 	.word	0x40014000
 8002c70:	40014400 	.word	0x40014400
 8002c74:	40014800 	.word	0x40014800

08002c78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e040      	b.n	8002d48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fd fd30 	bl	800073c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2224      	movs	r2, #36	; 0x24
 8002ce0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0201 	bic.w	r2, r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fbc2 	bl	800347c <UART_SetConfig>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e022      	b.n	8002d48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fe6e 	bl	80039ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0201 	orr.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 fef5 	bl	8003b30 <UART_CheckIdleState>
 8002d46:	4603      	mov	r3, r0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08a      	sub	sp, #40	; 0x28
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	603b      	str	r3, [r7, #0]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d64:	2b20      	cmp	r3, #32
 8002d66:	f040 8082 	bne.w	8002e6e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d002      	beq.n	8002d76 <HAL_UART_Transmit+0x26>
 8002d70:	88fb      	ldrh	r3, [r7, #6]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e07a      	b.n	8002e70 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <HAL_UART_Transmit+0x38>
 8002d84:	2302      	movs	r3, #2
 8002d86:	e073      	b.n	8002e70 <HAL_UART_Transmit+0x120>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2221      	movs	r2, #33	; 0x21
 8002d9c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d9e:	f7fd fe1b 	bl	80009d8 <HAL_GetTick>
 8002da2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	88fa      	ldrh	r2, [r7, #6]
 8002da8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	88fa      	ldrh	r2, [r7, #6]
 8002db0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dbc:	d108      	bne.n	8002dd0 <HAL_UART_Transmit+0x80>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d104      	bne.n	8002dd0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	61bb      	str	r3, [r7, #24]
 8002dce:	e003      	b.n	8002dd8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002de0:	e02d      	b.n	8002e3e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2200      	movs	r2, #0
 8002dea:	2180      	movs	r1, #128	; 0x80
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 fee8 	bl	8003bc2 <UART_WaitOnFlagUntilTimeout>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e039      	b.n	8002e70 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10b      	bne.n	8002e1a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	881a      	ldrh	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e0e:	b292      	uxth	r2, r2
 8002e10:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	3302      	adds	r3, #2
 8002e16:	61bb      	str	r3, [r7, #24]
 8002e18:	e008      	b.n	8002e2c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	781a      	ldrb	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	b292      	uxth	r2, r2
 8002e24:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1cb      	bne.n	8002de2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2200      	movs	r2, #0
 8002e52:	2140      	movs	r1, #64	; 0x40
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 feb4 	bl	8003bc2 <UART_WaitOnFlagUntilTimeout>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e005      	b.n	8002e70 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2220      	movs	r2, #32
 8002e68:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	e000      	b.n	8002e70 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002e6e:	2302      	movs	r3, #2
  }
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3720      	adds	r7, #32
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b0ba      	sub	sp, #232	; 0xe8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002ea2:	f640 030f 	movw	r3, #2063	; 0x80f
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002eac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d115      	bne.n	8002ee0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb8:	f003 0320 	and.w	r3, r3, #32
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00f      	beq.n	8002ee0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ec4:	f003 0320 	and.w	r3, r3, #32
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d009      	beq.n	8002ee0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 82a6 	beq.w	8003422 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	4798      	blx	r3
      }
      return;
 8002ede:	e2a0      	b.n	8003422 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002ee0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 8117 	beq.w	8003118 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002ef6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002efa:	4b85      	ldr	r3, [pc, #532]	; (8003110 <HAL_UART_IRQHandler+0x298>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 810a 	beq.w	8003118 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d011      	beq.n	8002f34 <HAL_UART_IRQHandler+0xbc>
 8002f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00b      	beq.n	8002f34 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2201      	movs	r2, #1
 8002f22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f2a:	f043 0201 	orr.w	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d011      	beq.n	8002f64 <HAL_UART_IRQHandler+0xec>
 8002f40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00b      	beq.n	8002f64 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2202      	movs	r2, #2
 8002f52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f5a:	f043 0204 	orr.w	r2, r3, #4
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d011      	beq.n	8002f94 <HAL_UART_IRQHandler+0x11c>
 8002f70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00b      	beq.n	8002f94 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2204      	movs	r2, #4
 8002f82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f8a:	f043 0202 	orr.w	r2, r3, #2
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f98:	f003 0308 	and.w	r3, r3, #8
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d017      	beq.n	8002fd0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fa4:	f003 0320 	and.w	r3, r3, #32
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d105      	bne.n	8002fb8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002fac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fb0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00b      	beq.n	8002fd0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2208      	movs	r2, #8
 8002fbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fc6:	f043 0208 	orr.w	r2, r3, #8
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d012      	beq.n	8003002 <HAL_UART_IRQHandler+0x18a>
 8002fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fe0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00c      	beq.n	8003002 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ff0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ff8:	f043 0220 	orr.w	r2, r3, #32
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 820c 	beq.w	8003426 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800300e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003012:	f003 0320 	and.w	r3, r3, #32
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00d      	beq.n	8003036 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800301a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800301e:	f003 0320 	and.w	r3, r3, #32
 8003022:	2b00      	cmp	r3, #0
 8003024:	d007      	beq.n	8003036 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800303c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304a:	2b40      	cmp	r3, #64	; 0x40
 800304c:	d005      	beq.n	800305a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800304e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003052:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003056:	2b00      	cmp	r3, #0
 8003058:	d04f      	beq.n	80030fa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fe75 	bl	8003d4a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306a:	2b40      	cmp	r3, #64	; 0x40
 800306c:	d141      	bne.n	80030f2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	3308      	adds	r3, #8
 8003074:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003078:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800307c:	e853 3f00 	ldrex	r3, [r3]
 8003080:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003084:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800308c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	3308      	adds	r3, #8
 8003096:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800309a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800309e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80030a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80030aa:	e841 2300 	strex	r3, r2, [r1]
 80030ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80030b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1d9      	bne.n	800306e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d013      	beq.n	80030ea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c6:	4a13      	ldr	r2, [pc, #76]	; (8003114 <HAL_UART_IRQHandler+0x29c>)
 80030c8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fd fdae 	bl	8000c30 <HAL_DMA_Abort_IT>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d017      	beq.n	800310a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80030e4:	4610      	mov	r0, r2
 80030e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e8:	e00f      	b.n	800310a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f9b0 	bl	8003450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f0:	e00b      	b.n	800310a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f9ac 	bl	8003450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f8:	e007      	b.n	800310a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f9a8 	bl	8003450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003108:	e18d      	b.n	8003426 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800310a:	bf00      	nop
    return;
 800310c:	e18b      	b.n	8003426 <HAL_UART_IRQHandler+0x5ae>
 800310e:	bf00      	nop
 8003110:	04000120 	.word	0x04000120
 8003114:	08003e11 	.word	0x08003e11

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800311c:	2b01      	cmp	r3, #1
 800311e:	f040 8146 	bne.w	80033ae <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003126:	f003 0310 	and.w	r3, r3, #16
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 813f 	beq.w	80033ae <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003134:	f003 0310 	and.w	r3, r3, #16
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 8138 	beq.w	80033ae <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2210      	movs	r2, #16
 8003144:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003150:	2b40      	cmp	r3, #64	; 0x40
 8003152:	f040 80b4 	bne.w	80032be <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003162:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 815f 	beq.w	800342a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003172:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003176:	429a      	cmp	r2, r3
 8003178:	f080 8157 	bcs.w	800342a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003182:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	2b00      	cmp	r3, #0
 8003194:	f040 8085 	bne.w	80032a2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031a4:	e853 3f00 	ldrex	r3, [r3]
 80031a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80031ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	461a      	mov	r2, r3
 80031be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80031c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80031c6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80031ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80031d2:	e841 2300 	strex	r3, r2, [r1]
 80031d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80031da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1da      	bne.n	8003198 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	3308      	adds	r3, #8
 80031e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031ec:	e853 3f00 	ldrex	r3, [r3]
 80031f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80031f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031f4:	f023 0301 	bic.w	r3, r3, #1
 80031f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	3308      	adds	r3, #8
 8003202:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003206:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800320a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800320e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003212:	e841 2300 	strex	r3, r2, [r1]
 8003216:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003218:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1e1      	bne.n	80031e2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	3308      	adds	r3, #8
 8003224:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003226:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003228:	e853 3f00 	ldrex	r3, [r3]
 800322c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800322e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003234:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3308      	adds	r3, #8
 800323e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003242:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003244:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003246:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003248:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800324a:	e841 2300 	strex	r3, r2, [r1]
 800324e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003250:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1e3      	bne.n	800321e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2220      	movs	r2, #32
 800325a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800326a:	e853 3f00 	ldrex	r3, [r3]
 800326e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003272:	f023 0310 	bic.w	r3, r3, #16
 8003276:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003284:	65bb      	str	r3, [r7, #88]	; 0x58
 8003286:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003288:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800328a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800328c:	e841 2300 	strex	r3, r2, [r1]
 8003290:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1e4      	bne.n	8003262 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329c:	4618      	mov	r0, r3
 800329e:	f7fd fc89 	bl	8000bb4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	4619      	mov	r1, r3
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f8d4 	bl	8003464 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032bc:	e0b5      	b.n	800342a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032d8:	b29b      	uxth	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 80a7 	beq.w	800342e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80032e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80a2 	beq.w	800342e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f2:	e853 3f00 	ldrex	r3, [r3]
 80032f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80032f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	461a      	mov	r2, r3
 8003308:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800330c:	647b      	str	r3, [r7, #68]	; 0x44
 800330e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003310:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003312:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003314:	e841 2300 	strex	r3, r2, [r1]
 8003318:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800331a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1e4      	bne.n	80032ea <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	3308      	adds	r3, #8
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	e853 3f00 	ldrex	r3, [r3]
 800332e:	623b      	str	r3, [r7, #32]
   return(result);
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	f023 0301 	bic.w	r3, r3, #1
 8003336:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	3308      	adds	r3, #8
 8003340:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003344:	633a      	str	r2, [r7, #48]	; 0x30
 8003346:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003348:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800334a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800334c:	e841 2300 	strex	r3, r2, [r1]
 8003350:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1e3      	bne.n	8003320 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2220      	movs	r2, #32
 800335c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	e853 3f00 	ldrex	r3, [r3]
 8003376:	60fb      	str	r3, [r7, #12]
   return(result);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f023 0310 	bic.w	r3, r3, #16
 800337e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	461a      	mov	r2, r3
 8003388:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800338c:	61fb      	str	r3, [r7, #28]
 800338e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003390:	69b9      	ldr	r1, [r7, #24]
 8003392:	69fa      	ldr	r2, [r7, #28]
 8003394:	e841 2300 	strex	r3, r2, [r1]
 8003398:	617b      	str	r3, [r7, #20]
   return(result);
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1e4      	bne.n	800336a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033a4:	4619      	mov	r1, r3
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f85c 	bl	8003464 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033ac:	e03f      	b.n	800342e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80033ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00e      	beq.n	80033d8 <HAL_UART_IRQHandler+0x560>
 80033ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d008      	beq.n	80033d8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 fd5d 	bl	8003e90 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80033d6:	e02d      	b.n	8003434 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80033d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00e      	beq.n	8003402 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80033e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d008      	beq.n	8003402 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d01c      	beq.n	8003432 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	4798      	blx	r3
    }
    return;
 8003400:	e017      	b.n	8003432 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340a:	2b00      	cmp	r3, #0
 800340c:	d012      	beq.n	8003434 <HAL_UART_IRQHandler+0x5bc>
 800340e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00c      	beq.n	8003434 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 fd0e 	bl	8003e3c <UART_EndTransmit_IT>
    return;
 8003420:	e008      	b.n	8003434 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003422:	bf00      	nop
 8003424:	e006      	b.n	8003434 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003426:	bf00      	nop
 8003428:	e004      	b.n	8003434 <HAL_UART_IRQHandler+0x5bc>
      return;
 800342a:	bf00      	nop
 800342c:	e002      	b.n	8003434 <HAL_UART_IRQHandler+0x5bc>
      return;
 800342e:	bf00      	nop
 8003430:	e000      	b.n	8003434 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003432:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003434:	37e8      	adds	r7, #232	; 0xe8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop

0800343c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800347c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003480:	b08a      	sub	sp, #40	; 0x28
 8003482:	af00      	add	r7, sp, #0
 8003484:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	431a      	orrs	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	431a      	orrs	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	4ba4      	ldr	r3, [pc, #656]	; (800373c <UART_SetConfig+0x2c0>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	6812      	ldr	r2, [r2, #0]
 80034b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034b4:	430b      	orrs	r3, r1
 80034b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a99      	ldr	r2, [pc, #612]	; (8003740 <UART_SetConfig+0x2c4>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d004      	beq.n	80034e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e4:	4313      	orrs	r3, r2
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f8:	430a      	orrs	r2, r1
 80034fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a90      	ldr	r2, [pc, #576]	; (8003744 <UART_SetConfig+0x2c8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d126      	bne.n	8003554 <UART_SetConfig+0xd8>
 8003506:	4b90      	ldr	r3, [pc, #576]	; (8003748 <UART_SetConfig+0x2cc>)
 8003508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350c:	f003 0303 	and.w	r3, r3, #3
 8003510:	2b03      	cmp	r3, #3
 8003512:	d81b      	bhi.n	800354c <UART_SetConfig+0xd0>
 8003514:	a201      	add	r2, pc, #4	; (adr r2, 800351c <UART_SetConfig+0xa0>)
 8003516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351a:	bf00      	nop
 800351c:	0800352d 	.word	0x0800352d
 8003520:	0800353d 	.word	0x0800353d
 8003524:	08003535 	.word	0x08003535
 8003528:	08003545 	.word	0x08003545
 800352c:	2301      	movs	r3, #1
 800352e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003532:	e116      	b.n	8003762 <UART_SetConfig+0x2e6>
 8003534:	2302      	movs	r3, #2
 8003536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800353a:	e112      	b.n	8003762 <UART_SetConfig+0x2e6>
 800353c:	2304      	movs	r3, #4
 800353e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003542:	e10e      	b.n	8003762 <UART_SetConfig+0x2e6>
 8003544:	2308      	movs	r3, #8
 8003546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800354a:	e10a      	b.n	8003762 <UART_SetConfig+0x2e6>
 800354c:	2310      	movs	r3, #16
 800354e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003552:	e106      	b.n	8003762 <UART_SetConfig+0x2e6>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a7c      	ldr	r2, [pc, #496]	; (800374c <UART_SetConfig+0x2d0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d138      	bne.n	80035d0 <UART_SetConfig+0x154>
 800355e:	4b7a      	ldr	r3, [pc, #488]	; (8003748 <UART_SetConfig+0x2cc>)
 8003560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003564:	f003 030c 	and.w	r3, r3, #12
 8003568:	2b0c      	cmp	r3, #12
 800356a:	d82d      	bhi.n	80035c8 <UART_SetConfig+0x14c>
 800356c:	a201      	add	r2, pc, #4	; (adr r2, 8003574 <UART_SetConfig+0xf8>)
 800356e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003572:	bf00      	nop
 8003574:	080035a9 	.word	0x080035a9
 8003578:	080035c9 	.word	0x080035c9
 800357c:	080035c9 	.word	0x080035c9
 8003580:	080035c9 	.word	0x080035c9
 8003584:	080035b9 	.word	0x080035b9
 8003588:	080035c9 	.word	0x080035c9
 800358c:	080035c9 	.word	0x080035c9
 8003590:	080035c9 	.word	0x080035c9
 8003594:	080035b1 	.word	0x080035b1
 8003598:	080035c9 	.word	0x080035c9
 800359c:	080035c9 	.word	0x080035c9
 80035a0:	080035c9 	.word	0x080035c9
 80035a4:	080035c1 	.word	0x080035c1
 80035a8:	2300      	movs	r3, #0
 80035aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ae:	e0d8      	b.n	8003762 <UART_SetConfig+0x2e6>
 80035b0:	2302      	movs	r3, #2
 80035b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035b6:	e0d4      	b.n	8003762 <UART_SetConfig+0x2e6>
 80035b8:	2304      	movs	r3, #4
 80035ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035be:	e0d0      	b.n	8003762 <UART_SetConfig+0x2e6>
 80035c0:	2308      	movs	r3, #8
 80035c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035c6:	e0cc      	b.n	8003762 <UART_SetConfig+0x2e6>
 80035c8:	2310      	movs	r3, #16
 80035ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ce:	e0c8      	b.n	8003762 <UART_SetConfig+0x2e6>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a5e      	ldr	r2, [pc, #376]	; (8003750 <UART_SetConfig+0x2d4>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d125      	bne.n	8003626 <UART_SetConfig+0x1aa>
 80035da:	4b5b      	ldr	r3, [pc, #364]	; (8003748 <UART_SetConfig+0x2cc>)
 80035dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80035e4:	2b30      	cmp	r3, #48	; 0x30
 80035e6:	d016      	beq.n	8003616 <UART_SetConfig+0x19a>
 80035e8:	2b30      	cmp	r3, #48	; 0x30
 80035ea:	d818      	bhi.n	800361e <UART_SetConfig+0x1a2>
 80035ec:	2b20      	cmp	r3, #32
 80035ee:	d00a      	beq.n	8003606 <UART_SetConfig+0x18a>
 80035f0:	2b20      	cmp	r3, #32
 80035f2:	d814      	bhi.n	800361e <UART_SetConfig+0x1a2>
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <UART_SetConfig+0x182>
 80035f8:	2b10      	cmp	r3, #16
 80035fa:	d008      	beq.n	800360e <UART_SetConfig+0x192>
 80035fc:	e00f      	b.n	800361e <UART_SetConfig+0x1a2>
 80035fe:	2300      	movs	r3, #0
 8003600:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003604:	e0ad      	b.n	8003762 <UART_SetConfig+0x2e6>
 8003606:	2302      	movs	r3, #2
 8003608:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800360c:	e0a9      	b.n	8003762 <UART_SetConfig+0x2e6>
 800360e:	2304      	movs	r3, #4
 8003610:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003614:	e0a5      	b.n	8003762 <UART_SetConfig+0x2e6>
 8003616:	2308      	movs	r3, #8
 8003618:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800361c:	e0a1      	b.n	8003762 <UART_SetConfig+0x2e6>
 800361e:	2310      	movs	r3, #16
 8003620:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003624:	e09d      	b.n	8003762 <UART_SetConfig+0x2e6>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a4a      	ldr	r2, [pc, #296]	; (8003754 <UART_SetConfig+0x2d8>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d125      	bne.n	800367c <UART_SetConfig+0x200>
 8003630:	4b45      	ldr	r3, [pc, #276]	; (8003748 <UART_SetConfig+0x2cc>)
 8003632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003636:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800363a:	2bc0      	cmp	r3, #192	; 0xc0
 800363c:	d016      	beq.n	800366c <UART_SetConfig+0x1f0>
 800363e:	2bc0      	cmp	r3, #192	; 0xc0
 8003640:	d818      	bhi.n	8003674 <UART_SetConfig+0x1f8>
 8003642:	2b80      	cmp	r3, #128	; 0x80
 8003644:	d00a      	beq.n	800365c <UART_SetConfig+0x1e0>
 8003646:	2b80      	cmp	r3, #128	; 0x80
 8003648:	d814      	bhi.n	8003674 <UART_SetConfig+0x1f8>
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <UART_SetConfig+0x1d8>
 800364e:	2b40      	cmp	r3, #64	; 0x40
 8003650:	d008      	beq.n	8003664 <UART_SetConfig+0x1e8>
 8003652:	e00f      	b.n	8003674 <UART_SetConfig+0x1f8>
 8003654:	2300      	movs	r3, #0
 8003656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800365a:	e082      	b.n	8003762 <UART_SetConfig+0x2e6>
 800365c:	2302      	movs	r3, #2
 800365e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003662:	e07e      	b.n	8003762 <UART_SetConfig+0x2e6>
 8003664:	2304      	movs	r3, #4
 8003666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800366a:	e07a      	b.n	8003762 <UART_SetConfig+0x2e6>
 800366c:	2308      	movs	r3, #8
 800366e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003672:	e076      	b.n	8003762 <UART_SetConfig+0x2e6>
 8003674:	2310      	movs	r3, #16
 8003676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800367a:	e072      	b.n	8003762 <UART_SetConfig+0x2e6>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a35      	ldr	r2, [pc, #212]	; (8003758 <UART_SetConfig+0x2dc>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d12a      	bne.n	80036dc <UART_SetConfig+0x260>
 8003686:	4b30      	ldr	r3, [pc, #192]	; (8003748 <UART_SetConfig+0x2cc>)
 8003688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003690:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003694:	d01a      	beq.n	80036cc <UART_SetConfig+0x250>
 8003696:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800369a:	d81b      	bhi.n	80036d4 <UART_SetConfig+0x258>
 800369c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036a0:	d00c      	beq.n	80036bc <UART_SetConfig+0x240>
 80036a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036a6:	d815      	bhi.n	80036d4 <UART_SetConfig+0x258>
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <UART_SetConfig+0x238>
 80036ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036b0:	d008      	beq.n	80036c4 <UART_SetConfig+0x248>
 80036b2:	e00f      	b.n	80036d4 <UART_SetConfig+0x258>
 80036b4:	2300      	movs	r3, #0
 80036b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ba:	e052      	b.n	8003762 <UART_SetConfig+0x2e6>
 80036bc:	2302      	movs	r3, #2
 80036be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036c2:	e04e      	b.n	8003762 <UART_SetConfig+0x2e6>
 80036c4:	2304      	movs	r3, #4
 80036c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ca:	e04a      	b.n	8003762 <UART_SetConfig+0x2e6>
 80036cc:	2308      	movs	r3, #8
 80036ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036d2:	e046      	b.n	8003762 <UART_SetConfig+0x2e6>
 80036d4:	2310      	movs	r3, #16
 80036d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036da:	e042      	b.n	8003762 <UART_SetConfig+0x2e6>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a17      	ldr	r2, [pc, #92]	; (8003740 <UART_SetConfig+0x2c4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d13a      	bne.n	800375c <UART_SetConfig+0x2e0>
 80036e6:	4b18      	ldr	r3, [pc, #96]	; (8003748 <UART_SetConfig+0x2cc>)
 80036e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036f4:	d01a      	beq.n	800372c <UART_SetConfig+0x2b0>
 80036f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036fa:	d81b      	bhi.n	8003734 <UART_SetConfig+0x2b8>
 80036fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003700:	d00c      	beq.n	800371c <UART_SetConfig+0x2a0>
 8003702:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003706:	d815      	bhi.n	8003734 <UART_SetConfig+0x2b8>
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <UART_SetConfig+0x298>
 800370c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003710:	d008      	beq.n	8003724 <UART_SetConfig+0x2a8>
 8003712:	e00f      	b.n	8003734 <UART_SetConfig+0x2b8>
 8003714:	2300      	movs	r3, #0
 8003716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800371a:	e022      	b.n	8003762 <UART_SetConfig+0x2e6>
 800371c:	2302      	movs	r3, #2
 800371e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003722:	e01e      	b.n	8003762 <UART_SetConfig+0x2e6>
 8003724:	2304      	movs	r3, #4
 8003726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800372a:	e01a      	b.n	8003762 <UART_SetConfig+0x2e6>
 800372c:	2308      	movs	r3, #8
 800372e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003732:	e016      	b.n	8003762 <UART_SetConfig+0x2e6>
 8003734:	2310      	movs	r3, #16
 8003736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800373a:	e012      	b.n	8003762 <UART_SetConfig+0x2e6>
 800373c:	efff69f3 	.word	0xefff69f3
 8003740:	40008000 	.word	0x40008000
 8003744:	40013800 	.word	0x40013800
 8003748:	40021000 	.word	0x40021000
 800374c:	40004400 	.word	0x40004400
 8003750:	40004800 	.word	0x40004800
 8003754:	40004c00 	.word	0x40004c00
 8003758:	40005000 	.word	0x40005000
 800375c:	2310      	movs	r3, #16
 800375e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a9f      	ldr	r2, [pc, #636]	; (80039e4 <UART_SetConfig+0x568>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d17a      	bne.n	8003862 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800376c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003770:	2b08      	cmp	r3, #8
 8003772:	d824      	bhi.n	80037be <UART_SetConfig+0x342>
 8003774:	a201      	add	r2, pc, #4	; (adr r2, 800377c <UART_SetConfig+0x300>)
 8003776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377a:	bf00      	nop
 800377c:	080037a1 	.word	0x080037a1
 8003780:	080037bf 	.word	0x080037bf
 8003784:	080037a9 	.word	0x080037a9
 8003788:	080037bf 	.word	0x080037bf
 800378c:	080037af 	.word	0x080037af
 8003790:	080037bf 	.word	0x080037bf
 8003794:	080037bf 	.word	0x080037bf
 8003798:	080037bf 	.word	0x080037bf
 800379c:	080037b7 	.word	0x080037b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037a0:	f7fe fa3c 	bl	8001c1c <HAL_RCC_GetPCLK1Freq>
 80037a4:	61f8      	str	r0, [r7, #28]
        break;
 80037a6:	e010      	b.n	80037ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037a8:	4b8f      	ldr	r3, [pc, #572]	; (80039e8 <UART_SetConfig+0x56c>)
 80037aa:	61fb      	str	r3, [r7, #28]
        break;
 80037ac:	e00d      	b.n	80037ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ae:	f7fe f99d 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 80037b2:	61f8      	str	r0, [r7, #28]
        break;
 80037b4:	e009      	b.n	80037ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ba:	61fb      	str	r3, [r7, #28]
        break;
 80037bc:	e005      	b.n	80037ca <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80037be:	2300      	movs	r3, #0
 80037c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80037c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 80fb 	beq.w	80039c8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	4613      	mov	r3, r2
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	4413      	add	r3, r2
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d305      	bcc.n	80037ee <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037e8:	69fa      	ldr	r2, [r7, #28]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d903      	bls.n	80037f6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80037f4:	e0e8      	b.n	80039c8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	2200      	movs	r2, #0
 80037fa:	461c      	mov	r4, r3
 80037fc:	4615      	mov	r5, r2
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	f04f 0300 	mov.w	r3, #0
 8003806:	022b      	lsls	r3, r5, #8
 8003808:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800380c:	0222      	lsls	r2, r4, #8
 800380e:	68f9      	ldr	r1, [r7, #12]
 8003810:	6849      	ldr	r1, [r1, #4]
 8003812:	0849      	lsrs	r1, r1, #1
 8003814:	2000      	movs	r0, #0
 8003816:	4688      	mov	r8, r1
 8003818:	4681      	mov	r9, r0
 800381a:	eb12 0a08 	adds.w	sl, r2, r8
 800381e:	eb43 0b09 	adc.w	fp, r3, r9
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	603b      	str	r3, [r7, #0]
 800382a:	607a      	str	r2, [r7, #4]
 800382c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003830:	4650      	mov	r0, sl
 8003832:	4659      	mov	r1, fp
 8003834:	f7fc fccc 	bl	80001d0 <__aeabi_uldivmod>
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	4613      	mov	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003846:	d308      	bcc.n	800385a <UART_SetConfig+0x3de>
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800384e:	d204      	bcs.n	800385a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	60da      	str	r2, [r3, #12]
 8003858:	e0b6      	b.n	80039c8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003860:	e0b2      	b.n	80039c8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800386a:	d15e      	bne.n	800392a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800386c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003870:	2b08      	cmp	r3, #8
 8003872:	d828      	bhi.n	80038c6 <UART_SetConfig+0x44a>
 8003874:	a201      	add	r2, pc, #4	; (adr r2, 800387c <UART_SetConfig+0x400>)
 8003876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387a:	bf00      	nop
 800387c:	080038a1 	.word	0x080038a1
 8003880:	080038a9 	.word	0x080038a9
 8003884:	080038b1 	.word	0x080038b1
 8003888:	080038c7 	.word	0x080038c7
 800388c:	080038b7 	.word	0x080038b7
 8003890:	080038c7 	.word	0x080038c7
 8003894:	080038c7 	.word	0x080038c7
 8003898:	080038c7 	.word	0x080038c7
 800389c:	080038bf 	.word	0x080038bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038a0:	f7fe f9bc 	bl	8001c1c <HAL_RCC_GetPCLK1Freq>
 80038a4:	61f8      	str	r0, [r7, #28]
        break;
 80038a6:	e014      	b.n	80038d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038a8:	f7fe f9ce 	bl	8001c48 <HAL_RCC_GetPCLK2Freq>
 80038ac:	61f8      	str	r0, [r7, #28]
        break;
 80038ae:	e010      	b.n	80038d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038b0:	4b4d      	ldr	r3, [pc, #308]	; (80039e8 <UART_SetConfig+0x56c>)
 80038b2:	61fb      	str	r3, [r7, #28]
        break;
 80038b4:	e00d      	b.n	80038d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038b6:	f7fe f919 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 80038ba:	61f8      	str	r0, [r7, #28]
        break;
 80038bc:	e009      	b.n	80038d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038c2:	61fb      	str	r3, [r7, #28]
        break;
 80038c4:	e005      	b.n	80038d2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80038d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d077      	beq.n	80039c8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	005a      	lsls	r2, r3, #1
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	085b      	lsrs	r3, r3, #1
 80038e2:	441a      	add	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	2b0f      	cmp	r3, #15
 80038f2:	d916      	bls.n	8003922 <UART_SetConfig+0x4a6>
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038fa:	d212      	bcs.n	8003922 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	b29b      	uxth	r3, r3
 8003900:	f023 030f 	bic.w	r3, r3, #15
 8003904:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	085b      	lsrs	r3, r3, #1
 800390a:	b29b      	uxth	r3, r3
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	b29a      	uxth	r2, r3
 8003912:	8afb      	ldrh	r3, [r7, #22]
 8003914:	4313      	orrs	r3, r2
 8003916:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	8afa      	ldrh	r2, [r7, #22]
 800391e:	60da      	str	r2, [r3, #12]
 8003920:	e052      	b.n	80039c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003928:	e04e      	b.n	80039c8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800392a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800392e:	2b08      	cmp	r3, #8
 8003930:	d827      	bhi.n	8003982 <UART_SetConfig+0x506>
 8003932:	a201      	add	r2, pc, #4	; (adr r2, 8003938 <UART_SetConfig+0x4bc>)
 8003934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003938:	0800395d 	.word	0x0800395d
 800393c:	08003965 	.word	0x08003965
 8003940:	0800396d 	.word	0x0800396d
 8003944:	08003983 	.word	0x08003983
 8003948:	08003973 	.word	0x08003973
 800394c:	08003983 	.word	0x08003983
 8003950:	08003983 	.word	0x08003983
 8003954:	08003983 	.word	0x08003983
 8003958:	0800397b 	.word	0x0800397b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800395c:	f7fe f95e 	bl	8001c1c <HAL_RCC_GetPCLK1Freq>
 8003960:	61f8      	str	r0, [r7, #28]
        break;
 8003962:	e014      	b.n	800398e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003964:	f7fe f970 	bl	8001c48 <HAL_RCC_GetPCLK2Freq>
 8003968:	61f8      	str	r0, [r7, #28]
        break;
 800396a:	e010      	b.n	800398e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800396c:	4b1e      	ldr	r3, [pc, #120]	; (80039e8 <UART_SetConfig+0x56c>)
 800396e:	61fb      	str	r3, [r7, #28]
        break;
 8003970:	e00d      	b.n	800398e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003972:	f7fe f8bb 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8003976:	61f8      	str	r0, [r7, #28]
        break;
 8003978:	e009      	b.n	800398e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800397a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800397e:	61fb      	str	r3, [r7, #28]
        break;
 8003980:	e005      	b.n	800398e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003982:	2300      	movs	r3, #0
 8003984:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800398c:	bf00      	nop
    }

    if (pclk != 0U)
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d019      	beq.n	80039c8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	085a      	lsrs	r2, r3, #1
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	441a      	add	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	2b0f      	cmp	r3, #15
 80039ac:	d909      	bls.n	80039c2 <UART_SetConfig+0x546>
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b4:	d205      	bcs.n	80039c2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	60da      	str	r2, [r3, #12]
 80039c0:	e002      	b.n	80039c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80039d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3728      	adds	r7, #40	; 0x28
 80039dc:	46bd      	mov	sp, r7
 80039de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039e2:	bf00      	nop
 80039e4:	40008000 	.word	0x40008000
 80039e8:	00f42400 	.word	0x00f42400

080039ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00a      	beq.n	8003a16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00a      	beq.n	8003a5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	f003 0310 	and.w	r3, r3, #16
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00a      	beq.n	8003a9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	f003 0320 	and.w	r3, r3, #32
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00a      	beq.n	8003ac0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d01a      	beq.n	8003b02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aea:	d10a      	bne.n	8003b02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	605a      	str	r2, [r3, #4]
  }
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af02      	add	r7, sp, #8
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b40:	f7fc ff4a 	bl	80009d8 <HAL_GetTick>
 8003b44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d10e      	bne.n	8003b72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f82d 	bl	8003bc2 <UART_WaitOnFlagUntilTimeout>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e023      	b.n	8003bba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b04      	cmp	r3, #4
 8003b7e:	d10e      	bne.n	8003b9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f817 	bl	8003bc2 <UART_WaitOnFlagUntilTimeout>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e00d      	b.n	8003bba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b09c      	sub	sp, #112	; 0x70
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	60f8      	str	r0, [r7, #12]
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	603b      	str	r3, [r7, #0]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bd2:	e0a5      	b.n	8003d20 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bda:	f000 80a1 	beq.w	8003d20 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bde:	f7fc fefb 	bl	80009d8 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d302      	bcc.n	8003bf4 <UART_WaitOnFlagUntilTimeout+0x32>
 8003bee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d13e      	bne.n	8003c72 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bfc:	e853 3f00 	ldrex	r3, [r3]
 8003c00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c08:	667b      	str	r3, [r7, #100]	; 0x64
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c14:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c1a:	e841 2300 	strex	r3, r2, [r1]
 8003c1e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1e6      	bne.n	8003bf4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3308      	adds	r3, #8
 8003c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c30:	e853 3f00 	ldrex	r3, [r3]
 8003c34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c38:	f023 0301 	bic.w	r3, r3, #1
 8003c3c:	663b      	str	r3, [r7, #96]	; 0x60
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	3308      	adds	r3, #8
 8003c44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c46:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c4e:	e841 2300 	strex	r3, r2, [r1]
 8003c52:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1e5      	bne.n	8003c26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e067      	b.n	8003d42 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d04f      	beq.n	8003d20 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c8e:	d147      	bne.n	8003d20 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c98:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca2:	e853 3f00 	ldrex	r3, [r3]
 8003ca6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8003cba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cc0:	e841 2300 	strex	r3, r2, [r1]
 8003cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1e6      	bne.n	8003c9a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3308      	adds	r3, #8
 8003cd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	e853 3f00 	ldrex	r3, [r3]
 8003cda:	613b      	str	r3, [r7, #16]
   return(result);
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f023 0301 	bic.w	r3, r3, #1
 8003ce2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3308      	adds	r3, #8
 8003cea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003cec:	623a      	str	r2, [r7, #32]
 8003cee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf0:	69f9      	ldr	r1, [r7, #28]
 8003cf2:	6a3a      	ldr	r2, [r7, #32]
 8003cf4:	e841 2300 	strex	r3, r2, [r1]
 8003cf8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1e5      	bne.n	8003ccc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2220      	movs	r2, #32
 8003d04:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e010      	b.n	8003d42 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	69da      	ldr	r2, [r3, #28]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	bf0c      	ite	eq
 8003d30:	2301      	moveq	r3, #1
 8003d32:	2300      	movne	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	461a      	mov	r2, r3
 8003d38:	79fb      	ldrb	r3, [r7, #7]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	f43f af4a 	beq.w	8003bd4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3770      	adds	r7, #112	; 0x70
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b095      	sub	sp, #84	; 0x54
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d5a:	e853 3f00 	ldrex	r3, [r3]
 8003d5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d70:	643b      	str	r3, [r7, #64]	; 0x40
 8003d72:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d78:	e841 2300 	strex	r3, r2, [r1]
 8003d7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1e6      	bne.n	8003d52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3308      	adds	r3, #8
 8003d8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	e853 3f00 	ldrex	r3, [r3]
 8003d92:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	f023 0301 	bic.w	r3, r3, #1
 8003d9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3308      	adds	r3, #8
 8003da2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003da4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003da6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003daa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dac:	e841 2300 	strex	r3, r2, [r1]
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1e5      	bne.n	8003d84 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d118      	bne.n	8003df2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	e853 3f00 	ldrex	r3, [r3]
 8003dcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	f023 0310 	bic.w	r3, r3, #16
 8003dd4:	647b      	str	r3, [r7, #68]	; 0x44
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dde:	61bb      	str	r3, [r7, #24]
 8003de0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de2:	6979      	ldr	r1, [r7, #20]
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	e841 2300 	strex	r3, r2, [r1]
 8003dea:	613b      	str	r3, [r7, #16]
   return(result);
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1e6      	bne.n	8003dc0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2220      	movs	r2, #32
 8003df6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003e04:	bf00      	nop
 8003e06:	3754      	adds	r7, #84	; 0x54
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f7ff fb0e 	bl	8003450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e34:	bf00      	nop
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	e853 3f00 	ldrex	r3, [r3]
 8003e50:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e58:	61fb      	str	r3, [r7, #28]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	61bb      	str	r3, [r7, #24]
 8003e64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e66:	6979      	ldr	r1, [r7, #20]
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	e841 2300 	strex	r3, r2, [r1]
 8003e6e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1e6      	bne.n	8003e44 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7ff fada 	bl	800343c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e88:	bf00      	nop
 8003e8a:	3720      	adds	r7, #32
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <__NVIC_SetPriority>:
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	4603      	mov	r3, r0
 8003eac:	6039      	str	r1, [r7, #0]
 8003eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	db0a      	blt.n	8003ece <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	490c      	ldr	r1, [pc, #48]	; (8003ef0 <__NVIC_SetPriority+0x4c>)
 8003ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec2:	0112      	lsls	r2, r2, #4
 8003ec4:	b2d2      	uxtb	r2, r2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003ecc:	e00a      	b.n	8003ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	4908      	ldr	r1, [pc, #32]	; (8003ef4 <__NVIC_SetPriority+0x50>)
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	3b04      	subs	r3, #4
 8003edc:	0112      	lsls	r2, r2, #4
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	761a      	strb	r2, [r3, #24]
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	e000e100 	.word	0xe000e100
 8003ef4:	e000ed00 	.word	0xe000ed00

08003ef8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003efc:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <SysTick_Handler+0x1c>)
 8003efe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003f00:	f001 fd28 	bl	8005954 <xTaskGetSchedulerState>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d001      	beq.n	8003f0e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003f0a:	f002 fb0d 	bl	8006528 <xPortSysTickHandler>
  }
}
 8003f0e:	bf00      	nop
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	e000e010 	.word	0xe000e010

08003f18 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	f06f 0004 	mvn.w	r0, #4
 8003f22:	f7ff ffbf 	bl	8003ea4 <__NVIC_SetPriority>
#endif
}
 8003f26:	bf00      	nop
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f32:	f3ef 8305 	mrs	r3, IPSR
 8003f36:	603b      	str	r3, [r7, #0]
  return(result);
 8003f38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003f3e:	f06f 0305 	mvn.w	r3, #5
 8003f42:	607b      	str	r3, [r7, #4]
 8003f44:	e00c      	b.n	8003f60 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003f46:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <osKernelInitialize+0x44>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d105      	bne.n	8003f5a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003f4e:	4b08      	ldr	r3, [pc, #32]	; (8003f70 <osKernelInitialize+0x44>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	607b      	str	r3, [r7, #4]
 8003f58:	e002      	b.n	8003f60 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003f5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003f60:	687b      	ldr	r3, [r7, #4]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	20000168 	.word	0x20000168

08003f74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f7a:	f3ef 8305 	mrs	r3, IPSR
 8003f7e:	603b      	str	r3, [r7, #0]
  return(result);
 8003f80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003f86:	f06f 0305 	mvn.w	r3, #5
 8003f8a:	607b      	str	r3, [r7, #4]
 8003f8c:	e010      	b.n	8003fb0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003f8e:	4b0b      	ldr	r3, [pc, #44]	; (8003fbc <osKernelStart+0x48>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d109      	bne.n	8003faa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003f96:	f7ff ffbf 	bl	8003f18 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003f9a:	4b08      	ldr	r3, [pc, #32]	; (8003fbc <osKernelStart+0x48>)
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003fa0:	f001 f87c 	bl	800509c <vTaskStartScheduler>
      stat = osOK;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	607b      	str	r3, [r7, #4]
 8003fa8:	e002      	b.n	8003fb0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003fb0:	687b      	ldr	r3, [r7, #4]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000168 	.word	0x20000168

08003fc0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b08e      	sub	sp, #56	; 0x38
 8003fc4:	af04      	add	r7, sp, #16
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fd0:	f3ef 8305 	mrs	r3, IPSR
 8003fd4:	617b      	str	r3, [r7, #20]
  return(result);
 8003fd6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d17e      	bne.n	80040da <osThreadNew+0x11a>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d07b      	beq.n	80040da <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003fe2:	2380      	movs	r3, #128	; 0x80
 8003fe4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003fe6:	2318      	movs	r3, #24
 8003fe8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003fea:	2300      	movs	r3, #0
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ff2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d045      	beq.n	8004086 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <osThreadNew+0x48>
        name = attr->name;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <osThreadNew+0x6e>
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	2b38      	cmp	r3, #56	; 0x38
 8004020:	d805      	bhi.n	800402e <osThreadNew+0x6e>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <osThreadNew+0x72>
        return (NULL);
 800402e:	2300      	movs	r3, #0
 8004030:	e054      	b.n	80040dc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	089b      	lsrs	r3, r3, #2
 8004040:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00e      	beq.n	8004068 <osThreadNew+0xa8>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	2bbb      	cmp	r3, #187	; 0xbb
 8004050:	d90a      	bls.n	8004068 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004056:	2b00      	cmp	r3, #0
 8004058:	d006      	beq.n	8004068 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <osThreadNew+0xa8>
        mem = 1;
 8004062:	2301      	movs	r3, #1
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	e010      	b.n	800408a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10c      	bne.n	800408a <osThreadNew+0xca>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d108      	bne.n	800408a <osThreadNew+0xca>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d104      	bne.n	800408a <osThreadNew+0xca>
          mem = 0;
 8004080:	2300      	movs	r3, #0
 8004082:	61bb      	str	r3, [r7, #24]
 8004084:	e001      	b.n	800408a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004086:	2300      	movs	r3, #0
 8004088:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d110      	bne.n	80040b2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004098:	9202      	str	r2, [sp, #8]
 800409a:	9301      	str	r3, [sp, #4]
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	6a3a      	ldr	r2, [r7, #32]
 80040a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 fe0c 	bl	8004cc4 <xTaskCreateStatic>
 80040ac:	4603      	mov	r3, r0
 80040ae:	613b      	str	r3, [r7, #16]
 80040b0:	e013      	b.n	80040da <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d110      	bne.n	80040da <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	f107 0310 	add.w	r3, r7, #16
 80040c0:	9301      	str	r3, [sp, #4]
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 fe57 	bl	8004d7e <xTaskCreate>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d001      	beq.n	80040da <osThreadNew+0x11a>
            hTask = NULL;
 80040d6:	2300      	movs	r3, #0
 80040d8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80040da:	693b      	ldr	r3, [r7, #16]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3728      	adds	r7, #40	; 0x28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040ec:	f3ef 8305 	mrs	r3, IPSR
 80040f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80040f2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <osDelay+0x1c>
    stat = osErrorISR;
 80040f8:	f06f 0305 	mvn.w	r3, #5
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	e007      	b.n	8004110 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004100:	2300      	movs	r3, #0
 8004102:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <osDelay+0x2c>
      vTaskDelay(ticks);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 ff92 	bl	8005034 <vTaskDelay>
    }
  }

  return (stat);
 8004110:	68fb      	ldr	r3, [r7, #12]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
	...

0800411c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4a07      	ldr	r2, [pc, #28]	; (8004148 <vApplicationGetIdleTaskMemory+0x2c>)
 800412c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	4a06      	ldr	r2, [pc, #24]	; (800414c <vApplicationGetIdleTaskMemory+0x30>)
 8004132:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2280      	movs	r2, #128	; 0x80
 8004138:	601a      	str	r2, [r3, #0]
}
 800413a:	bf00      	nop
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	2000016c 	.word	0x2000016c
 800414c:	20000228 	.word	0x20000228

08004150 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4a07      	ldr	r2, [pc, #28]	; (800417c <vApplicationGetTimerTaskMemory+0x2c>)
 8004160:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	4a06      	ldr	r2, [pc, #24]	; (8004180 <vApplicationGetTimerTaskMemory+0x30>)
 8004166:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800416e:	601a      	str	r2, [r3, #0]
}
 8004170:	bf00      	nop
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	20000428 	.word	0x20000428
 8004180:	200004e4 	.word	0x200004e4

08004184 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f103 0208 	add.w	r2, r3, #8
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800419c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f103 0208 	add.w	r2, r3, #8
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f103 0208 	add.w	r2, r3, #8
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041de:	b480      	push	{r7}
 80041e0:	b085      	sub	sp, #20
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	601a      	str	r2, [r3, #0]
}
 800421a:	bf00      	nop
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004226:	b480      	push	{r7}
 8004228:	b085      	sub	sp, #20
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800423c:	d103      	bne.n	8004246 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	e00c      	b.n	8004260 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3308      	adds	r3, #8
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	e002      	b.n	8004254 <vListInsert+0x2e>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	429a      	cmp	r2, r3
 800425e:	d2f6      	bcs.n	800424e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	601a      	str	r2, [r3, #0]
}
 800428c:	bf00      	nop
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6892      	ldr	r2, [r2, #8]
 80042ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6852      	ldr	r2, [r2, #4]
 80042b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d103      	bne.n	80042cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	1e5a      	subs	r2, r3, #1
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10a      	bne.n	8004316 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004312:	bf00      	nop
 8004314:	e7fe      	b.n	8004314 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004316:	f002 f875 	bl	8006404 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004322:	68f9      	ldr	r1, [r7, #12]
 8004324:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004326:	fb01 f303 	mul.w	r3, r1, r3
 800432a:	441a      	add	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004346:	3b01      	subs	r3, #1
 8004348:	68f9      	ldr	r1, [r7, #12]
 800434a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800434c:	fb01 f303 	mul.w	r3, r1, r3
 8004350:	441a      	add	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	22ff      	movs	r2, #255	; 0xff
 800435a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	22ff      	movs	r2, #255	; 0xff
 8004362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d114      	bne.n	8004396 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d01a      	beq.n	80043aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	3310      	adds	r3, #16
 8004378:	4618      	mov	r0, r3
 800437a:	f001 f929 	bl	80055d0 <xTaskRemoveFromEventList>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d012      	beq.n	80043aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004384:	4b0c      	ldr	r3, [pc, #48]	; (80043b8 <xQueueGenericReset+0xcc>)
 8004386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	f3bf 8f6f 	isb	sy
 8004394:	e009      	b.n	80043aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	3310      	adds	r3, #16
 800439a:	4618      	mov	r0, r3
 800439c:	f7ff fef2 	bl	8004184 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	3324      	adds	r3, #36	; 0x24
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff feed 	bl	8004184 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80043aa:	f002 f85b 	bl	8006464 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80043ae:	2301      	movs	r3, #1
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	e000ed04 	.word	0xe000ed04

080043bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08e      	sub	sp, #56	; 0x38
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10a      	bne.n	80043e6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80043d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d4:	f383 8811 	msr	BASEPRI, r3
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80043e2:	bf00      	nop
 80043e4:	e7fe      	b.n	80043e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10a      	bne.n	8004402 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80043ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f0:	f383 8811 	msr	BASEPRI, r3
 80043f4:	f3bf 8f6f 	isb	sy
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80043fe:	bf00      	nop
 8004400:	e7fe      	b.n	8004400 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d002      	beq.n	800440e <xQueueGenericCreateStatic+0x52>
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <xQueueGenericCreateStatic+0x56>
 800440e:	2301      	movs	r3, #1
 8004410:	e000      	b.n	8004414 <xQueueGenericCreateStatic+0x58>
 8004412:	2300      	movs	r3, #0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10a      	bne.n	800442e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441c:	f383 8811 	msr	BASEPRI, r3
 8004420:	f3bf 8f6f 	isb	sy
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	623b      	str	r3, [r7, #32]
}
 800442a:	bf00      	nop
 800442c:	e7fe      	b.n	800442c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d102      	bne.n	800443a <xQueueGenericCreateStatic+0x7e>
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <xQueueGenericCreateStatic+0x82>
 800443a:	2301      	movs	r3, #1
 800443c:	e000      	b.n	8004440 <xQueueGenericCreateStatic+0x84>
 800443e:	2300      	movs	r3, #0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10a      	bne.n	800445a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004448:	f383 8811 	msr	BASEPRI, r3
 800444c:	f3bf 8f6f 	isb	sy
 8004450:	f3bf 8f4f 	dsb	sy
 8004454:	61fb      	str	r3, [r7, #28]
}
 8004456:	bf00      	nop
 8004458:	e7fe      	b.n	8004458 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800445a:	2350      	movs	r3, #80	; 0x50
 800445c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2b50      	cmp	r3, #80	; 0x50
 8004462:	d00a      	beq.n	800447a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004468:	f383 8811 	msr	BASEPRI, r3
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	61bb      	str	r3, [r7, #24]
}
 8004476:	bf00      	nop
 8004478:	e7fe      	b.n	8004478 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800447a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00d      	beq.n	80044a2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800448e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	4613      	mov	r3, r2
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	68b9      	ldr	r1, [r7, #8]
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 f805 	bl	80044ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80044a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3730      	adds	r7, #48	; 0x30
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d103      	bne.n	80044c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	e002      	b.n	80044ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80044da:	2101      	movs	r1, #1
 80044dc:	69b8      	ldr	r0, [r7, #24]
 80044de:	f7ff ff05 	bl	80042ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	78fa      	ldrb	r2, [r7, #3]
 80044e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80044ea:	bf00      	nop
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08e      	sub	sp, #56	; 0x38
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
 8004500:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004502:	2300      	movs	r3, #0
 8004504:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800450a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10a      	bne.n	8004526 <xQueueGenericSend+0x32>
	__asm volatile
 8004510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004522:	bf00      	nop
 8004524:	e7fe      	b.n	8004524 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d103      	bne.n	8004534 <xQueueGenericSend+0x40>
 800452c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <xQueueGenericSend+0x44>
 8004534:	2301      	movs	r3, #1
 8004536:	e000      	b.n	800453a <xQueueGenericSend+0x46>
 8004538:	2300      	movs	r3, #0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10a      	bne.n	8004554 <xQueueGenericSend+0x60>
	__asm volatile
 800453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004550:	bf00      	nop
 8004552:	e7fe      	b.n	8004552 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	2b02      	cmp	r3, #2
 8004558:	d103      	bne.n	8004562 <xQueueGenericSend+0x6e>
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455e:	2b01      	cmp	r3, #1
 8004560:	d101      	bne.n	8004566 <xQueueGenericSend+0x72>
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <xQueueGenericSend+0x74>
 8004566:	2300      	movs	r3, #0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10a      	bne.n	8004582 <xQueueGenericSend+0x8e>
	__asm volatile
 800456c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004570:	f383 8811 	msr	BASEPRI, r3
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	623b      	str	r3, [r7, #32]
}
 800457e:	bf00      	nop
 8004580:	e7fe      	b.n	8004580 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004582:	f001 f9e7 	bl	8005954 <xTaskGetSchedulerState>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d102      	bne.n	8004592 <xQueueGenericSend+0x9e>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <xQueueGenericSend+0xa2>
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <xQueueGenericSend+0xa4>
 8004596:	2300      	movs	r3, #0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10a      	bne.n	80045b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800459c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a0:	f383 8811 	msr	BASEPRI, r3
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	61fb      	str	r3, [r7, #28]
}
 80045ae:	bf00      	nop
 80045b0:	e7fe      	b.n	80045b0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045b2:	f001 ff27 	bl	8006404 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045be:	429a      	cmp	r2, r3
 80045c0:	d302      	bcc.n	80045c8 <xQueueGenericSend+0xd4>
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d129      	bne.n	800461c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	68b9      	ldr	r1, [r7, #8]
 80045cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045ce:	f000 fa0b 	bl	80049e8 <prvCopyDataToQueue>
 80045d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d010      	beq.n	80045fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045de:	3324      	adds	r3, #36	; 0x24
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fff5 	bl	80055d0 <xTaskRemoveFromEventList>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d013      	beq.n	8004614 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80045ec:	4b3f      	ldr	r3, [pc, #252]	; (80046ec <xQueueGenericSend+0x1f8>)
 80045ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	f3bf 8f4f 	dsb	sy
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	e00a      	b.n	8004614 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80045fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004600:	2b00      	cmp	r3, #0
 8004602:	d007      	beq.n	8004614 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004604:	4b39      	ldr	r3, [pc, #228]	; (80046ec <xQueueGenericSend+0x1f8>)
 8004606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800460a:	601a      	str	r2, [r3, #0]
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004614:	f001 ff26 	bl	8006464 <vPortExitCritical>
				return pdPASS;
 8004618:	2301      	movs	r3, #1
 800461a:	e063      	b.n	80046e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d103      	bne.n	800462a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004622:	f001 ff1f 	bl	8006464 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004626:	2300      	movs	r3, #0
 8004628:	e05c      	b.n	80046e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800462a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800462c:	2b00      	cmp	r3, #0
 800462e:	d106      	bne.n	800463e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004630:	f107 0314 	add.w	r3, r7, #20
 8004634:	4618      	mov	r0, r3
 8004636:	f001 f82f 	bl	8005698 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800463a:	2301      	movs	r3, #1
 800463c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800463e:	f001 ff11 	bl	8006464 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004642:	f000 fd9b 	bl	800517c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004646:	f001 fedd 	bl	8006404 <vPortEnterCritical>
 800464a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004650:	b25b      	sxtb	r3, r3
 8004652:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004656:	d103      	bne.n	8004660 <xQueueGenericSend+0x16c>
 8004658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004662:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004666:	b25b      	sxtb	r3, r3
 8004668:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800466c:	d103      	bne.n	8004676 <xQueueGenericSend+0x182>
 800466e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004676:	f001 fef5 	bl	8006464 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800467a:	1d3a      	adds	r2, r7, #4
 800467c:	f107 0314 	add.w	r3, r7, #20
 8004680:	4611      	mov	r1, r2
 8004682:	4618      	mov	r0, r3
 8004684:	f001 f81e 	bl	80056c4 <xTaskCheckForTimeOut>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d124      	bne.n	80046d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800468e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004690:	f000 faa2 	bl	8004bd8 <prvIsQueueFull>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d018      	beq.n	80046cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800469a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469c:	3310      	adds	r3, #16
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	4611      	mov	r1, r2
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 ff44 	bl	8005530 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80046a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046aa:	f000 fa2d 	bl	8004b08 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80046ae:	f000 fd73 	bl	8005198 <xTaskResumeAll>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f47f af7c 	bne.w	80045b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80046ba:	4b0c      	ldr	r3, [pc, #48]	; (80046ec <xQueueGenericSend+0x1f8>)
 80046bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	f3bf 8f4f 	dsb	sy
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	e772      	b.n	80045b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80046cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046ce:	f000 fa1b 	bl	8004b08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046d2:	f000 fd61 	bl	8005198 <xTaskResumeAll>
 80046d6:	e76c      	b.n	80045b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80046d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046da:	f000 fa15 	bl	8004b08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046de:	f000 fd5b 	bl	8005198 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80046e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3738      	adds	r7, #56	; 0x38
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	e000ed04 	.word	0xe000ed04

080046f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b090      	sub	sp, #64	; 0x40
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
 80046fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10a      	bne.n	800471e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470c:	f383 8811 	msr	BASEPRI, r3
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800471a:	bf00      	nop
 800471c:	e7fe      	b.n	800471c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d103      	bne.n	800472c <xQueueGenericSendFromISR+0x3c>
 8004724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <xQueueGenericSendFromISR+0x40>
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <xQueueGenericSendFromISR+0x42>
 8004730:	2300      	movs	r3, #0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10a      	bne.n	800474c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004748:	bf00      	nop
 800474a:	e7fe      	b.n	800474a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2b02      	cmp	r3, #2
 8004750:	d103      	bne.n	800475a <xQueueGenericSendFromISR+0x6a>
 8004752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004756:	2b01      	cmp	r3, #1
 8004758:	d101      	bne.n	800475e <xQueueGenericSendFromISR+0x6e>
 800475a:	2301      	movs	r3, #1
 800475c:	e000      	b.n	8004760 <xQueueGenericSendFromISR+0x70>
 800475e:	2300      	movs	r3, #0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10a      	bne.n	800477a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004768:	f383 8811 	msr	BASEPRI, r3
 800476c:	f3bf 8f6f 	isb	sy
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	623b      	str	r3, [r7, #32]
}
 8004776:	bf00      	nop
 8004778:	e7fe      	b.n	8004778 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800477a:	f001 ff25 	bl	80065c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800477e:	f3ef 8211 	mrs	r2, BASEPRI
 8004782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004786:	f383 8811 	msr	BASEPRI, r3
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	61fa      	str	r2, [r7, #28]
 8004794:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004796:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004798:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800479a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800479e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d302      	bcc.n	80047ac <xQueueGenericSendFromISR+0xbc>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d12f      	bne.n	800480c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80047ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ba:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	68b9      	ldr	r1, [r7, #8]
 80047c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80047c2:	f000 f911 	bl	80049e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80047c6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80047ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047ce:	d112      	bne.n	80047f6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d016      	beq.n	8004806 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047da:	3324      	adds	r3, #36	; 0x24
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 fef7 	bl	80055d0 <xTaskRemoveFromEventList>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00e      	beq.n	8004806 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00b      	beq.n	8004806 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	e007      	b.n	8004806 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80047f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80047fa:	3301      	adds	r3, #1
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	b25a      	sxtb	r2, r3
 8004800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004806:	2301      	movs	r3, #1
 8004808:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800480a:	e001      	b.n	8004810 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800480c:	2300      	movs	r3, #0
 800480e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004812:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800481a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800481c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800481e:	4618      	mov	r0, r3
 8004820:	3740      	adds	r7, #64	; 0x40
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
	...

08004828 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b08c      	sub	sp, #48	; 0x30
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004834:	2300      	movs	r3, #0
 8004836:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10a      	bne.n	8004858 <xQueueReceive+0x30>
	__asm volatile
 8004842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	623b      	str	r3, [r7, #32]
}
 8004854:	bf00      	nop
 8004856:	e7fe      	b.n	8004856 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d103      	bne.n	8004866 <xQueueReceive+0x3e>
 800485e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <xQueueReceive+0x42>
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <xQueueReceive+0x44>
 800486a:	2300      	movs	r3, #0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10a      	bne.n	8004886 <xQueueReceive+0x5e>
	__asm volatile
 8004870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004874:	f383 8811 	msr	BASEPRI, r3
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	61fb      	str	r3, [r7, #28]
}
 8004882:	bf00      	nop
 8004884:	e7fe      	b.n	8004884 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004886:	f001 f865 	bl	8005954 <xTaskGetSchedulerState>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d102      	bne.n	8004896 <xQueueReceive+0x6e>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <xQueueReceive+0x72>
 8004896:	2301      	movs	r3, #1
 8004898:	e000      	b.n	800489c <xQueueReceive+0x74>
 800489a:	2300      	movs	r3, #0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10a      	bne.n	80048b6 <xQueueReceive+0x8e>
	__asm volatile
 80048a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	61bb      	str	r3, [r7, #24]
}
 80048b2:	bf00      	nop
 80048b4:	e7fe      	b.n	80048b4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048b6:	f001 fda5 	bl	8006404 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048be:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d01f      	beq.n	8004906 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80048c6:	68b9      	ldr	r1, [r7, #8]
 80048c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048ca:	f000 f8f7 	bl	8004abc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	1e5a      	subs	r2, r3, #1
 80048d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00f      	beq.n	80048fe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e0:	3310      	adds	r3, #16
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fe74 	bl	80055d0 <xTaskRemoveFromEventList>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d007      	beq.n	80048fe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80048ee:	4b3d      	ldr	r3, [pc, #244]	; (80049e4 <xQueueReceive+0x1bc>)
 80048f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80048fe:	f001 fdb1 	bl	8006464 <vPortExitCritical>
				return pdPASS;
 8004902:	2301      	movs	r3, #1
 8004904:	e069      	b.n	80049da <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d103      	bne.n	8004914 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800490c:	f001 fdaa 	bl	8006464 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004910:	2300      	movs	r3, #0
 8004912:	e062      	b.n	80049da <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800491a:	f107 0310 	add.w	r3, r7, #16
 800491e:	4618      	mov	r0, r3
 8004920:	f000 feba 	bl	8005698 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004924:	2301      	movs	r3, #1
 8004926:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004928:	f001 fd9c 	bl	8006464 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800492c:	f000 fc26 	bl	800517c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004930:	f001 fd68 	bl	8006404 <vPortEnterCritical>
 8004934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004936:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800493a:	b25b      	sxtb	r3, r3
 800493c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004940:	d103      	bne.n	800494a <xQueueReceive+0x122>
 8004942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800494a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004950:	b25b      	sxtb	r3, r3
 8004952:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004956:	d103      	bne.n	8004960 <xQueueReceive+0x138>
 8004958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004960:	f001 fd80 	bl	8006464 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004964:	1d3a      	adds	r2, r7, #4
 8004966:	f107 0310 	add.w	r3, r7, #16
 800496a:	4611      	mov	r1, r2
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fea9 	bl	80056c4 <xTaskCheckForTimeOut>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d123      	bne.n	80049c0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800497a:	f000 f917 	bl	8004bac <prvIsQueueEmpty>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d017      	beq.n	80049b4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004986:	3324      	adds	r3, #36	; 0x24
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	4611      	mov	r1, r2
 800498c:	4618      	mov	r0, r3
 800498e:	f000 fdcf 	bl	8005530 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004992:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004994:	f000 f8b8 	bl	8004b08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004998:	f000 fbfe 	bl	8005198 <xTaskResumeAll>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d189      	bne.n	80048b6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80049a2:	4b10      	ldr	r3, [pc, #64]	; (80049e4 <xQueueReceive+0x1bc>)
 80049a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	e780      	b.n	80048b6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80049b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049b6:	f000 f8a7 	bl	8004b08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049ba:	f000 fbed 	bl	8005198 <xTaskResumeAll>
 80049be:	e77a      	b.n	80048b6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80049c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049c2:	f000 f8a1 	bl	8004b08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049c6:	f000 fbe7 	bl	8005198 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049cc:	f000 f8ee 	bl	8004bac <prvIsQueueEmpty>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f43f af6f 	beq.w	80048b6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80049d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3730      	adds	r7, #48	; 0x30
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	e000ed04 	.word	0xe000ed04

080049e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80049f4:	2300      	movs	r3, #0
 80049f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10d      	bne.n	8004a22 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d14d      	bne.n	8004aaa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 ffbc 	bl	8005990 <xTaskPriorityDisinherit>
 8004a18:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	609a      	str	r2, [r3, #8]
 8004a20:	e043      	b.n	8004aaa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d119      	bne.n	8004a5c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6858      	ldr	r0, [r3, #4]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	461a      	mov	r2, r3
 8004a32:	68b9      	ldr	r1, [r7, #8]
 8004a34:	f002 f818 	bl	8006a68 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a40:	441a      	add	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d32b      	bcc.n	8004aaa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	605a      	str	r2, [r3, #4]
 8004a5a:	e026      	b.n	8004aaa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	68d8      	ldr	r0, [r3, #12]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	461a      	mov	r2, r3
 8004a66:	68b9      	ldr	r1, [r7, #8]
 8004a68:	f001 fffe 	bl	8006a68 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	68da      	ldr	r2, [r3, #12]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a74:	425b      	negs	r3, r3
 8004a76:	441a      	add	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	68da      	ldr	r2, [r3, #12]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d207      	bcs.n	8004a98 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a90:	425b      	negs	r3, r3
 8004a92:	441a      	add	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d105      	bne.n	8004aaa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d002      	beq.n	8004aaa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1c5a      	adds	r2, r3, #1
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004ab2:	697b      	ldr	r3, [r7, #20]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3718      	adds	r7, #24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d018      	beq.n	8004b00 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	441a      	add	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d303      	bcc.n	8004af0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68d9      	ldr	r1, [r3, #12]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af8:	461a      	mov	r2, r3
 8004afa:	6838      	ldr	r0, [r7, #0]
 8004afc:	f001 ffb4 	bl	8006a68 <memcpy>
	}
}
 8004b00:	bf00      	nop
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b10:	f001 fc78 	bl	8006404 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b1a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b1c:	e011      	b.n	8004b42 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d012      	beq.n	8004b4c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	3324      	adds	r3, #36	; 0x24
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 fd50 	bl	80055d0 <xTaskRemoveFromEventList>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b36:	f000 fe27 	bl	8005788 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b3a:	7bfb      	ldrb	r3, [r7, #15]
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	dce9      	bgt.n	8004b1e <prvUnlockQueue+0x16>
 8004b4a:	e000      	b.n	8004b4e <prvUnlockQueue+0x46>
					break;
 8004b4c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	22ff      	movs	r2, #255	; 0xff
 8004b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004b56:	f001 fc85 	bl	8006464 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b5a:	f001 fc53 	bl	8006404 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b64:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b66:	e011      	b.n	8004b8c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d012      	beq.n	8004b96 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3310      	adds	r3, #16
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 fd2b 	bl	80055d0 <xTaskRemoveFromEventList>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b80:	f000 fe02 	bl	8005788 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b84:	7bbb      	ldrb	r3, [r7, #14]
 8004b86:	3b01      	subs	r3, #1
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	dce9      	bgt.n	8004b68 <prvUnlockQueue+0x60>
 8004b94:	e000      	b.n	8004b98 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b96:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	22ff      	movs	r2, #255	; 0xff
 8004b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004ba0:	f001 fc60 	bl	8006464 <vPortExitCritical>
}
 8004ba4:	bf00      	nop
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bb4:	f001 fc26 	bl	8006404 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d102      	bne.n	8004bc6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	e001      	b.n	8004bca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bca:	f001 fc4b 	bl	8006464 <vPortExitCritical>

	return xReturn;
 8004bce:	68fb      	ldr	r3, [r7, #12]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004be0:	f001 fc10 	bl	8006404 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d102      	bne.n	8004bf6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	e001      	b.n	8004bfa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bfa:	f001 fc33 	bl	8006464 <vPortExitCritical>

	return xReturn;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	e014      	b.n	8004c42 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c18:	4a0f      	ldr	r2, [pc, #60]	; (8004c58 <vQueueAddToRegistry+0x50>)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10b      	bne.n	8004c3c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c24:	490c      	ldr	r1, [pc, #48]	; (8004c58 <vQueueAddToRegistry+0x50>)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004c2e:	4a0a      	ldr	r2, [pc, #40]	; (8004c58 <vQueueAddToRegistry+0x50>)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	4413      	add	r3, r2
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004c3a:	e006      	b.n	8004c4a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2b07      	cmp	r3, #7
 8004c46:	d9e7      	bls.n	8004c18 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004c48:	bf00      	nop
 8004c4a:	bf00      	nop
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	200008e4 	.word	0x200008e4

08004c5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004c6c:	f001 fbca 	bl	8006404 <vPortEnterCritical>
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c76:	b25b      	sxtb	r3, r3
 8004c78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c7c:	d103      	bne.n	8004c86 <vQueueWaitForMessageRestricted+0x2a>
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c8c:	b25b      	sxtb	r3, r3
 8004c8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c92:	d103      	bne.n	8004c9c <vQueueWaitForMessageRestricted+0x40>
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c9c:	f001 fbe2 	bl	8006464 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d106      	bne.n	8004cb6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	3324      	adds	r3, #36	; 0x24
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	68b9      	ldr	r1, [r7, #8]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 fc61 	bl	8005578 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004cb6:	6978      	ldr	r0, [r7, #20]
 8004cb8:	f7ff ff26 	bl	8004b08 <prvUnlockQueue>
	}
 8004cbc:	bf00      	nop
 8004cbe:	3718      	adds	r7, #24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b08e      	sub	sp, #56	; 0x38
 8004cc8:	af04      	add	r7, sp, #16
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
 8004cd0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10a      	bne.n	8004cee <xTaskCreateStatic+0x2a>
	__asm volatile
 8004cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cdc:	f383 8811 	msr	BASEPRI, r3
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	623b      	str	r3, [r7, #32]
}
 8004cea:	bf00      	nop
 8004cec:	e7fe      	b.n	8004cec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10a      	bne.n	8004d0a <xTaskCreateStatic+0x46>
	__asm volatile
 8004cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf8:	f383 8811 	msr	BASEPRI, r3
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f3bf 8f4f 	dsb	sy
 8004d04:	61fb      	str	r3, [r7, #28]
}
 8004d06:	bf00      	nop
 8004d08:	e7fe      	b.n	8004d08 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d0a:	23bc      	movs	r3, #188	; 0xbc
 8004d0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	2bbc      	cmp	r3, #188	; 0xbc
 8004d12:	d00a      	beq.n	8004d2a <xTaskCreateStatic+0x66>
	__asm volatile
 8004d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	61bb      	str	r3, [r7, #24]
}
 8004d26:	bf00      	nop
 8004d28:	e7fe      	b.n	8004d28 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004d2a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d01e      	beq.n	8004d70 <xTaskCreateStatic+0xac>
 8004d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01b      	beq.n	8004d70 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d40:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	2202      	movs	r2, #2
 8004d46:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	9303      	str	r3, [sp, #12]
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	9302      	str	r3, [sp, #8]
 8004d52:	f107 0314 	add.w	r3, r7, #20
 8004d56:	9301      	str	r3, [sp, #4]
 8004d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	68b9      	ldr	r1, [r7, #8]
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f000 f850 	bl	8004e08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d6a:	f000 f8f3 	bl	8004f54 <prvAddNewTaskToReadyList>
 8004d6e:	e001      	b.n	8004d74 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004d70:	2300      	movs	r3, #0
 8004d72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d74:	697b      	ldr	r3, [r7, #20]
	}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3728      	adds	r7, #40	; 0x28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b08c      	sub	sp, #48	; 0x30
 8004d82:	af04      	add	r7, sp, #16
 8004d84:	60f8      	str	r0, [r7, #12]
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	603b      	str	r3, [r7, #0]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004d8e:	88fb      	ldrh	r3, [r7, #6]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4618      	mov	r0, r3
 8004d94:	f001 fc58 	bl	8006648 <pvPortMalloc>
 8004d98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00e      	beq.n	8004dbe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004da0:	20bc      	movs	r0, #188	; 0xbc
 8004da2:	f001 fc51 	bl	8006648 <pvPortMalloc>
 8004da6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	631a      	str	r2, [r3, #48]	; 0x30
 8004db4:	e005      	b.n	8004dc2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004db6:	6978      	ldr	r0, [r7, #20]
 8004db8:	f001 fd12 	bl	80067e0 <vPortFree>
 8004dbc:	e001      	b.n	8004dc2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d017      	beq.n	8004df8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004dd0:	88fa      	ldrh	r2, [r7, #6]
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	9303      	str	r3, [sp, #12]
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	9302      	str	r3, [sp, #8]
 8004dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ddc:	9301      	str	r3, [sp, #4]
 8004dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	68b9      	ldr	r1, [r7, #8]
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 f80e 	bl	8004e08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004dec:	69f8      	ldr	r0, [r7, #28]
 8004dee:	f000 f8b1 	bl	8004f54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004df2:	2301      	movs	r3, #1
 8004df4:	61bb      	str	r3, [r7, #24]
 8004df6:	e002      	b.n	8004dfe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dfc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004dfe:	69bb      	ldr	r3, [r7, #24]
	}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3720      	adds	r7, #32
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b088      	sub	sp, #32
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e18:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	461a      	mov	r2, r3
 8004e20:	21a5      	movs	r1, #165	; 0xa5
 8004e22:	f001 fe2f 	bl	8006a84 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e30:	3b01      	subs	r3, #1
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	f023 0307 	bic.w	r3, r3, #7
 8004e3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	617b      	str	r3, [r7, #20]
}
 8004e5c:	bf00      	nop
 8004e5e:	e7fe      	b.n	8004e5e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d01f      	beq.n	8004ea6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e66:	2300      	movs	r3, #0
 8004e68:	61fb      	str	r3, [r7, #28]
 8004e6a:	e012      	b.n	8004e92 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	4413      	add	r3, r2
 8004e72:	7819      	ldrb	r1, [r3, #0]
 8004e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	4413      	add	r3, r2
 8004e7a:	3334      	adds	r3, #52	; 0x34
 8004e7c:	460a      	mov	r2, r1
 8004e7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	4413      	add	r3, r2
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d006      	beq.n	8004e9a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	61fb      	str	r3, [r7, #28]
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	2b0f      	cmp	r3, #15
 8004e96:	d9e9      	bls.n	8004e6c <prvInitialiseNewTask+0x64>
 8004e98:	e000      	b.n	8004e9c <prvInitialiseNewTask+0x94>
			{
				break;
 8004e9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ea4:	e003      	b.n	8004eae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb0:	2b37      	cmp	r3, #55	; 0x37
 8004eb2:	d901      	bls.n	8004eb8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004eb4:	2337      	movs	r3, #55	; 0x37
 8004eb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ebc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ec2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ecc:	3304      	adds	r3, #4
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7ff f978 	bl	80041c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed6:	3318      	adds	r3, #24
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff f973 	bl	80041c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ee2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ef2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f06:	3354      	adds	r3, #84	; 0x54
 8004f08:	2260      	movs	r2, #96	; 0x60
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f001 fdb9 	bl	8006a84 <memset>
 8004f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f14:	4a0c      	ldr	r2, [pc, #48]	; (8004f48 <prvInitialiseNewTask+0x140>)
 8004f16:	659a      	str	r2, [r3, #88]	; 0x58
 8004f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1a:	4a0c      	ldr	r2, [pc, #48]	; (8004f4c <prvInitialiseNewTask+0x144>)
 8004f1c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f20:	4a0b      	ldr	r2, [pc, #44]	; (8004f50 <prvInitialiseNewTask+0x148>)
 8004f22:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	68f9      	ldr	r1, [r7, #12]
 8004f28:	69b8      	ldr	r0, [r7, #24]
 8004f2a:	f001 f941 	bl	80061b0 <pxPortInitialiseStack>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f32:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f3e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f40:	bf00      	nop
 8004f42:	3720      	adds	r7, #32
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	08006ce8 	.word	0x08006ce8
 8004f4c:	08006d08 	.word	0x08006d08
 8004f50:	08006cc8 	.word	0x08006cc8

08004f54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f5c:	f001 fa52 	bl	8006404 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f60:	4b2d      	ldr	r3, [pc, #180]	; (8005018 <prvAddNewTaskToReadyList+0xc4>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3301      	adds	r3, #1
 8004f66:	4a2c      	ldr	r2, [pc, #176]	; (8005018 <prvAddNewTaskToReadyList+0xc4>)
 8004f68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f6a:	4b2c      	ldr	r3, [pc, #176]	; (800501c <prvAddNewTaskToReadyList+0xc8>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d109      	bne.n	8004f86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f72:	4a2a      	ldr	r2, [pc, #168]	; (800501c <prvAddNewTaskToReadyList+0xc8>)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f78:	4b27      	ldr	r3, [pc, #156]	; (8005018 <prvAddNewTaskToReadyList+0xc4>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d110      	bne.n	8004fa2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f80:	f000 fc26 	bl	80057d0 <prvInitialiseTaskLists>
 8004f84:	e00d      	b.n	8004fa2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f86:	4b26      	ldr	r3, [pc, #152]	; (8005020 <prvAddNewTaskToReadyList+0xcc>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d109      	bne.n	8004fa2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f8e:	4b23      	ldr	r3, [pc, #140]	; (800501c <prvAddNewTaskToReadyList+0xc8>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d802      	bhi.n	8004fa2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f9c:	4a1f      	ldr	r2, [pc, #124]	; (800501c <prvAddNewTaskToReadyList+0xc8>)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004fa2:	4b20      	ldr	r3, [pc, #128]	; (8005024 <prvAddNewTaskToReadyList+0xd0>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	4a1e      	ldr	r2, [pc, #120]	; (8005024 <prvAddNewTaskToReadyList+0xd0>)
 8004faa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004fac:	4b1d      	ldr	r3, [pc, #116]	; (8005024 <prvAddNewTaskToReadyList+0xd0>)
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb8:	4b1b      	ldr	r3, [pc, #108]	; (8005028 <prvAddNewTaskToReadyList+0xd4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d903      	bls.n	8004fc8 <prvAddNewTaskToReadyList+0x74>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc4:	4a18      	ldr	r2, [pc, #96]	; (8005028 <prvAddNewTaskToReadyList+0xd4>)
 8004fc6:	6013      	str	r3, [r2, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fcc:	4613      	mov	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4a15      	ldr	r2, [pc, #84]	; (800502c <prvAddNewTaskToReadyList+0xd8>)
 8004fd6:	441a      	add	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	3304      	adds	r3, #4
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4610      	mov	r0, r2
 8004fe0:	f7ff f8fd 	bl	80041de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004fe4:	f001 fa3e 	bl	8006464 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004fe8:	4b0d      	ldr	r3, [pc, #52]	; (8005020 <prvAddNewTaskToReadyList+0xcc>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00e      	beq.n	800500e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ff0:	4b0a      	ldr	r3, [pc, #40]	; (800501c <prvAddNewTaskToReadyList+0xc8>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d207      	bcs.n	800500e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ffe:	4b0c      	ldr	r3, [pc, #48]	; (8005030 <prvAddNewTaskToReadyList+0xdc>)
 8005000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800500e:	bf00      	nop
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	20000df8 	.word	0x20000df8
 800501c:	20000924 	.word	0x20000924
 8005020:	20000e04 	.word	0x20000e04
 8005024:	20000e14 	.word	0x20000e14
 8005028:	20000e00 	.word	0x20000e00
 800502c:	20000928 	.word	0x20000928
 8005030:	e000ed04 	.word	0xe000ed04

08005034 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800503c:	2300      	movs	r3, #0
 800503e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d017      	beq.n	8005076 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005046:	4b13      	ldr	r3, [pc, #76]	; (8005094 <vTaskDelay+0x60>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <vTaskDelay+0x30>
	__asm volatile
 800504e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	60bb      	str	r3, [r7, #8]
}
 8005060:	bf00      	nop
 8005062:	e7fe      	b.n	8005062 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005064:	f000 f88a 	bl	800517c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005068:	2100      	movs	r1, #0
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fcfe 	bl	8005a6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005070:	f000 f892 	bl	8005198 <xTaskResumeAll>
 8005074:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d107      	bne.n	800508c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800507c:	4b06      	ldr	r3, [pc, #24]	; (8005098 <vTaskDelay+0x64>)
 800507e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800508c:	bf00      	nop
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	20000e20 	.word	0x20000e20
 8005098:	e000ed04 	.word	0xe000ed04

0800509c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b08a      	sub	sp, #40	; 0x28
 80050a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80050a2:	2300      	movs	r3, #0
 80050a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80050aa:	463a      	mov	r2, r7
 80050ac:	1d39      	adds	r1, r7, #4
 80050ae:	f107 0308 	add.w	r3, r7, #8
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7ff f832 	bl	800411c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80050b8:	6839      	ldr	r1, [r7, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	9202      	str	r2, [sp, #8]
 80050c0:	9301      	str	r3, [sp, #4]
 80050c2:	2300      	movs	r3, #0
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	2300      	movs	r3, #0
 80050c8:	460a      	mov	r2, r1
 80050ca:	4924      	ldr	r1, [pc, #144]	; (800515c <vTaskStartScheduler+0xc0>)
 80050cc:	4824      	ldr	r0, [pc, #144]	; (8005160 <vTaskStartScheduler+0xc4>)
 80050ce:	f7ff fdf9 	bl	8004cc4 <xTaskCreateStatic>
 80050d2:	4603      	mov	r3, r0
 80050d4:	4a23      	ldr	r2, [pc, #140]	; (8005164 <vTaskStartScheduler+0xc8>)
 80050d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80050d8:	4b22      	ldr	r3, [pc, #136]	; (8005164 <vTaskStartScheduler+0xc8>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d002      	beq.n	80050e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80050e0:	2301      	movs	r3, #1
 80050e2:	617b      	str	r3, [r7, #20]
 80050e4:	e001      	b.n	80050ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80050e6:	2300      	movs	r3, #0
 80050e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d102      	bne.n	80050f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80050f0:	f000 fd10 	bl	8005b14 <xTimerCreateTimerTask>
 80050f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d11b      	bne.n	8005134 <vTaskStartScheduler+0x98>
	__asm volatile
 80050fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	613b      	str	r3, [r7, #16]
}
 800510e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005110:	4b15      	ldr	r3, [pc, #84]	; (8005168 <vTaskStartScheduler+0xcc>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3354      	adds	r3, #84	; 0x54
 8005116:	4a15      	ldr	r2, [pc, #84]	; (800516c <vTaskStartScheduler+0xd0>)
 8005118:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800511a:	4b15      	ldr	r3, [pc, #84]	; (8005170 <vTaskStartScheduler+0xd4>)
 800511c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005120:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005122:	4b14      	ldr	r3, [pc, #80]	; (8005174 <vTaskStartScheduler+0xd8>)
 8005124:	2201      	movs	r2, #1
 8005126:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005128:	4b13      	ldr	r3, [pc, #76]	; (8005178 <vTaskStartScheduler+0xdc>)
 800512a:	2200      	movs	r2, #0
 800512c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800512e:	f001 f8c7 	bl	80062c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005132:	e00e      	b.n	8005152 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800513a:	d10a      	bne.n	8005152 <vTaskStartScheduler+0xb6>
	__asm volatile
 800513c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005140:	f383 8811 	msr	BASEPRI, r3
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	60fb      	str	r3, [r7, #12]
}
 800514e:	bf00      	nop
 8005150:	e7fe      	b.n	8005150 <vTaskStartScheduler+0xb4>
}
 8005152:	bf00      	nop
 8005154:	3718      	adds	r7, #24
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	08006c44 	.word	0x08006c44
 8005160:	080057a1 	.word	0x080057a1
 8005164:	20000e1c 	.word	0x20000e1c
 8005168:	20000924 	.word	0x20000924
 800516c:	20000010 	.word	0x20000010
 8005170:	20000e18 	.word	0x20000e18
 8005174:	20000e04 	.word	0x20000e04
 8005178:	20000dfc 	.word	0x20000dfc

0800517c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005180:	4b04      	ldr	r3, [pc, #16]	; (8005194 <vTaskSuspendAll+0x18>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3301      	adds	r3, #1
 8005186:	4a03      	ldr	r2, [pc, #12]	; (8005194 <vTaskSuspendAll+0x18>)
 8005188:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800518a:	bf00      	nop
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr
 8005194:	20000e20 	.word	0x20000e20

08005198 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800519e:	2300      	movs	r3, #0
 80051a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80051a2:	2300      	movs	r3, #0
 80051a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80051a6:	4b42      	ldr	r3, [pc, #264]	; (80052b0 <xTaskResumeAll+0x118>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10a      	bne.n	80051c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	603b      	str	r3, [r7, #0]
}
 80051c0:	bf00      	nop
 80051c2:	e7fe      	b.n	80051c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80051c4:	f001 f91e 	bl	8006404 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80051c8:	4b39      	ldr	r3, [pc, #228]	; (80052b0 <xTaskResumeAll+0x118>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	3b01      	subs	r3, #1
 80051ce:	4a38      	ldr	r2, [pc, #224]	; (80052b0 <xTaskResumeAll+0x118>)
 80051d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051d2:	4b37      	ldr	r3, [pc, #220]	; (80052b0 <xTaskResumeAll+0x118>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d162      	bne.n	80052a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80051da:	4b36      	ldr	r3, [pc, #216]	; (80052b4 <xTaskResumeAll+0x11c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d05e      	beq.n	80052a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051e2:	e02f      	b.n	8005244 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051e4:	4b34      	ldr	r3, [pc, #208]	; (80052b8 <xTaskResumeAll+0x120>)
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	3318      	adds	r3, #24
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7ff f851 	bl	8004298 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	3304      	adds	r3, #4
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7ff f84c 	bl	8004298 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005204:	4b2d      	ldr	r3, [pc, #180]	; (80052bc <xTaskResumeAll+0x124>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	429a      	cmp	r2, r3
 800520a:	d903      	bls.n	8005214 <xTaskResumeAll+0x7c>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005210:	4a2a      	ldr	r2, [pc, #168]	; (80052bc <xTaskResumeAll+0x124>)
 8005212:	6013      	str	r3, [r2, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005218:	4613      	mov	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4a27      	ldr	r2, [pc, #156]	; (80052c0 <xTaskResumeAll+0x128>)
 8005222:	441a      	add	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	3304      	adds	r3, #4
 8005228:	4619      	mov	r1, r3
 800522a:	4610      	mov	r0, r2
 800522c:	f7fe ffd7 	bl	80041de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005234:	4b23      	ldr	r3, [pc, #140]	; (80052c4 <xTaskResumeAll+0x12c>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523a:	429a      	cmp	r2, r3
 800523c:	d302      	bcc.n	8005244 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800523e:	4b22      	ldr	r3, [pc, #136]	; (80052c8 <xTaskResumeAll+0x130>)
 8005240:	2201      	movs	r2, #1
 8005242:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005244:	4b1c      	ldr	r3, [pc, #112]	; (80052b8 <xTaskResumeAll+0x120>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1cb      	bne.n	80051e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005252:	f000 fb5f 	bl	8005914 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005256:	4b1d      	ldr	r3, [pc, #116]	; (80052cc <xTaskResumeAll+0x134>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d010      	beq.n	8005284 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005262:	f000 f847 	bl	80052f4 <xTaskIncrementTick>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d002      	beq.n	8005272 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800526c:	4b16      	ldr	r3, [pc, #88]	; (80052c8 <xTaskResumeAll+0x130>)
 800526e:	2201      	movs	r2, #1
 8005270:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	3b01      	subs	r3, #1
 8005276:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1f1      	bne.n	8005262 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800527e:	4b13      	ldr	r3, [pc, #76]	; (80052cc <xTaskResumeAll+0x134>)
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005284:	4b10      	ldr	r3, [pc, #64]	; (80052c8 <xTaskResumeAll+0x130>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d009      	beq.n	80052a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800528c:	2301      	movs	r3, #1
 800528e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005290:	4b0f      	ldr	r3, [pc, #60]	; (80052d0 <xTaskResumeAll+0x138>)
 8005292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052a0:	f001 f8e0 	bl	8006464 <vPortExitCritical>

	return xAlreadyYielded;
 80052a4:	68bb      	ldr	r3, [r7, #8]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	20000e20 	.word	0x20000e20
 80052b4:	20000df8 	.word	0x20000df8
 80052b8:	20000db8 	.word	0x20000db8
 80052bc:	20000e00 	.word	0x20000e00
 80052c0:	20000928 	.word	0x20000928
 80052c4:	20000924 	.word	0x20000924
 80052c8:	20000e0c 	.word	0x20000e0c
 80052cc:	20000e08 	.word	0x20000e08
 80052d0:	e000ed04 	.word	0xe000ed04

080052d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80052da:	4b05      	ldr	r3, [pc, #20]	; (80052f0 <xTaskGetTickCount+0x1c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80052e0:	687b      	ldr	r3, [r7, #4]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	20000dfc 	.word	0x20000dfc

080052f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80052fa:	2300      	movs	r3, #0
 80052fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052fe:	4b4f      	ldr	r3, [pc, #316]	; (800543c <xTaskIncrementTick+0x148>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	f040 808f 	bne.w	8005426 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005308:	4b4d      	ldr	r3, [pc, #308]	; (8005440 <xTaskIncrementTick+0x14c>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3301      	adds	r3, #1
 800530e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005310:	4a4b      	ldr	r2, [pc, #300]	; (8005440 <xTaskIncrementTick+0x14c>)
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d120      	bne.n	800535e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800531c:	4b49      	ldr	r3, [pc, #292]	; (8005444 <xTaskIncrementTick+0x150>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <xTaskIncrementTick+0x48>
	__asm volatile
 8005326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	603b      	str	r3, [r7, #0]
}
 8005338:	bf00      	nop
 800533a:	e7fe      	b.n	800533a <xTaskIncrementTick+0x46>
 800533c:	4b41      	ldr	r3, [pc, #260]	; (8005444 <xTaskIncrementTick+0x150>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	4b41      	ldr	r3, [pc, #260]	; (8005448 <xTaskIncrementTick+0x154>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a3f      	ldr	r2, [pc, #252]	; (8005444 <xTaskIncrementTick+0x150>)
 8005348:	6013      	str	r3, [r2, #0]
 800534a:	4a3f      	ldr	r2, [pc, #252]	; (8005448 <xTaskIncrementTick+0x154>)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6013      	str	r3, [r2, #0]
 8005350:	4b3e      	ldr	r3, [pc, #248]	; (800544c <xTaskIncrementTick+0x158>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	3301      	adds	r3, #1
 8005356:	4a3d      	ldr	r2, [pc, #244]	; (800544c <xTaskIncrementTick+0x158>)
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	f000 fadb 	bl	8005914 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800535e:	4b3c      	ldr	r3, [pc, #240]	; (8005450 <xTaskIncrementTick+0x15c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	429a      	cmp	r2, r3
 8005366:	d349      	bcc.n	80053fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005368:	4b36      	ldr	r3, [pc, #216]	; (8005444 <xTaskIncrementTick+0x150>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d104      	bne.n	800537c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005372:	4b37      	ldr	r3, [pc, #220]	; (8005450 <xTaskIncrementTick+0x15c>)
 8005374:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005378:	601a      	str	r2, [r3, #0]
					break;
 800537a:	e03f      	b.n	80053fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800537c:	4b31      	ldr	r3, [pc, #196]	; (8005444 <xTaskIncrementTick+0x150>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	429a      	cmp	r2, r3
 8005392:	d203      	bcs.n	800539c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005394:	4a2e      	ldr	r2, [pc, #184]	; (8005450 <xTaskIncrementTick+0x15c>)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800539a:	e02f      	b.n	80053fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	3304      	adds	r3, #4
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7fe ff79 	bl	8004298 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d004      	beq.n	80053b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	3318      	adds	r3, #24
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fe ff70 	bl	8004298 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053bc:	4b25      	ldr	r3, [pc, #148]	; (8005454 <xTaskIncrementTick+0x160>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d903      	bls.n	80053cc <xTaskIncrementTick+0xd8>
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c8:	4a22      	ldr	r2, [pc, #136]	; (8005454 <xTaskIncrementTick+0x160>)
 80053ca:	6013      	str	r3, [r2, #0]
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d0:	4613      	mov	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4a1f      	ldr	r2, [pc, #124]	; (8005458 <xTaskIncrementTick+0x164>)
 80053da:	441a      	add	r2, r3
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	3304      	adds	r3, #4
 80053e0:	4619      	mov	r1, r3
 80053e2:	4610      	mov	r0, r2
 80053e4:	f7fe fefb 	bl	80041de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ec:	4b1b      	ldr	r3, [pc, #108]	; (800545c <xTaskIncrementTick+0x168>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d3b8      	bcc.n	8005368 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80053f6:	2301      	movs	r3, #1
 80053f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053fa:	e7b5      	b.n	8005368 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80053fc:	4b17      	ldr	r3, [pc, #92]	; (800545c <xTaskIncrementTick+0x168>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005402:	4915      	ldr	r1, [pc, #84]	; (8005458 <xTaskIncrementTick+0x164>)
 8005404:	4613      	mov	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	440b      	add	r3, r1
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d901      	bls.n	8005418 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005414:	2301      	movs	r3, #1
 8005416:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005418:	4b11      	ldr	r3, [pc, #68]	; (8005460 <xTaskIncrementTick+0x16c>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d007      	beq.n	8005430 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005420:	2301      	movs	r3, #1
 8005422:	617b      	str	r3, [r7, #20]
 8005424:	e004      	b.n	8005430 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005426:	4b0f      	ldr	r3, [pc, #60]	; (8005464 <xTaskIncrementTick+0x170>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3301      	adds	r3, #1
 800542c:	4a0d      	ldr	r2, [pc, #52]	; (8005464 <xTaskIncrementTick+0x170>)
 800542e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005430:	697b      	ldr	r3, [r7, #20]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3718      	adds	r7, #24
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	20000e20 	.word	0x20000e20
 8005440:	20000dfc 	.word	0x20000dfc
 8005444:	20000db0 	.word	0x20000db0
 8005448:	20000db4 	.word	0x20000db4
 800544c:	20000e10 	.word	0x20000e10
 8005450:	20000e18 	.word	0x20000e18
 8005454:	20000e00 	.word	0x20000e00
 8005458:	20000928 	.word	0x20000928
 800545c:	20000924 	.word	0x20000924
 8005460:	20000e0c 	.word	0x20000e0c
 8005464:	20000e08 	.word	0x20000e08

08005468 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800546e:	4b2a      	ldr	r3, [pc, #168]	; (8005518 <vTaskSwitchContext+0xb0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005476:	4b29      	ldr	r3, [pc, #164]	; (800551c <vTaskSwitchContext+0xb4>)
 8005478:	2201      	movs	r2, #1
 800547a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800547c:	e046      	b.n	800550c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800547e:	4b27      	ldr	r3, [pc, #156]	; (800551c <vTaskSwitchContext+0xb4>)
 8005480:	2200      	movs	r2, #0
 8005482:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005484:	4b26      	ldr	r3, [pc, #152]	; (8005520 <vTaskSwitchContext+0xb8>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	60fb      	str	r3, [r7, #12]
 800548a:	e010      	b.n	80054ae <vTaskSwitchContext+0x46>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10a      	bne.n	80054a8 <vTaskSwitchContext+0x40>
	__asm volatile
 8005492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	607b      	str	r3, [r7, #4]
}
 80054a4:	bf00      	nop
 80054a6:	e7fe      	b.n	80054a6 <vTaskSwitchContext+0x3e>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	491d      	ldr	r1, [pc, #116]	; (8005524 <vTaskSwitchContext+0xbc>)
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	4613      	mov	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	440b      	add	r3, r1
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d0e4      	beq.n	800548c <vTaskSwitchContext+0x24>
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	4613      	mov	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4a15      	ldr	r2, [pc, #84]	; (8005524 <vTaskSwitchContext+0xbc>)
 80054ce:	4413      	add	r3, r2
 80054d0:	60bb      	str	r3, [r7, #8]
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	605a      	str	r2, [r3, #4]
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	3308      	adds	r3, #8
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d104      	bne.n	80054f2 <vTaskSwitchContext+0x8a>
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	605a      	str	r2, [r3, #4]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	4a0b      	ldr	r2, [pc, #44]	; (8005528 <vTaskSwitchContext+0xc0>)
 80054fa:	6013      	str	r3, [r2, #0]
 80054fc:	4a08      	ldr	r2, [pc, #32]	; (8005520 <vTaskSwitchContext+0xb8>)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005502:	4b09      	ldr	r3, [pc, #36]	; (8005528 <vTaskSwitchContext+0xc0>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	3354      	adds	r3, #84	; 0x54
 8005508:	4a08      	ldr	r2, [pc, #32]	; (800552c <vTaskSwitchContext+0xc4>)
 800550a:	6013      	str	r3, [r2, #0]
}
 800550c:	bf00      	nop
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	20000e20 	.word	0x20000e20
 800551c:	20000e0c 	.word	0x20000e0c
 8005520:	20000e00 	.word	0x20000e00
 8005524:	20000928 	.word	0x20000928
 8005528:	20000924 	.word	0x20000924
 800552c:	20000010 	.word	0x20000010

08005530 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10a      	bne.n	8005556 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	60fb      	str	r3, [r7, #12]
}
 8005552:	bf00      	nop
 8005554:	e7fe      	b.n	8005554 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005556:	4b07      	ldr	r3, [pc, #28]	; (8005574 <vTaskPlaceOnEventList+0x44>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3318      	adds	r3, #24
 800555c:	4619      	mov	r1, r3
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7fe fe61 	bl	8004226 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005564:	2101      	movs	r1, #1
 8005566:	6838      	ldr	r0, [r7, #0]
 8005568:	f000 fa80 	bl	8005a6c <prvAddCurrentTaskToDelayedList>
}
 800556c:	bf00      	nop
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	20000924 	.word	0x20000924

08005578 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10a      	bne.n	80055a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800558a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558e:	f383 8811 	msr	BASEPRI, r3
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	617b      	str	r3, [r7, #20]
}
 800559c:	bf00      	nop
 800559e:	e7fe      	b.n	800559e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055a0:	4b0a      	ldr	r3, [pc, #40]	; (80055cc <vTaskPlaceOnEventListRestricted+0x54>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3318      	adds	r3, #24
 80055a6:	4619      	mov	r1, r3
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f7fe fe18 	bl	80041de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d002      	beq.n	80055ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80055b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	68b8      	ldr	r0, [r7, #8]
 80055be:	f000 fa55 	bl	8005a6c <prvAddCurrentTaskToDelayedList>
	}
 80055c2:	bf00      	nop
 80055c4:	3718      	adds	r7, #24
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	20000924 	.word	0x20000924

080055d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10a      	bne.n	80055fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80055e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	60fb      	str	r3, [r7, #12]
}
 80055f8:	bf00      	nop
 80055fa:	e7fe      	b.n	80055fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	3318      	adds	r3, #24
 8005600:	4618      	mov	r0, r3
 8005602:	f7fe fe49 	bl	8004298 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005606:	4b1e      	ldr	r3, [pc, #120]	; (8005680 <xTaskRemoveFromEventList+0xb0>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d11d      	bne.n	800564a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	3304      	adds	r3, #4
 8005612:	4618      	mov	r0, r3
 8005614:	f7fe fe40 	bl	8004298 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800561c:	4b19      	ldr	r3, [pc, #100]	; (8005684 <xTaskRemoveFromEventList+0xb4>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	429a      	cmp	r2, r3
 8005622:	d903      	bls.n	800562c <xTaskRemoveFromEventList+0x5c>
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005628:	4a16      	ldr	r2, [pc, #88]	; (8005684 <xTaskRemoveFromEventList+0xb4>)
 800562a:	6013      	str	r3, [r2, #0]
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005630:	4613      	mov	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4a13      	ldr	r2, [pc, #76]	; (8005688 <xTaskRemoveFromEventList+0xb8>)
 800563a:	441a      	add	r2, r3
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	3304      	adds	r3, #4
 8005640:	4619      	mov	r1, r3
 8005642:	4610      	mov	r0, r2
 8005644:	f7fe fdcb 	bl	80041de <vListInsertEnd>
 8005648:	e005      	b.n	8005656 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	3318      	adds	r3, #24
 800564e:	4619      	mov	r1, r3
 8005650:	480e      	ldr	r0, [pc, #56]	; (800568c <xTaskRemoveFromEventList+0xbc>)
 8005652:	f7fe fdc4 	bl	80041de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800565a:	4b0d      	ldr	r3, [pc, #52]	; (8005690 <xTaskRemoveFromEventList+0xc0>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005660:	429a      	cmp	r2, r3
 8005662:	d905      	bls.n	8005670 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005664:	2301      	movs	r3, #1
 8005666:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005668:	4b0a      	ldr	r3, [pc, #40]	; (8005694 <xTaskRemoveFromEventList+0xc4>)
 800566a:	2201      	movs	r2, #1
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	e001      	b.n	8005674 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005670:	2300      	movs	r3, #0
 8005672:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005674:	697b      	ldr	r3, [r7, #20]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	20000e20 	.word	0x20000e20
 8005684:	20000e00 	.word	0x20000e00
 8005688:	20000928 	.word	0x20000928
 800568c:	20000db8 	.word	0x20000db8
 8005690:	20000924 	.word	0x20000924
 8005694:	20000e0c 	.word	0x20000e0c

08005698 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80056a0:	4b06      	ldr	r3, [pc, #24]	; (80056bc <vTaskInternalSetTimeOutState+0x24>)
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80056a8:	4b05      	ldr	r3, [pc, #20]	; (80056c0 <vTaskInternalSetTimeOutState+0x28>)
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	605a      	str	r2, [r3, #4]
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	20000e10 	.word	0x20000e10
 80056c0:	20000dfc 	.word	0x20000dfc

080056c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b088      	sub	sp, #32
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10a      	bne.n	80056ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80056d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d8:	f383 8811 	msr	BASEPRI, r3
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	613b      	str	r3, [r7, #16]
}
 80056e6:	bf00      	nop
 80056e8:	e7fe      	b.n	80056e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10a      	bne.n	8005706 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80056f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	60fb      	str	r3, [r7, #12]
}
 8005702:	bf00      	nop
 8005704:	e7fe      	b.n	8005704 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005706:	f000 fe7d 	bl	8006404 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800570a:	4b1d      	ldr	r3, [pc, #116]	; (8005780 <xTaskCheckForTimeOut+0xbc>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005722:	d102      	bne.n	800572a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005724:	2300      	movs	r3, #0
 8005726:	61fb      	str	r3, [r7, #28]
 8005728:	e023      	b.n	8005772 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	4b15      	ldr	r3, [pc, #84]	; (8005784 <xTaskCheckForTimeOut+0xc0>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	429a      	cmp	r2, r3
 8005734:	d007      	beq.n	8005746 <xTaskCheckForTimeOut+0x82>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	429a      	cmp	r2, r3
 800573e:	d302      	bcc.n	8005746 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005740:	2301      	movs	r3, #1
 8005742:	61fb      	str	r3, [r7, #28]
 8005744:	e015      	b.n	8005772 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	429a      	cmp	r2, r3
 800574e:	d20b      	bcs.n	8005768 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	1ad2      	subs	r2, r2, r3
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f7ff ff9b 	bl	8005698 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005762:	2300      	movs	r3, #0
 8005764:	61fb      	str	r3, [r7, #28]
 8005766:	e004      	b.n	8005772 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	2200      	movs	r2, #0
 800576c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800576e:	2301      	movs	r3, #1
 8005770:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005772:	f000 fe77 	bl	8006464 <vPortExitCritical>

	return xReturn;
 8005776:	69fb      	ldr	r3, [r7, #28]
}
 8005778:	4618      	mov	r0, r3
 800577a:	3720      	adds	r7, #32
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	20000dfc 	.word	0x20000dfc
 8005784:	20000e10 	.word	0x20000e10

08005788 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005788:	b480      	push	{r7}
 800578a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800578c:	4b03      	ldr	r3, [pc, #12]	; (800579c <vTaskMissedYield+0x14>)
 800578e:	2201      	movs	r2, #1
 8005790:	601a      	str	r2, [r3, #0]
}
 8005792:	bf00      	nop
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	20000e0c 	.word	0x20000e0c

080057a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80057a8:	f000 f852 	bl	8005850 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80057ac:	4b06      	ldr	r3, [pc, #24]	; (80057c8 <prvIdleTask+0x28>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d9f9      	bls.n	80057a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80057b4:	4b05      	ldr	r3, [pc, #20]	; (80057cc <prvIdleTask+0x2c>)
 80057b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ba:	601a      	str	r2, [r3, #0]
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80057c4:	e7f0      	b.n	80057a8 <prvIdleTask+0x8>
 80057c6:	bf00      	nop
 80057c8:	20000928 	.word	0x20000928
 80057cc:	e000ed04 	.word	0xe000ed04

080057d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057d6:	2300      	movs	r3, #0
 80057d8:	607b      	str	r3, [r7, #4]
 80057da:	e00c      	b.n	80057f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	4613      	mov	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4a12      	ldr	r2, [pc, #72]	; (8005830 <prvInitialiseTaskLists+0x60>)
 80057e8:	4413      	add	r3, r2
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fe fcca 	bl	8004184 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3301      	adds	r3, #1
 80057f4:	607b      	str	r3, [r7, #4]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b37      	cmp	r3, #55	; 0x37
 80057fa:	d9ef      	bls.n	80057dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057fc:	480d      	ldr	r0, [pc, #52]	; (8005834 <prvInitialiseTaskLists+0x64>)
 80057fe:	f7fe fcc1 	bl	8004184 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005802:	480d      	ldr	r0, [pc, #52]	; (8005838 <prvInitialiseTaskLists+0x68>)
 8005804:	f7fe fcbe 	bl	8004184 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005808:	480c      	ldr	r0, [pc, #48]	; (800583c <prvInitialiseTaskLists+0x6c>)
 800580a:	f7fe fcbb 	bl	8004184 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800580e:	480c      	ldr	r0, [pc, #48]	; (8005840 <prvInitialiseTaskLists+0x70>)
 8005810:	f7fe fcb8 	bl	8004184 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005814:	480b      	ldr	r0, [pc, #44]	; (8005844 <prvInitialiseTaskLists+0x74>)
 8005816:	f7fe fcb5 	bl	8004184 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800581a:	4b0b      	ldr	r3, [pc, #44]	; (8005848 <prvInitialiseTaskLists+0x78>)
 800581c:	4a05      	ldr	r2, [pc, #20]	; (8005834 <prvInitialiseTaskLists+0x64>)
 800581e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005820:	4b0a      	ldr	r3, [pc, #40]	; (800584c <prvInitialiseTaskLists+0x7c>)
 8005822:	4a05      	ldr	r2, [pc, #20]	; (8005838 <prvInitialiseTaskLists+0x68>)
 8005824:	601a      	str	r2, [r3, #0]
}
 8005826:	bf00      	nop
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	20000928 	.word	0x20000928
 8005834:	20000d88 	.word	0x20000d88
 8005838:	20000d9c 	.word	0x20000d9c
 800583c:	20000db8 	.word	0x20000db8
 8005840:	20000dcc 	.word	0x20000dcc
 8005844:	20000de4 	.word	0x20000de4
 8005848:	20000db0 	.word	0x20000db0
 800584c:	20000db4 	.word	0x20000db4

08005850 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005856:	e019      	b.n	800588c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005858:	f000 fdd4 	bl	8006404 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800585c:	4b10      	ldr	r3, [pc, #64]	; (80058a0 <prvCheckTasksWaitingTermination+0x50>)
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	3304      	adds	r3, #4
 8005868:	4618      	mov	r0, r3
 800586a:	f7fe fd15 	bl	8004298 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800586e:	4b0d      	ldr	r3, [pc, #52]	; (80058a4 <prvCheckTasksWaitingTermination+0x54>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3b01      	subs	r3, #1
 8005874:	4a0b      	ldr	r2, [pc, #44]	; (80058a4 <prvCheckTasksWaitingTermination+0x54>)
 8005876:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005878:	4b0b      	ldr	r3, [pc, #44]	; (80058a8 <prvCheckTasksWaitingTermination+0x58>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3b01      	subs	r3, #1
 800587e:	4a0a      	ldr	r2, [pc, #40]	; (80058a8 <prvCheckTasksWaitingTermination+0x58>)
 8005880:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005882:	f000 fdef 	bl	8006464 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f810 	bl	80058ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800588c:	4b06      	ldr	r3, [pc, #24]	; (80058a8 <prvCheckTasksWaitingTermination+0x58>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1e1      	bne.n	8005858 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005894:	bf00      	nop
 8005896:	bf00      	nop
 8005898:	3708      	adds	r7, #8
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	20000dcc 	.word	0x20000dcc
 80058a4:	20000df8 	.word	0x20000df8
 80058a8:	20000de0 	.word	0x20000de0

080058ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	3354      	adds	r3, #84	; 0x54
 80058b8:	4618      	mov	r0, r3
 80058ba:	f001 f8f9 	bl	8006ab0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d108      	bne.n	80058da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 ff87 	bl	80067e0 <vPortFree>
				vPortFree( pxTCB );
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 ff84 	bl	80067e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80058d8:	e018      	b.n	800590c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d103      	bne.n	80058ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 ff7b 	bl	80067e0 <vPortFree>
	}
 80058ea:	e00f      	b.n	800590c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d00a      	beq.n	800590c <prvDeleteTCB+0x60>
	__asm volatile
 80058f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fa:	f383 8811 	msr	BASEPRI, r3
 80058fe:	f3bf 8f6f 	isb	sy
 8005902:	f3bf 8f4f 	dsb	sy
 8005906:	60fb      	str	r3, [r7, #12]
}
 8005908:	bf00      	nop
 800590a:	e7fe      	b.n	800590a <prvDeleteTCB+0x5e>
	}
 800590c:	bf00      	nop
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800591a:	4b0c      	ldr	r3, [pc, #48]	; (800594c <prvResetNextTaskUnblockTime+0x38>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d104      	bne.n	800592e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005924:	4b0a      	ldr	r3, [pc, #40]	; (8005950 <prvResetNextTaskUnblockTime+0x3c>)
 8005926:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800592a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800592c:	e008      	b.n	8005940 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800592e:	4b07      	ldr	r3, [pc, #28]	; (800594c <prvResetNextTaskUnblockTime+0x38>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	4a04      	ldr	r2, [pc, #16]	; (8005950 <prvResetNextTaskUnblockTime+0x3c>)
 800593e:	6013      	str	r3, [r2, #0]
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	20000db0 	.word	0x20000db0
 8005950:	20000e18 	.word	0x20000e18

08005954 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800595a:	4b0b      	ldr	r3, [pc, #44]	; (8005988 <xTaskGetSchedulerState+0x34>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d102      	bne.n	8005968 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005962:	2301      	movs	r3, #1
 8005964:	607b      	str	r3, [r7, #4]
 8005966:	e008      	b.n	800597a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005968:	4b08      	ldr	r3, [pc, #32]	; (800598c <xTaskGetSchedulerState+0x38>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d102      	bne.n	8005976 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005970:	2302      	movs	r3, #2
 8005972:	607b      	str	r3, [r7, #4]
 8005974:	e001      	b.n	800597a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005976:	2300      	movs	r3, #0
 8005978:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800597a:	687b      	ldr	r3, [r7, #4]
	}
 800597c:	4618      	mov	r0, r3
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	20000e04 	.word	0x20000e04
 800598c:	20000e20 	.word	0x20000e20

08005990 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800599c:	2300      	movs	r3, #0
 800599e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d056      	beq.n	8005a54 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80059a6:	4b2e      	ldr	r3, [pc, #184]	; (8005a60 <xTaskPriorityDisinherit+0xd0>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d00a      	beq.n	80059c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80059b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	60fb      	str	r3, [r7, #12]
}
 80059c2:	bf00      	nop
 80059c4:	e7fe      	b.n	80059c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10a      	bne.n	80059e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80059ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	60bb      	str	r3, [r7, #8]
}
 80059e0:	bf00      	nop
 80059e2:	e7fe      	b.n	80059e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e8:	1e5a      	subs	r2, r3, #1
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d02c      	beq.n	8005a54 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d128      	bne.n	8005a54 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	3304      	adds	r3, #4
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fe fc46 	bl	8004298 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a18:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a24:	4b0f      	ldr	r3, [pc, #60]	; (8005a64 <xTaskPriorityDisinherit+0xd4>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d903      	bls.n	8005a34 <xTaskPriorityDisinherit+0xa4>
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a30:	4a0c      	ldr	r2, [pc, #48]	; (8005a64 <xTaskPriorityDisinherit+0xd4>)
 8005a32:	6013      	str	r3, [r2, #0]
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a38:	4613      	mov	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4a09      	ldr	r2, [pc, #36]	; (8005a68 <xTaskPriorityDisinherit+0xd8>)
 8005a42:	441a      	add	r2, r3
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	3304      	adds	r3, #4
 8005a48:	4619      	mov	r1, r3
 8005a4a:	4610      	mov	r0, r2
 8005a4c:	f7fe fbc7 	bl	80041de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a50:	2301      	movs	r3, #1
 8005a52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a54:	697b      	ldr	r3, [r7, #20]
	}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3718      	adds	r7, #24
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	20000924 	.word	0x20000924
 8005a64:	20000e00 	.word	0x20000e00
 8005a68:	20000928 	.word	0x20000928

08005a6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a76:	4b21      	ldr	r3, [pc, #132]	; (8005afc <prvAddCurrentTaskToDelayedList+0x90>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a7c:	4b20      	ldr	r3, [pc, #128]	; (8005b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	3304      	adds	r3, #4
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fe fc08 	bl	8004298 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a8e:	d10a      	bne.n	8005aa6 <prvAddCurrentTaskToDelayedList+0x3a>
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d007      	beq.n	8005aa6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a96:	4b1a      	ldr	r3, [pc, #104]	; (8005b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	3304      	adds	r3, #4
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	4819      	ldr	r0, [pc, #100]	; (8005b04 <prvAddCurrentTaskToDelayedList+0x98>)
 8005aa0:	f7fe fb9d 	bl	80041de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005aa4:	e026      	b.n	8005af4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4413      	add	r3, r2
 8005aac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005aae:	4b14      	ldr	r3, [pc, #80]	; (8005b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d209      	bcs.n	8005ad2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005abe:	4b12      	ldr	r3, [pc, #72]	; (8005b08 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	4b0f      	ldr	r3, [pc, #60]	; (8005b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3304      	adds	r3, #4
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4610      	mov	r0, r2
 8005acc:	f7fe fbab 	bl	8004226 <vListInsert>
}
 8005ad0:	e010      	b.n	8005af4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ad2:	4b0e      	ldr	r3, [pc, #56]	; (8005b0c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	4b0a      	ldr	r3, [pc, #40]	; (8005b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3304      	adds	r3, #4
 8005adc:	4619      	mov	r1, r3
 8005ade:	4610      	mov	r0, r2
 8005ae0:	f7fe fba1 	bl	8004226 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ae4:	4b0a      	ldr	r3, [pc, #40]	; (8005b10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d202      	bcs.n	8005af4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005aee:	4a08      	ldr	r2, [pc, #32]	; (8005b10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	6013      	str	r3, [r2, #0]
}
 8005af4:	bf00      	nop
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	20000dfc 	.word	0x20000dfc
 8005b00:	20000924 	.word	0x20000924
 8005b04:	20000de4 	.word	0x20000de4
 8005b08:	20000db4 	.word	0x20000db4
 8005b0c:	20000db0 	.word	0x20000db0
 8005b10:	20000e18 	.word	0x20000e18

08005b14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b08a      	sub	sp, #40	; 0x28
 8005b18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b1e:	f000 fb07 	bl	8006130 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b22:	4b1c      	ldr	r3, [pc, #112]	; (8005b94 <xTimerCreateTimerTask+0x80>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d021      	beq.n	8005b6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b32:	1d3a      	adds	r2, r7, #4
 8005b34:	f107 0108 	add.w	r1, r7, #8
 8005b38:	f107 030c 	add.w	r3, r7, #12
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7fe fb07 	bl	8004150 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005b42:	6879      	ldr	r1, [r7, #4]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	9202      	str	r2, [sp, #8]
 8005b4a:	9301      	str	r3, [sp, #4]
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	2300      	movs	r3, #0
 8005b52:	460a      	mov	r2, r1
 8005b54:	4910      	ldr	r1, [pc, #64]	; (8005b98 <xTimerCreateTimerTask+0x84>)
 8005b56:	4811      	ldr	r0, [pc, #68]	; (8005b9c <xTimerCreateTimerTask+0x88>)
 8005b58:	f7ff f8b4 	bl	8004cc4 <xTaskCreateStatic>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	4a10      	ldr	r2, [pc, #64]	; (8005ba0 <xTimerCreateTimerTask+0x8c>)
 8005b60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005b62:	4b0f      	ldr	r3, [pc, #60]	; (8005ba0 <xTimerCreateTimerTask+0x8c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10a      	bne.n	8005b8a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b78:	f383 8811 	msr	BASEPRI, r3
 8005b7c:	f3bf 8f6f 	isb	sy
 8005b80:	f3bf 8f4f 	dsb	sy
 8005b84:	613b      	str	r3, [r7, #16]
}
 8005b86:	bf00      	nop
 8005b88:	e7fe      	b.n	8005b88 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005b8a:	697b      	ldr	r3, [r7, #20]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3718      	adds	r7, #24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	20000e54 	.word	0x20000e54
 8005b98:	08006c4c 	.word	0x08006c4c
 8005b9c:	08005cd9 	.word	0x08005cd9
 8005ba0:	20000e58 	.word	0x20000e58

08005ba4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b08a      	sub	sp, #40	; 0x28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
 8005bb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10a      	bne.n	8005bd2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	623b      	str	r3, [r7, #32]
}
 8005bce:	bf00      	nop
 8005bd0:	e7fe      	b.n	8005bd0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005bd2:	4b1a      	ldr	r3, [pc, #104]	; (8005c3c <xTimerGenericCommand+0x98>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d02a      	beq.n	8005c30 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2b05      	cmp	r3, #5
 8005bea:	dc18      	bgt.n	8005c1e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005bec:	f7ff feb2 	bl	8005954 <xTaskGetSchedulerState>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d109      	bne.n	8005c0a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005bf6:	4b11      	ldr	r3, [pc, #68]	; (8005c3c <xTimerGenericCommand+0x98>)
 8005bf8:	6818      	ldr	r0, [r3, #0]
 8005bfa:	f107 0110 	add.w	r1, r7, #16
 8005bfe:	2300      	movs	r3, #0
 8005c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c02:	f7fe fc77 	bl	80044f4 <xQueueGenericSend>
 8005c06:	6278      	str	r0, [r7, #36]	; 0x24
 8005c08:	e012      	b.n	8005c30 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c0a:	4b0c      	ldr	r3, [pc, #48]	; (8005c3c <xTimerGenericCommand+0x98>)
 8005c0c:	6818      	ldr	r0, [r3, #0]
 8005c0e:	f107 0110 	add.w	r1, r7, #16
 8005c12:	2300      	movs	r3, #0
 8005c14:	2200      	movs	r2, #0
 8005c16:	f7fe fc6d 	bl	80044f4 <xQueueGenericSend>
 8005c1a:	6278      	str	r0, [r7, #36]	; 0x24
 8005c1c:	e008      	b.n	8005c30 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c1e:	4b07      	ldr	r3, [pc, #28]	; (8005c3c <xTimerGenericCommand+0x98>)
 8005c20:	6818      	ldr	r0, [r3, #0]
 8005c22:	f107 0110 	add.w	r1, r7, #16
 8005c26:	2300      	movs	r3, #0
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	f7fe fd61 	bl	80046f0 <xQueueGenericSendFromISR>
 8005c2e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3728      	adds	r7, #40	; 0x28
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20000e54 	.word	0x20000e54

08005c40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b088      	sub	sp, #32
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c4a:	4b22      	ldr	r3, [pc, #136]	; (8005cd4 <prvProcessExpiredTimer+0x94>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	3304      	adds	r3, #4
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7fe fb1d 	bl	8004298 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c64:	f003 0304 	and.w	r3, r3, #4
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d022      	beq.n	8005cb2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	699a      	ldr	r2, [r3, #24]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	18d1      	adds	r1, r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	6978      	ldr	r0, [r7, #20]
 8005c7a:	f000 f8d1 	bl	8005e20 <prvInsertTimerInActiveList>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d01f      	beq.n	8005cc4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c84:	2300      	movs	r3, #0
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	2300      	movs	r3, #0
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	6978      	ldr	r0, [r7, #20]
 8005c90:	f7ff ff88 	bl	8005ba4 <xTimerGenericCommand>
 8005c94:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d113      	bne.n	8005cc4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca0:	f383 8811 	msr	BASEPRI, r3
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	60fb      	str	r3, [r7, #12]
}
 8005cae:	bf00      	nop
 8005cb0:	e7fe      	b.n	8005cb0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cb8:	f023 0301 	bic.w	r3, r3, #1
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	6978      	ldr	r0, [r7, #20]
 8005cca:	4798      	blx	r3
}
 8005ccc:	bf00      	nop
 8005cce:	3718      	adds	r7, #24
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	20000e4c 	.word	0x20000e4c

08005cd8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ce0:	f107 0308 	add.w	r3, r7, #8
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f000 f857 	bl	8005d98 <prvGetNextExpireTime>
 8005cea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	4619      	mov	r1, r3
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f000 f803 	bl	8005cfc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005cf6:	f000 f8d5 	bl	8005ea4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005cfa:	e7f1      	b.n	8005ce0 <prvTimerTask+0x8>

08005cfc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005d06:	f7ff fa39 	bl	800517c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d0a:	f107 0308 	add.w	r3, r7, #8
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 f866 	bl	8005de0 <prvSampleTimeNow>
 8005d14:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d130      	bne.n	8005d7e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10a      	bne.n	8005d38 <prvProcessTimerOrBlockTask+0x3c>
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d806      	bhi.n	8005d38 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005d2a:	f7ff fa35 	bl	8005198 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d2e:	68f9      	ldr	r1, [r7, #12]
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f7ff ff85 	bl	8005c40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005d36:	e024      	b.n	8005d82 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d008      	beq.n	8005d50 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d3e:	4b13      	ldr	r3, [pc, #76]	; (8005d8c <prvProcessTimerOrBlockTask+0x90>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d101      	bne.n	8005d4c <prvProcessTimerOrBlockTask+0x50>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e000      	b.n	8005d4e <prvProcessTimerOrBlockTask+0x52>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005d50:	4b0f      	ldr	r3, [pc, #60]	; (8005d90 <prvProcessTimerOrBlockTask+0x94>)
 8005d52:	6818      	ldr	r0, [r3, #0]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	f7fe ff7d 	bl	8004c5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005d62:	f7ff fa19 	bl	8005198 <xTaskResumeAll>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10a      	bne.n	8005d82 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005d6c:	4b09      	ldr	r3, [pc, #36]	; (8005d94 <prvProcessTimerOrBlockTask+0x98>)
 8005d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	f3bf 8f6f 	isb	sy
}
 8005d7c:	e001      	b.n	8005d82 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005d7e:	f7ff fa0b 	bl	8005198 <xTaskResumeAll>
}
 8005d82:	bf00      	nop
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	20000e50 	.word	0x20000e50
 8005d90:	20000e54 	.word	0x20000e54
 8005d94:	e000ed04 	.word	0xe000ed04

08005d98 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005da0:	4b0e      	ldr	r3, [pc, #56]	; (8005ddc <prvGetNextExpireTime+0x44>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <prvGetNextExpireTime+0x16>
 8005daa:	2201      	movs	r2, #1
 8005dac:	e000      	b.n	8005db0 <prvGetNextExpireTime+0x18>
 8005dae:	2200      	movs	r2, #0
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d105      	bne.n	8005dc8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005dbc:	4b07      	ldr	r3, [pc, #28]	; (8005ddc <prvGetNextExpireTime+0x44>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	60fb      	str	r3, [r7, #12]
 8005dc6:	e001      	b.n	8005dcc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3714      	adds	r7, #20
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	20000e4c 	.word	0x20000e4c

08005de0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005de8:	f7ff fa74 	bl	80052d4 <xTaskGetTickCount>
 8005dec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005dee:	4b0b      	ldr	r3, [pc, #44]	; (8005e1c <prvSampleTimeNow+0x3c>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d205      	bcs.n	8005e04 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005df8:	f000 f936 	bl	8006068 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	601a      	str	r2, [r3, #0]
 8005e02:	e002      	b.n	8005e0a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005e0a:	4a04      	ldr	r2, [pc, #16]	; (8005e1c <prvSampleTimeNow+0x3c>)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005e10:	68fb      	ldr	r3, [r7, #12]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000e5c 	.word	0x20000e5c

08005e20 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
 8005e2c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d812      	bhi.n	8005e6c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	1ad2      	subs	r2, r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d302      	bcc.n	8005e5a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005e54:	2301      	movs	r3, #1
 8005e56:	617b      	str	r3, [r7, #20]
 8005e58:	e01b      	b.n	8005e92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005e5a:	4b10      	ldr	r3, [pc, #64]	; (8005e9c <prvInsertTimerInActiveList+0x7c>)
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	3304      	adds	r3, #4
 8005e62:	4619      	mov	r1, r3
 8005e64:	4610      	mov	r0, r2
 8005e66:	f7fe f9de 	bl	8004226 <vListInsert>
 8005e6a:	e012      	b.n	8005e92 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d206      	bcs.n	8005e82 <prvInsertTimerInActiveList+0x62>
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d302      	bcc.n	8005e82 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	617b      	str	r3, [r7, #20]
 8005e80:	e007      	b.n	8005e92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e82:	4b07      	ldr	r3, [pc, #28]	; (8005ea0 <prvInsertTimerInActiveList+0x80>)
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	3304      	adds	r3, #4
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	f7fe f9ca 	bl	8004226 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005e92:	697b      	ldr	r3, [r7, #20]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3718      	adds	r7, #24
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	20000e50 	.word	0x20000e50
 8005ea0:	20000e4c 	.word	0x20000e4c

08005ea4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b08e      	sub	sp, #56	; 0x38
 8005ea8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005eaa:	e0ca      	b.n	8006042 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	da18      	bge.n	8005ee4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005eb2:	1d3b      	adds	r3, r7, #4
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10a      	bne.n	8005ed4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	61fb      	str	r3, [r7, #28]
}
 8005ed0:	bf00      	nop
 8005ed2:	e7fe      	b.n	8005ed2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005eda:	6850      	ldr	r0, [r2, #4]
 8005edc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ede:	6892      	ldr	r2, [r2, #8]
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f2c0 80aa 	blt.w	8006040 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d004      	beq.n	8005f02 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efa:	3304      	adds	r3, #4
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7fe f9cb 	bl	8004298 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f02:	463b      	mov	r3, r7
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7ff ff6b 	bl	8005de0 <prvSampleTimeNow>
 8005f0a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b09      	cmp	r3, #9
 8005f10:	f200 8097 	bhi.w	8006042 <prvProcessReceivedCommands+0x19e>
 8005f14:	a201      	add	r2, pc, #4	; (adr r2, 8005f1c <prvProcessReceivedCommands+0x78>)
 8005f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1a:	bf00      	nop
 8005f1c:	08005f45 	.word	0x08005f45
 8005f20:	08005f45 	.word	0x08005f45
 8005f24:	08005f45 	.word	0x08005f45
 8005f28:	08005fb9 	.word	0x08005fb9
 8005f2c:	08005fcd 	.word	0x08005fcd
 8005f30:	08006017 	.word	0x08006017
 8005f34:	08005f45 	.word	0x08005f45
 8005f38:	08005f45 	.word	0x08005f45
 8005f3c:	08005fb9 	.word	0x08005fb9
 8005f40:	08005fcd 	.word	0x08005fcd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f4a:	f043 0301 	orr.w	r3, r3, #1
 8005f4e:	b2da      	uxtb	r2, r3
 8005f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	18d1      	adds	r1, r2, r3
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f64:	f7ff ff5c 	bl	8005e20 <prvInsertTimerInActiveList>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d069      	beq.n	8006042 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f74:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d05e      	beq.n	8006042 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	441a      	add	r2, r3
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	2300      	movs	r3, #0
 8005f92:	2100      	movs	r1, #0
 8005f94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f96:	f7ff fe05 	bl	8005ba4 <xTimerGenericCommand>
 8005f9a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d14f      	bne.n	8006042 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa6:	f383 8811 	msr	BASEPRI, r3
 8005faa:	f3bf 8f6f 	isb	sy
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	61bb      	str	r3, [r7, #24]
}
 8005fb4:	bf00      	nop
 8005fb6:	e7fe      	b.n	8005fb6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fbe:	f023 0301 	bic.w	r3, r3, #1
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005fca:	e03a      	b.n	8006042 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fd2:	f043 0301 	orr.w	r3, r3, #1
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d10a      	bne.n	8006002 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff0:	f383 8811 	msr	BASEPRI, r3
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	617b      	str	r3, [r7, #20]
}
 8005ffe:	bf00      	nop
 8006000:	e7fe      	b.n	8006000 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006004:	699a      	ldr	r2, [r3, #24]
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	18d1      	adds	r1, r2, r3
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800600e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006010:	f7ff ff06 	bl	8005e20 <prvInsertTimerInActiveList>
					break;
 8006014:	e015      	b.n	8006042 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006018:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d103      	bne.n	800602c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006026:	f000 fbdb 	bl	80067e0 <vPortFree>
 800602a:	e00a      	b.n	8006042 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800602c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006032:	f023 0301 	bic.w	r3, r3, #1
 8006036:	b2da      	uxtb	r2, r3
 8006038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800603e:	e000      	b.n	8006042 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006040:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006042:	4b08      	ldr	r3, [pc, #32]	; (8006064 <prvProcessReceivedCommands+0x1c0>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	1d39      	adds	r1, r7, #4
 8006048:	2200      	movs	r2, #0
 800604a:	4618      	mov	r0, r3
 800604c:	f7fe fbec 	bl	8004828 <xQueueReceive>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	f47f af2a 	bne.w	8005eac <prvProcessReceivedCommands+0x8>
	}
}
 8006058:	bf00      	nop
 800605a:	bf00      	nop
 800605c:	3730      	adds	r7, #48	; 0x30
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	20000e54 	.word	0x20000e54

08006068 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b088      	sub	sp, #32
 800606c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800606e:	e048      	b.n	8006102 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006070:	4b2d      	ldr	r3, [pc, #180]	; (8006128 <prvSwitchTimerLists+0xc0>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800607a:	4b2b      	ldr	r3, [pc, #172]	; (8006128 <prvSwitchTimerLists+0xc0>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	3304      	adds	r3, #4
 8006088:	4618      	mov	r0, r3
 800608a:	f7fe f905 	bl	8004298 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800609c:	f003 0304 	and.w	r3, r3, #4
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d02e      	beq.n	8006102 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	4413      	add	r3, r2
 80060ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d90e      	bls.n	80060d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80060c2:	4b19      	ldr	r3, [pc, #100]	; (8006128 <prvSwitchTimerLists+0xc0>)
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	3304      	adds	r3, #4
 80060ca:	4619      	mov	r1, r3
 80060cc:	4610      	mov	r0, r2
 80060ce:	f7fe f8aa 	bl	8004226 <vListInsert>
 80060d2:	e016      	b.n	8006102 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060d4:	2300      	movs	r3, #0
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	2300      	movs	r3, #0
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	2100      	movs	r1, #0
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f7ff fd60 	bl	8005ba4 <xTimerGenericCommand>
 80060e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10a      	bne.n	8006102 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80060ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	603b      	str	r3, [r7, #0]
}
 80060fe:	bf00      	nop
 8006100:	e7fe      	b.n	8006100 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006102:	4b09      	ldr	r3, [pc, #36]	; (8006128 <prvSwitchTimerLists+0xc0>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1b1      	bne.n	8006070 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800610c:	4b06      	ldr	r3, [pc, #24]	; (8006128 <prvSwitchTimerLists+0xc0>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006112:	4b06      	ldr	r3, [pc, #24]	; (800612c <prvSwitchTimerLists+0xc4>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a04      	ldr	r2, [pc, #16]	; (8006128 <prvSwitchTimerLists+0xc0>)
 8006118:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800611a:	4a04      	ldr	r2, [pc, #16]	; (800612c <prvSwitchTimerLists+0xc4>)
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	6013      	str	r3, [r2, #0]
}
 8006120:	bf00      	nop
 8006122:	3718      	adds	r7, #24
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	20000e4c 	.word	0x20000e4c
 800612c:	20000e50 	.word	0x20000e50

08006130 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006136:	f000 f965 	bl	8006404 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800613a:	4b15      	ldr	r3, [pc, #84]	; (8006190 <prvCheckForValidListAndQueue+0x60>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d120      	bne.n	8006184 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006142:	4814      	ldr	r0, [pc, #80]	; (8006194 <prvCheckForValidListAndQueue+0x64>)
 8006144:	f7fe f81e 	bl	8004184 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006148:	4813      	ldr	r0, [pc, #76]	; (8006198 <prvCheckForValidListAndQueue+0x68>)
 800614a:	f7fe f81b 	bl	8004184 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800614e:	4b13      	ldr	r3, [pc, #76]	; (800619c <prvCheckForValidListAndQueue+0x6c>)
 8006150:	4a10      	ldr	r2, [pc, #64]	; (8006194 <prvCheckForValidListAndQueue+0x64>)
 8006152:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006154:	4b12      	ldr	r3, [pc, #72]	; (80061a0 <prvCheckForValidListAndQueue+0x70>)
 8006156:	4a10      	ldr	r2, [pc, #64]	; (8006198 <prvCheckForValidListAndQueue+0x68>)
 8006158:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800615a:	2300      	movs	r3, #0
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	4b11      	ldr	r3, [pc, #68]	; (80061a4 <prvCheckForValidListAndQueue+0x74>)
 8006160:	4a11      	ldr	r2, [pc, #68]	; (80061a8 <prvCheckForValidListAndQueue+0x78>)
 8006162:	2110      	movs	r1, #16
 8006164:	200a      	movs	r0, #10
 8006166:	f7fe f929 	bl	80043bc <xQueueGenericCreateStatic>
 800616a:	4603      	mov	r3, r0
 800616c:	4a08      	ldr	r2, [pc, #32]	; (8006190 <prvCheckForValidListAndQueue+0x60>)
 800616e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006170:	4b07      	ldr	r3, [pc, #28]	; (8006190 <prvCheckForValidListAndQueue+0x60>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d005      	beq.n	8006184 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006178:	4b05      	ldr	r3, [pc, #20]	; (8006190 <prvCheckForValidListAndQueue+0x60>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	490b      	ldr	r1, [pc, #44]	; (80061ac <prvCheckForValidListAndQueue+0x7c>)
 800617e:	4618      	mov	r0, r3
 8006180:	f7fe fd42 	bl	8004c08 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006184:	f000 f96e 	bl	8006464 <vPortExitCritical>
}
 8006188:	bf00      	nop
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	20000e54 	.word	0x20000e54
 8006194:	20000e24 	.word	0x20000e24
 8006198:	20000e38 	.word	0x20000e38
 800619c:	20000e4c 	.word	0x20000e4c
 80061a0:	20000e50 	.word	0x20000e50
 80061a4:	20000f00 	.word	0x20000f00
 80061a8:	20000e60 	.word	0x20000e60
 80061ac:	08006c54 	.word	0x08006c54

080061b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	3b04      	subs	r3, #4
 80061c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80061c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	3b04      	subs	r3, #4
 80061ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	f023 0201 	bic.w	r2, r3, #1
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	3b04      	subs	r3, #4
 80061de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80061e0:	4a0c      	ldr	r2, [pc, #48]	; (8006214 <pxPortInitialiseStack+0x64>)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3b14      	subs	r3, #20
 80061ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	3b04      	subs	r3, #4
 80061f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f06f 0202 	mvn.w	r2, #2
 80061fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3b20      	subs	r3, #32
 8006204:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006206:	68fb      	ldr	r3, [r7, #12]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	08006219 	.word	0x08006219

08006218 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800621e:	2300      	movs	r3, #0
 8006220:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006222:	4b12      	ldr	r3, [pc, #72]	; (800626c <prvTaskExitError+0x54>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800622a:	d00a      	beq.n	8006242 <prvTaskExitError+0x2a>
	__asm volatile
 800622c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006230:	f383 8811 	msr	BASEPRI, r3
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	60fb      	str	r3, [r7, #12]
}
 800623e:	bf00      	nop
 8006240:	e7fe      	b.n	8006240 <prvTaskExitError+0x28>
	__asm volatile
 8006242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	60bb      	str	r3, [r7, #8]
}
 8006254:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006256:	bf00      	nop
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0fc      	beq.n	8006258 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800625e:	bf00      	nop
 8006260:	bf00      	nop
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	2000000c 	.word	0x2000000c

08006270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006270:	4b07      	ldr	r3, [pc, #28]	; (8006290 <pxCurrentTCBConst2>)
 8006272:	6819      	ldr	r1, [r3, #0]
 8006274:	6808      	ldr	r0, [r1, #0]
 8006276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800627a:	f380 8809 	msr	PSP, r0
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f04f 0000 	mov.w	r0, #0
 8006286:	f380 8811 	msr	BASEPRI, r0
 800628a:	4770      	bx	lr
 800628c:	f3af 8000 	nop.w

08006290 <pxCurrentTCBConst2>:
 8006290:	20000924 	.word	0x20000924
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006294:	bf00      	nop
 8006296:	bf00      	nop

08006298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006298:	4808      	ldr	r0, [pc, #32]	; (80062bc <prvPortStartFirstTask+0x24>)
 800629a:	6800      	ldr	r0, [r0, #0]
 800629c:	6800      	ldr	r0, [r0, #0]
 800629e:	f380 8808 	msr	MSP, r0
 80062a2:	f04f 0000 	mov.w	r0, #0
 80062a6:	f380 8814 	msr	CONTROL, r0
 80062aa:	b662      	cpsie	i
 80062ac:	b661      	cpsie	f
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	df00      	svc	0
 80062b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80062ba:	bf00      	nop
 80062bc:	e000ed08 	.word	0xe000ed08

080062c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80062c6:	4b46      	ldr	r3, [pc, #280]	; (80063e0 <xPortStartScheduler+0x120>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a46      	ldr	r2, [pc, #280]	; (80063e4 <xPortStartScheduler+0x124>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d10a      	bne.n	80062e6 <xPortStartScheduler+0x26>
	__asm volatile
 80062d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	613b      	str	r3, [r7, #16]
}
 80062e2:	bf00      	nop
 80062e4:	e7fe      	b.n	80062e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80062e6:	4b3e      	ldr	r3, [pc, #248]	; (80063e0 <xPortStartScheduler+0x120>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a3f      	ldr	r2, [pc, #252]	; (80063e8 <xPortStartScheduler+0x128>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d10a      	bne.n	8006306 <xPortStartScheduler+0x46>
	__asm volatile
 80062f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f4:	f383 8811 	msr	BASEPRI, r3
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	60fb      	str	r3, [r7, #12]
}
 8006302:	bf00      	nop
 8006304:	e7fe      	b.n	8006304 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006306:	4b39      	ldr	r3, [pc, #228]	; (80063ec <xPortStartScheduler+0x12c>)
 8006308:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	b2db      	uxtb	r3, r3
 8006310:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	22ff      	movs	r2, #255	; 0xff
 8006316:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	b2db      	uxtb	r3, r3
 800631e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006320:	78fb      	ldrb	r3, [r7, #3]
 8006322:	b2db      	uxtb	r3, r3
 8006324:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006328:	b2da      	uxtb	r2, r3
 800632a:	4b31      	ldr	r3, [pc, #196]	; (80063f0 <xPortStartScheduler+0x130>)
 800632c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800632e:	4b31      	ldr	r3, [pc, #196]	; (80063f4 <xPortStartScheduler+0x134>)
 8006330:	2207      	movs	r2, #7
 8006332:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006334:	e009      	b.n	800634a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006336:	4b2f      	ldr	r3, [pc, #188]	; (80063f4 <xPortStartScheduler+0x134>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	3b01      	subs	r3, #1
 800633c:	4a2d      	ldr	r2, [pc, #180]	; (80063f4 <xPortStartScheduler+0x134>)
 800633e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006340:	78fb      	ldrb	r3, [r7, #3]
 8006342:	b2db      	uxtb	r3, r3
 8006344:	005b      	lsls	r3, r3, #1
 8006346:	b2db      	uxtb	r3, r3
 8006348:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800634a:	78fb      	ldrb	r3, [r7, #3]
 800634c:	b2db      	uxtb	r3, r3
 800634e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006352:	2b80      	cmp	r3, #128	; 0x80
 8006354:	d0ef      	beq.n	8006336 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006356:	4b27      	ldr	r3, [pc, #156]	; (80063f4 <xPortStartScheduler+0x134>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f1c3 0307 	rsb	r3, r3, #7
 800635e:	2b04      	cmp	r3, #4
 8006360:	d00a      	beq.n	8006378 <xPortStartScheduler+0xb8>
	__asm volatile
 8006362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	60bb      	str	r3, [r7, #8]
}
 8006374:	bf00      	nop
 8006376:	e7fe      	b.n	8006376 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006378:	4b1e      	ldr	r3, [pc, #120]	; (80063f4 <xPortStartScheduler+0x134>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	021b      	lsls	r3, r3, #8
 800637e:	4a1d      	ldr	r2, [pc, #116]	; (80063f4 <xPortStartScheduler+0x134>)
 8006380:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006382:	4b1c      	ldr	r3, [pc, #112]	; (80063f4 <xPortStartScheduler+0x134>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800638a:	4a1a      	ldr	r2, [pc, #104]	; (80063f4 <xPortStartScheduler+0x134>)
 800638c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	b2da      	uxtb	r2, r3
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006396:	4b18      	ldr	r3, [pc, #96]	; (80063f8 <xPortStartScheduler+0x138>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a17      	ldr	r2, [pc, #92]	; (80063f8 <xPortStartScheduler+0x138>)
 800639c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063a2:	4b15      	ldr	r3, [pc, #84]	; (80063f8 <xPortStartScheduler+0x138>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a14      	ldr	r2, [pc, #80]	; (80063f8 <xPortStartScheduler+0x138>)
 80063a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80063ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063ae:	f000 f8dd 	bl	800656c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063b2:	4b12      	ldr	r3, [pc, #72]	; (80063fc <xPortStartScheduler+0x13c>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80063b8:	f000 f8fc 	bl	80065b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80063bc:	4b10      	ldr	r3, [pc, #64]	; (8006400 <xPortStartScheduler+0x140>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a0f      	ldr	r2, [pc, #60]	; (8006400 <xPortStartScheduler+0x140>)
 80063c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80063c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063c8:	f7ff ff66 	bl	8006298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063cc:	f7ff f84c 	bl	8005468 <vTaskSwitchContext>
	prvTaskExitError();
 80063d0:	f7ff ff22 	bl	8006218 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3718      	adds	r7, #24
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	e000ed00 	.word	0xe000ed00
 80063e4:	410fc271 	.word	0x410fc271
 80063e8:	410fc270 	.word	0x410fc270
 80063ec:	e000e400 	.word	0xe000e400
 80063f0:	20000f50 	.word	0x20000f50
 80063f4:	20000f54 	.word	0x20000f54
 80063f8:	e000ed20 	.word	0xe000ed20
 80063fc:	2000000c 	.word	0x2000000c
 8006400:	e000ef34 	.word	0xe000ef34

08006404 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
	__asm volatile
 800640a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640e:	f383 8811 	msr	BASEPRI, r3
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	607b      	str	r3, [r7, #4]
}
 800641c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800641e:	4b0f      	ldr	r3, [pc, #60]	; (800645c <vPortEnterCritical+0x58>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	3301      	adds	r3, #1
 8006424:	4a0d      	ldr	r2, [pc, #52]	; (800645c <vPortEnterCritical+0x58>)
 8006426:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006428:	4b0c      	ldr	r3, [pc, #48]	; (800645c <vPortEnterCritical+0x58>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d10f      	bne.n	8006450 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006430:	4b0b      	ldr	r3, [pc, #44]	; (8006460 <vPortEnterCritical+0x5c>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <vPortEnterCritical+0x4c>
	__asm volatile
 800643a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643e:	f383 8811 	msr	BASEPRI, r3
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	603b      	str	r3, [r7, #0]
}
 800644c:	bf00      	nop
 800644e:	e7fe      	b.n	800644e <vPortEnterCritical+0x4a>
	}
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	2000000c 	.word	0x2000000c
 8006460:	e000ed04 	.word	0xe000ed04

08006464 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800646a:	4b12      	ldr	r3, [pc, #72]	; (80064b4 <vPortExitCritical+0x50>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10a      	bne.n	8006488 <vPortExitCritical+0x24>
	__asm volatile
 8006472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006476:	f383 8811 	msr	BASEPRI, r3
 800647a:	f3bf 8f6f 	isb	sy
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	607b      	str	r3, [r7, #4]
}
 8006484:	bf00      	nop
 8006486:	e7fe      	b.n	8006486 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006488:	4b0a      	ldr	r3, [pc, #40]	; (80064b4 <vPortExitCritical+0x50>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	3b01      	subs	r3, #1
 800648e:	4a09      	ldr	r2, [pc, #36]	; (80064b4 <vPortExitCritical+0x50>)
 8006490:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006492:	4b08      	ldr	r3, [pc, #32]	; (80064b4 <vPortExitCritical+0x50>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d105      	bne.n	80064a6 <vPortExitCritical+0x42>
 800649a:	2300      	movs	r3, #0
 800649c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	f383 8811 	msr	BASEPRI, r3
}
 80064a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	2000000c 	.word	0x2000000c
	...

080064c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064c0:	f3ef 8009 	mrs	r0, PSP
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	4b15      	ldr	r3, [pc, #84]	; (8006520 <pxCurrentTCBConst>)
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	f01e 0f10 	tst.w	lr, #16
 80064d0:	bf08      	it	eq
 80064d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80064d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064da:	6010      	str	r0, [r2, #0]
 80064dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80064e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80064e4:	f380 8811 	msr	BASEPRI, r0
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f7fe ffba 	bl	8005468 <vTaskSwitchContext>
 80064f4:	f04f 0000 	mov.w	r0, #0
 80064f8:	f380 8811 	msr	BASEPRI, r0
 80064fc:	bc09      	pop	{r0, r3}
 80064fe:	6819      	ldr	r1, [r3, #0]
 8006500:	6808      	ldr	r0, [r1, #0]
 8006502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006506:	f01e 0f10 	tst.w	lr, #16
 800650a:	bf08      	it	eq
 800650c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006510:	f380 8809 	msr	PSP, r0
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	f3af 8000 	nop.w

08006520 <pxCurrentTCBConst>:
 8006520:	20000924 	.word	0x20000924
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006524:	bf00      	nop
 8006526:	bf00      	nop

08006528 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	607b      	str	r3, [r7, #4]
}
 8006540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006542:	f7fe fed7 	bl	80052f4 <xTaskIncrementTick>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d003      	beq.n	8006554 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800654c:	4b06      	ldr	r3, [pc, #24]	; (8006568 <xPortSysTickHandler+0x40>)
 800654e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	2300      	movs	r3, #0
 8006556:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	f383 8811 	msr	BASEPRI, r3
}
 800655e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006560:	bf00      	nop
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	e000ed04 	.word	0xe000ed04

0800656c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006570:	4b0b      	ldr	r3, [pc, #44]	; (80065a0 <vPortSetupTimerInterrupt+0x34>)
 8006572:	2200      	movs	r2, #0
 8006574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006576:	4b0b      	ldr	r3, [pc, #44]	; (80065a4 <vPortSetupTimerInterrupt+0x38>)
 8006578:	2200      	movs	r2, #0
 800657a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800657c:	4b0a      	ldr	r3, [pc, #40]	; (80065a8 <vPortSetupTimerInterrupt+0x3c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a0a      	ldr	r2, [pc, #40]	; (80065ac <vPortSetupTimerInterrupt+0x40>)
 8006582:	fba2 2303 	umull	r2, r3, r2, r3
 8006586:	099b      	lsrs	r3, r3, #6
 8006588:	4a09      	ldr	r2, [pc, #36]	; (80065b0 <vPortSetupTimerInterrupt+0x44>)
 800658a:	3b01      	subs	r3, #1
 800658c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800658e:	4b04      	ldr	r3, [pc, #16]	; (80065a0 <vPortSetupTimerInterrupt+0x34>)
 8006590:	2207      	movs	r2, #7
 8006592:	601a      	str	r2, [r3, #0]
}
 8006594:	bf00      	nop
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	e000e010 	.word	0xe000e010
 80065a4:	e000e018 	.word	0xe000e018
 80065a8:	20000000 	.word	0x20000000
 80065ac:	10624dd3 	.word	0x10624dd3
 80065b0:	e000e014 	.word	0xe000e014

080065b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80065b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80065c4 <vPortEnableVFP+0x10>
 80065b8:	6801      	ldr	r1, [r0, #0]
 80065ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80065be:	6001      	str	r1, [r0, #0]
 80065c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80065c2:	bf00      	nop
 80065c4:	e000ed88 	.word	0xe000ed88

080065c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80065ce:	f3ef 8305 	mrs	r3, IPSR
 80065d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2b0f      	cmp	r3, #15
 80065d8:	d914      	bls.n	8006604 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80065da:	4a17      	ldr	r2, [pc, #92]	; (8006638 <vPortValidateInterruptPriority+0x70>)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4413      	add	r3, r2
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80065e4:	4b15      	ldr	r3, [pc, #84]	; (800663c <vPortValidateInterruptPriority+0x74>)
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	7afa      	ldrb	r2, [r7, #11]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d20a      	bcs.n	8006604 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	607b      	str	r3, [r7, #4]
}
 8006600:	bf00      	nop
 8006602:	e7fe      	b.n	8006602 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006604:	4b0e      	ldr	r3, [pc, #56]	; (8006640 <vPortValidateInterruptPriority+0x78>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800660c:	4b0d      	ldr	r3, [pc, #52]	; (8006644 <vPortValidateInterruptPriority+0x7c>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	429a      	cmp	r2, r3
 8006612:	d90a      	bls.n	800662a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006618:	f383 8811 	msr	BASEPRI, r3
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	f3bf 8f4f 	dsb	sy
 8006624:	603b      	str	r3, [r7, #0]
}
 8006626:	bf00      	nop
 8006628:	e7fe      	b.n	8006628 <vPortValidateInterruptPriority+0x60>
	}
 800662a:	bf00      	nop
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	e000e3f0 	.word	0xe000e3f0
 800663c:	20000f50 	.word	0x20000f50
 8006640:	e000ed0c 	.word	0xe000ed0c
 8006644:	20000f54 	.word	0x20000f54

08006648 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b08a      	sub	sp, #40	; 0x28
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006650:	2300      	movs	r3, #0
 8006652:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006654:	f7fe fd92 	bl	800517c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006658:	4b5b      	ldr	r3, [pc, #364]	; (80067c8 <pvPortMalloc+0x180>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d101      	bne.n	8006664 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006660:	f000 f920 	bl	80068a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006664:	4b59      	ldr	r3, [pc, #356]	; (80067cc <pvPortMalloc+0x184>)
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4013      	ands	r3, r2
 800666c:	2b00      	cmp	r3, #0
 800666e:	f040 8093 	bne.w	8006798 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d01d      	beq.n	80066b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006678:	2208      	movs	r2, #8
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4413      	add	r3, r2
 800667e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f003 0307 	and.w	r3, r3, #7
 8006686:	2b00      	cmp	r3, #0
 8006688:	d014      	beq.n	80066b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f023 0307 	bic.w	r3, r3, #7
 8006690:	3308      	adds	r3, #8
 8006692:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f003 0307 	and.w	r3, r3, #7
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00a      	beq.n	80066b4 <pvPortMalloc+0x6c>
	__asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	617b      	str	r3, [r7, #20]
}
 80066b0:	bf00      	nop
 80066b2:	e7fe      	b.n	80066b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d06e      	beq.n	8006798 <pvPortMalloc+0x150>
 80066ba:	4b45      	ldr	r3, [pc, #276]	; (80067d0 <pvPortMalloc+0x188>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d869      	bhi.n	8006798 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80066c4:	4b43      	ldr	r3, [pc, #268]	; (80067d4 <pvPortMalloc+0x18c>)
 80066c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80066c8:	4b42      	ldr	r3, [pc, #264]	; (80067d4 <pvPortMalloc+0x18c>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066ce:	e004      	b.n	80066da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80066d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80066d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d903      	bls.n	80066ec <pvPortMalloc+0xa4>
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1f1      	bne.n	80066d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80066ec:	4b36      	ldr	r3, [pc, #216]	; (80067c8 <pvPortMalloc+0x180>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d050      	beq.n	8006798 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80066f6:	6a3b      	ldr	r3, [r7, #32]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2208      	movs	r2, #8
 80066fc:	4413      	add	r3, r2
 80066fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	1ad2      	subs	r2, r2, r3
 8006710:	2308      	movs	r3, #8
 8006712:	005b      	lsls	r3, r3, #1
 8006714:	429a      	cmp	r2, r3
 8006716:	d91f      	bls.n	8006758 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4413      	add	r3, r2
 800671e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	f003 0307 	and.w	r3, r3, #7
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00a      	beq.n	8006740 <pvPortMalloc+0xf8>
	__asm volatile
 800672a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672e:	f383 8811 	msr	BASEPRI, r3
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	613b      	str	r3, [r7, #16]
}
 800673c:	bf00      	nop
 800673e:	e7fe      	b.n	800673e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	685a      	ldr	r2, [r3, #4]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	1ad2      	subs	r2, r2, r3
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006752:	69b8      	ldr	r0, [r7, #24]
 8006754:	f000 f908 	bl	8006968 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006758:	4b1d      	ldr	r3, [pc, #116]	; (80067d0 <pvPortMalloc+0x188>)
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	4a1b      	ldr	r2, [pc, #108]	; (80067d0 <pvPortMalloc+0x188>)
 8006764:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006766:	4b1a      	ldr	r3, [pc, #104]	; (80067d0 <pvPortMalloc+0x188>)
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	4b1b      	ldr	r3, [pc, #108]	; (80067d8 <pvPortMalloc+0x190>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	429a      	cmp	r2, r3
 8006770:	d203      	bcs.n	800677a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006772:	4b17      	ldr	r3, [pc, #92]	; (80067d0 <pvPortMalloc+0x188>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a18      	ldr	r2, [pc, #96]	; (80067d8 <pvPortMalloc+0x190>)
 8006778:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677c:	685a      	ldr	r2, [r3, #4]
 800677e:	4b13      	ldr	r3, [pc, #76]	; (80067cc <pvPortMalloc+0x184>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	431a      	orrs	r2, r3
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	2200      	movs	r2, #0
 800678c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800678e:	4b13      	ldr	r3, [pc, #76]	; (80067dc <pvPortMalloc+0x194>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3301      	adds	r3, #1
 8006794:	4a11      	ldr	r2, [pc, #68]	; (80067dc <pvPortMalloc+0x194>)
 8006796:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006798:	f7fe fcfe 	bl	8005198 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	f003 0307 	and.w	r3, r3, #7
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00a      	beq.n	80067bc <pvPortMalloc+0x174>
	__asm volatile
 80067a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067aa:	f383 8811 	msr	BASEPRI, r3
 80067ae:	f3bf 8f6f 	isb	sy
 80067b2:	f3bf 8f4f 	dsb	sy
 80067b6:	60fb      	str	r3, [r7, #12]
}
 80067b8:	bf00      	nop
 80067ba:	e7fe      	b.n	80067ba <pvPortMalloc+0x172>
	return pvReturn;
 80067bc:	69fb      	ldr	r3, [r7, #28]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3728      	adds	r7, #40	; 0x28
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	20001b18 	.word	0x20001b18
 80067cc:	20001b2c 	.word	0x20001b2c
 80067d0:	20001b1c 	.word	0x20001b1c
 80067d4:	20001b10 	.word	0x20001b10
 80067d8:	20001b20 	.word	0x20001b20
 80067dc:	20001b24 	.word	0x20001b24

080067e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d04d      	beq.n	800688e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80067f2:	2308      	movs	r3, #8
 80067f4:	425b      	negs	r3, r3
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	4413      	add	r3, r2
 80067fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	685a      	ldr	r2, [r3, #4]
 8006804:	4b24      	ldr	r3, [pc, #144]	; (8006898 <vPortFree+0xb8>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4013      	ands	r3, r2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10a      	bne.n	8006824 <vPortFree+0x44>
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	60fb      	str	r3, [r7, #12]
}
 8006820:	bf00      	nop
 8006822:	e7fe      	b.n	8006822 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00a      	beq.n	8006842 <vPortFree+0x62>
	__asm volatile
 800682c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	60bb      	str	r3, [r7, #8]
}
 800683e:	bf00      	nop
 8006840:	e7fe      	b.n	8006840 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	4b14      	ldr	r3, [pc, #80]	; (8006898 <vPortFree+0xb8>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4013      	ands	r3, r2
 800684c:	2b00      	cmp	r3, #0
 800684e:	d01e      	beq.n	800688e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d11a      	bne.n	800688e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	4b0e      	ldr	r3, [pc, #56]	; (8006898 <vPortFree+0xb8>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	43db      	mvns	r3, r3
 8006862:	401a      	ands	r2, r3
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006868:	f7fe fc88 	bl	800517c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	685a      	ldr	r2, [r3, #4]
 8006870:	4b0a      	ldr	r3, [pc, #40]	; (800689c <vPortFree+0xbc>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4413      	add	r3, r2
 8006876:	4a09      	ldr	r2, [pc, #36]	; (800689c <vPortFree+0xbc>)
 8006878:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800687a:	6938      	ldr	r0, [r7, #16]
 800687c:	f000 f874 	bl	8006968 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006880:	4b07      	ldr	r3, [pc, #28]	; (80068a0 <vPortFree+0xc0>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3301      	adds	r3, #1
 8006886:	4a06      	ldr	r2, [pc, #24]	; (80068a0 <vPortFree+0xc0>)
 8006888:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800688a:	f7fe fc85 	bl	8005198 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800688e:	bf00      	nop
 8006890:	3718      	adds	r7, #24
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	20001b2c 	.word	0x20001b2c
 800689c:	20001b1c 	.word	0x20001b1c
 80068a0:	20001b28 	.word	0x20001b28

080068a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068aa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80068ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80068b0:	4b27      	ldr	r3, [pc, #156]	; (8006950 <prvHeapInit+0xac>)
 80068b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f003 0307 	and.w	r3, r3, #7
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00c      	beq.n	80068d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	3307      	adds	r3, #7
 80068c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f023 0307 	bic.w	r3, r3, #7
 80068ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	4a1f      	ldr	r2, [pc, #124]	; (8006950 <prvHeapInit+0xac>)
 80068d4:	4413      	add	r3, r2
 80068d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068dc:	4a1d      	ldr	r2, [pc, #116]	; (8006954 <prvHeapInit+0xb0>)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068e2:	4b1c      	ldr	r3, [pc, #112]	; (8006954 <prvHeapInit+0xb0>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	4413      	add	r3, r2
 80068ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80068f0:	2208      	movs	r2, #8
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	1a9b      	subs	r3, r3, r2
 80068f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f023 0307 	bic.w	r3, r3, #7
 80068fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4a15      	ldr	r2, [pc, #84]	; (8006958 <prvHeapInit+0xb4>)
 8006904:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006906:	4b14      	ldr	r3, [pc, #80]	; (8006958 <prvHeapInit+0xb4>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2200      	movs	r2, #0
 800690c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800690e:	4b12      	ldr	r3, [pc, #72]	; (8006958 <prvHeapInit+0xb4>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2200      	movs	r2, #0
 8006914:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	1ad2      	subs	r2, r2, r3
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006924:	4b0c      	ldr	r3, [pc, #48]	; (8006958 <prvHeapInit+0xb4>)
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	4a0a      	ldr	r2, [pc, #40]	; (800695c <prvHeapInit+0xb8>)
 8006932:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	4a09      	ldr	r2, [pc, #36]	; (8006960 <prvHeapInit+0xbc>)
 800693a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800693c:	4b09      	ldr	r3, [pc, #36]	; (8006964 <prvHeapInit+0xc0>)
 800693e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006942:	601a      	str	r2, [r3, #0]
}
 8006944:	bf00      	nop
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr
 8006950:	20000f58 	.word	0x20000f58
 8006954:	20001b10 	.word	0x20001b10
 8006958:	20001b18 	.word	0x20001b18
 800695c:	20001b20 	.word	0x20001b20
 8006960:	20001b1c 	.word	0x20001b1c
 8006964:	20001b2c 	.word	0x20001b2c

08006968 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006970:	4b28      	ldr	r3, [pc, #160]	; (8006a14 <prvInsertBlockIntoFreeList+0xac>)
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	e002      	b.n	800697c <prvInsertBlockIntoFreeList+0x14>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	429a      	cmp	r2, r3
 8006984:	d8f7      	bhi.n	8006976 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	4413      	add	r3, r2
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	429a      	cmp	r2, r3
 8006996:	d108      	bne.n	80069aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	441a      	add	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	441a      	add	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d118      	bne.n	80069f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	4b15      	ldr	r3, [pc, #84]	; (8006a18 <prvInsertBlockIntoFreeList+0xb0>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d00d      	beq.n	80069e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685a      	ldr	r2, [r3, #4]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	441a      	add	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	601a      	str	r2, [r3, #0]
 80069e4:	e008      	b.n	80069f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069e6:	4b0c      	ldr	r3, [pc, #48]	; (8006a18 <prvInsertBlockIntoFreeList+0xb0>)
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	601a      	str	r2, [r3, #0]
 80069ee:	e003      	b.n	80069f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d002      	beq.n	8006a06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a06:	bf00      	nop
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	20001b10 	.word	0x20001b10
 8006a18:	20001b18 	.word	0x20001b18

08006a1c <__libc_init_array>:
 8006a1c:	b570      	push	{r4, r5, r6, lr}
 8006a1e:	4d0d      	ldr	r5, [pc, #52]	; (8006a54 <__libc_init_array+0x38>)
 8006a20:	4c0d      	ldr	r4, [pc, #52]	; (8006a58 <__libc_init_array+0x3c>)
 8006a22:	1b64      	subs	r4, r4, r5
 8006a24:	10a4      	asrs	r4, r4, #2
 8006a26:	2600      	movs	r6, #0
 8006a28:	42a6      	cmp	r6, r4
 8006a2a:	d109      	bne.n	8006a40 <__libc_init_array+0x24>
 8006a2c:	4d0b      	ldr	r5, [pc, #44]	; (8006a5c <__libc_init_array+0x40>)
 8006a2e:	4c0c      	ldr	r4, [pc, #48]	; (8006a60 <__libc_init_array+0x44>)
 8006a30:	f000 f8f2 	bl	8006c18 <_init>
 8006a34:	1b64      	subs	r4, r4, r5
 8006a36:	10a4      	asrs	r4, r4, #2
 8006a38:	2600      	movs	r6, #0
 8006a3a:	42a6      	cmp	r6, r4
 8006a3c:	d105      	bne.n	8006a4a <__libc_init_array+0x2e>
 8006a3e:	bd70      	pop	{r4, r5, r6, pc}
 8006a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a44:	4798      	blx	r3
 8006a46:	3601      	adds	r6, #1
 8006a48:	e7ee      	b.n	8006a28 <__libc_init_array+0xc>
 8006a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a4e:	4798      	blx	r3
 8006a50:	3601      	adds	r6, #1
 8006a52:	e7f2      	b.n	8006a3a <__libc_init_array+0x1e>
 8006a54:	08006d30 	.word	0x08006d30
 8006a58:	08006d30 	.word	0x08006d30
 8006a5c:	08006d30 	.word	0x08006d30
 8006a60:	08006d34 	.word	0x08006d34

08006a64 <__retarget_lock_acquire_recursive>:
 8006a64:	4770      	bx	lr

08006a66 <__retarget_lock_release_recursive>:
 8006a66:	4770      	bx	lr

08006a68 <memcpy>:
 8006a68:	440a      	add	r2, r1
 8006a6a:	4291      	cmp	r1, r2
 8006a6c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006a70:	d100      	bne.n	8006a74 <memcpy+0xc>
 8006a72:	4770      	bx	lr
 8006a74:	b510      	push	{r4, lr}
 8006a76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a7e:	4291      	cmp	r1, r2
 8006a80:	d1f9      	bne.n	8006a76 <memcpy+0xe>
 8006a82:	bd10      	pop	{r4, pc}

08006a84 <memset>:
 8006a84:	4402      	add	r2, r0
 8006a86:	4603      	mov	r3, r0
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d100      	bne.n	8006a8e <memset+0xa>
 8006a8c:	4770      	bx	lr
 8006a8e:	f803 1b01 	strb.w	r1, [r3], #1
 8006a92:	e7f9      	b.n	8006a88 <memset+0x4>

08006a94 <cleanup_glue>:
 8006a94:	b538      	push	{r3, r4, r5, lr}
 8006a96:	460c      	mov	r4, r1
 8006a98:	6809      	ldr	r1, [r1, #0]
 8006a9a:	4605      	mov	r5, r0
 8006a9c:	b109      	cbz	r1, 8006aa2 <cleanup_glue+0xe>
 8006a9e:	f7ff fff9 	bl	8006a94 <cleanup_glue>
 8006aa2:	4621      	mov	r1, r4
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006aaa:	f000 b869 	b.w	8006b80 <_free_r>
	...

08006ab0 <_reclaim_reent>:
 8006ab0:	4b2c      	ldr	r3, [pc, #176]	; (8006b64 <_reclaim_reent+0xb4>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4283      	cmp	r3, r0
 8006ab6:	b570      	push	{r4, r5, r6, lr}
 8006ab8:	4604      	mov	r4, r0
 8006aba:	d051      	beq.n	8006b60 <_reclaim_reent+0xb0>
 8006abc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006abe:	b143      	cbz	r3, 8006ad2 <_reclaim_reent+0x22>
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d14a      	bne.n	8006b5c <_reclaim_reent+0xac>
 8006ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ac8:	6819      	ldr	r1, [r3, #0]
 8006aca:	b111      	cbz	r1, 8006ad2 <_reclaim_reent+0x22>
 8006acc:	4620      	mov	r0, r4
 8006ace:	f000 f857 	bl	8006b80 <_free_r>
 8006ad2:	6961      	ldr	r1, [r4, #20]
 8006ad4:	b111      	cbz	r1, 8006adc <_reclaim_reent+0x2c>
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	f000 f852 	bl	8006b80 <_free_r>
 8006adc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006ade:	b111      	cbz	r1, 8006ae6 <_reclaim_reent+0x36>
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	f000 f84d 	bl	8006b80 <_free_r>
 8006ae6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006ae8:	b111      	cbz	r1, 8006af0 <_reclaim_reent+0x40>
 8006aea:	4620      	mov	r0, r4
 8006aec:	f000 f848 	bl	8006b80 <_free_r>
 8006af0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006af2:	b111      	cbz	r1, 8006afa <_reclaim_reent+0x4a>
 8006af4:	4620      	mov	r0, r4
 8006af6:	f000 f843 	bl	8006b80 <_free_r>
 8006afa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006afc:	b111      	cbz	r1, 8006b04 <_reclaim_reent+0x54>
 8006afe:	4620      	mov	r0, r4
 8006b00:	f000 f83e 	bl	8006b80 <_free_r>
 8006b04:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006b06:	b111      	cbz	r1, 8006b0e <_reclaim_reent+0x5e>
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f000 f839 	bl	8006b80 <_free_r>
 8006b0e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006b10:	b111      	cbz	r1, 8006b18 <_reclaim_reent+0x68>
 8006b12:	4620      	mov	r0, r4
 8006b14:	f000 f834 	bl	8006b80 <_free_r>
 8006b18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b1a:	b111      	cbz	r1, 8006b22 <_reclaim_reent+0x72>
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	f000 f82f 	bl	8006b80 <_free_r>
 8006b22:	69a3      	ldr	r3, [r4, #24]
 8006b24:	b1e3      	cbz	r3, 8006b60 <_reclaim_reent+0xb0>
 8006b26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006b28:	4620      	mov	r0, r4
 8006b2a:	4798      	blx	r3
 8006b2c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006b2e:	b1b9      	cbz	r1, 8006b60 <_reclaim_reent+0xb0>
 8006b30:	4620      	mov	r0, r4
 8006b32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006b36:	f7ff bfad 	b.w	8006a94 <cleanup_glue>
 8006b3a:	5949      	ldr	r1, [r1, r5]
 8006b3c:	b941      	cbnz	r1, 8006b50 <_reclaim_reent+0xa0>
 8006b3e:	3504      	adds	r5, #4
 8006b40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b42:	2d80      	cmp	r5, #128	; 0x80
 8006b44:	68d9      	ldr	r1, [r3, #12]
 8006b46:	d1f8      	bne.n	8006b3a <_reclaim_reent+0x8a>
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f000 f819 	bl	8006b80 <_free_r>
 8006b4e:	e7ba      	b.n	8006ac6 <_reclaim_reent+0x16>
 8006b50:	680e      	ldr	r6, [r1, #0]
 8006b52:	4620      	mov	r0, r4
 8006b54:	f000 f814 	bl	8006b80 <_free_r>
 8006b58:	4631      	mov	r1, r6
 8006b5a:	e7ef      	b.n	8006b3c <_reclaim_reent+0x8c>
 8006b5c:	2500      	movs	r5, #0
 8006b5e:	e7ef      	b.n	8006b40 <_reclaim_reent+0x90>
 8006b60:	bd70      	pop	{r4, r5, r6, pc}
 8006b62:	bf00      	nop
 8006b64:	20000010 	.word	0x20000010

08006b68 <__malloc_lock>:
 8006b68:	4801      	ldr	r0, [pc, #4]	; (8006b70 <__malloc_lock+0x8>)
 8006b6a:	f7ff bf7b 	b.w	8006a64 <__retarget_lock_acquire_recursive>
 8006b6e:	bf00      	nop
 8006b70:	20001b30 	.word	0x20001b30

08006b74 <__malloc_unlock>:
 8006b74:	4801      	ldr	r0, [pc, #4]	; (8006b7c <__malloc_unlock+0x8>)
 8006b76:	f7ff bf76 	b.w	8006a66 <__retarget_lock_release_recursive>
 8006b7a:	bf00      	nop
 8006b7c:	20001b30 	.word	0x20001b30

08006b80 <_free_r>:
 8006b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b82:	2900      	cmp	r1, #0
 8006b84:	d044      	beq.n	8006c10 <_free_r+0x90>
 8006b86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b8a:	9001      	str	r0, [sp, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f1a1 0404 	sub.w	r4, r1, #4
 8006b92:	bfb8      	it	lt
 8006b94:	18e4      	addlt	r4, r4, r3
 8006b96:	f7ff ffe7 	bl	8006b68 <__malloc_lock>
 8006b9a:	4a1e      	ldr	r2, [pc, #120]	; (8006c14 <_free_r+0x94>)
 8006b9c:	9801      	ldr	r0, [sp, #4]
 8006b9e:	6813      	ldr	r3, [r2, #0]
 8006ba0:	b933      	cbnz	r3, 8006bb0 <_free_r+0x30>
 8006ba2:	6063      	str	r3, [r4, #4]
 8006ba4:	6014      	str	r4, [r2, #0]
 8006ba6:	b003      	add	sp, #12
 8006ba8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bac:	f7ff bfe2 	b.w	8006b74 <__malloc_unlock>
 8006bb0:	42a3      	cmp	r3, r4
 8006bb2:	d908      	bls.n	8006bc6 <_free_r+0x46>
 8006bb4:	6825      	ldr	r5, [r4, #0]
 8006bb6:	1961      	adds	r1, r4, r5
 8006bb8:	428b      	cmp	r3, r1
 8006bba:	bf01      	itttt	eq
 8006bbc:	6819      	ldreq	r1, [r3, #0]
 8006bbe:	685b      	ldreq	r3, [r3, #4]
 8006bc0:	1949      	addeq	r1, r1, r5
 8006bc2:	6021      	streq	r1, [r4, #0]
 8006bc4:	e7ed      	b.n	8006ba2 <_free_r+0x22>
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	b10b      	cbz	r3, 8006bd0 <_free_r+0x50>
 8006bcc:	42a3      	cmp	r3, r4
 8006bce:	d9fa      	bls.n	8006bc6 <_free_r+0x46>
 8006bd0:	6811      	ldr	r1, [r2, #0]
 8006bd2:	1855      	adds	r5, r2, r1
 8006bd4:	42a5      	cmp	r5, r4
 8006bd6:	d10b      	bne.n	8006bf0 <_free_r+0x70>
 8006bd8:	6824      	ldr	r4, [r4, #0]
 8006bda:	4421      	add	r1, r4
 8006bdc:	1854      	adds	r4, r2, r1
 8006bde:	42a3      	cmp	r3, r4
 8006be0:	6011      	str	r1, [r2, #0]
 8006be2:	d1e0      	bne.n	8006ba6 <_free_r+0x26>
 8006be4:	681c      	ldr	r4, [r3, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	6053      	str	r3, [r2, #4]
 8006bea:	4421      	add	r1, r4
 8006bec:	6011      	str	r1, [r2, #0]
 8006bee:	e7da      	b.n	8006ba6 <_free_r+0x26>
 8006bf0:	d902      	bls.n	8006bf8 <_free_r+0x78>
 8006bf2:	230c      	movs	r3, #12
 8006bf4:	6003      	str	r3, [r0, #0]
 8006bf6:	e7d6      	b.n	8006ba6 <_free_r+0x26>
 8006bf8:	6825      	ldr	r5, [r4, #0]
 8006bfa:	1961      	adds	r1, r4, r5
 8006bfc:	428b      	cmp	r3, r1
 8006bfe:	bf04      	itt	eq
 8006c00:	6819      	ldreq	r1, [r3, #0]
 8006c02:	685b      	ldreq	r3, [r3, #4]
 8006c04:	6063      	str	r3, [r4, #4]
 8006c06:	bf04      	itt	eq
 8006c08:	1949      	addeq	r1, r1, r5
 8006c0a:	6021      	streq	r1, [r4, #0]
 8006c0c:	6054      	str	r4, [r2, #4]
 8006c0e:	e7ca      	b.n	8006ba6 <_free_r+0x26>
 8006c10:	b003      	add	sp, #12
 8006c12:	bd30      	pop	{r4, r5, pc}
 8006c14:	20001b34 	.word	0x20001b34

08006c18 <_init>:
 8006c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1a:	bf00      	nop
 8006c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c1e:	bc08      	pop	{r3}
 8006c20:	469e      	mov	lr, r3
 8006c22:	4770      	bx	lr

08006c24 <_fini>:
 8006c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c26:	bf00      	nop
 8006c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c2a:	bc08      	pop	{r3}
 8006c2c:	469e      	mov	lr, r3
 8006c2e:	4770      	bx	lr
